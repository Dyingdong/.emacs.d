(undo-tree-save-format-version . 1)
"d9bf36ca368638f7a2844c3bd870e29c2dfcf937"
[nil nil nil nil (25292 14229 600956 0) 0 nil]
([nil nil ((#(";; ---------------------------------------------------------------------------" 0 3 (fontified t face font-lock-comment-delimiter-face) 3 78 (fontified t face font-lock-comment-face)) . 179) (t 25285 12837 273928 910000)) nil (25294 52321 750924 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 179) (undo-tree-id58 . -1)) nil (25294 52321 750923 0) 0 nil])
([nil nil ((#(";; ---------------------------------------------------------------------------" 0 3 (fontified t face font-lock-comment-delimiter-face) 3 78 (fontified t face font-lock-comment-face)) . 393)) nil (25294 52321 750922 0) 0 nil])
([nil nil ((394 . 403) (393 . 395)) nil (25294 52321 750921 0) 0 nil])
([nil nil ((403 . 405)) nil (25294 52321 750920 0) 0 nil])
([nil nil ((405 . 406)) nil (25294 52321 750919 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 421 . 422) (nil fontified nil 406 . 422) (406 . 422)) nil (25294 52321 750919 0) 0 nil])
([nil nil ((422 . 425)) nil (25294 52321 750918 0) 0 nil])
([nil nil ((425 . 428)) nil (25294 52321 750917 0) 0 nil])
([nil nil ((425 . 430) (#(":ho" 0 3 (fontified t face font-lock-builtin-face)) . -425) (undo-tree-id57 . -3) 428) nil (25294 52321 750916 0) 0 nil])
([nil nil ((432 . 437) (430 . 433)) nil (25294 52321 750915 0) 0 nil])
([nil nil ((437 . 440)) nil (25294 52321 750914 0) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . -439) (undo-tree-id56 . -1) 440) nil (25294 52321 750913 0) 0 nil])
([nil nil ((439 . 442)) nil (25294 52321 750912 0) 0 nil])
([nil nil ((432 . 444) (#("company-mo" 0 10 (fontified t)) . -432) (undo-tree-id55 . -10) 442) nil (25294 52321 750911 0) 0 nil])
([nil nil ((444 . 458)) nil (25294 52321 750909 0) 0 nil])
([nil nil ((458 . 466)) nil (25294 52321 750909 0) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -464) (undo-tree-id53 . -1) (#("p" 0 1 (fontified t)) . -465) (undo-tree-id54 . -1) 466) nil (25294 52321 750908 0) 0 nil])
([nil nil ((464 . 468)) nil (25294 52321 750906 0) 0 nil])
([nil nil ((470 . 471)) nil (25294 52321 750905 0) 0 nil])
([nil nil ((471 . 474)) nil (25294 52321 750904 0) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -471) (undo-tree-id50 . -1) (#("s" 0 1 (fontified t)) . -472) (undo-tree-id51 . -1) (#("d" 0 1 (fontified t)) . -473) (undo-tree-id52 . -1) 474) nil (25294 52321 750904 0) 0 nil])
([nil nil ((471 . 472)) nil (25294 52321 750901 0) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -471) (undo-tree-id49 . -1) 472) nil (25294 52321 750900 0) 0 nil])
([nil nil ((472 . 474) (471 . 473)) nil (25294 52321 750899 0) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -472) (undo-tree-id47 . -1) (#("s" 0 1 (fontified t)) . -473) (undo-tree-id48 . -1) 474) nil (25294 52321 750898 0) 0 nil])
([nil nil ((#("(" 0 1 (fontified nil)) . -471) (undo-tree-id41 . -1) (undo-tree-id42 . 1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (#(")" 0 1 (fontified t)) . 472) (undo-tree-id45 . 1) (undo-tree-id46 . -1)) nil (25294 52321 750895 0) 0 nil])
([nil nil ((472 . 474) (471 . 473)) nil (25294 52321 750891 0) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -472) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (#("s" 0 1 (fontified t)) . -473) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) 474) nil (25294 52321 750890 0) 0 nil])
([nil nil ((#("(" 0 1 (fontified nil)) . -471) (undo-tree-id27 . 1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (#(")" 0 1 (fontified t)) . 472) (undo-tree-id33 . 1) (undo-tree-id34 . -1)) nil (25294 52321 750885 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 470) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) 471) nil (25294 52321 750880 0) 0 nil])
([nil nil ((469 . 472)) nil (25294 52321 750876 0) 0 nil])
([nil nil ((472 . 477)) nil (25294 52321 750875 0) 0 nil])
([nil nil ((472 . 479) (#(":conf" 0 5 (fontified t face font-lock-builtin-face)) . -472) (undo-tree-id19 . -5) (undo-tree-id20 . -5) 477) nil (25294 52321 750874 0) 0 nil])
([nil nil ((479 . 482)) nil (25294 52321 750872 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 520 . 521) (nil fontified nil 482 . 521) (482 . 521)) nil (25294 52321 750871 0) 0 nil])
([nil nil ((522 . 524)) nil (25294 52321 750870 0) 0 nil])
([nil nil ((525 . 527) (524 . 526)) nil (25294 52321 750870 0) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -525) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (#("s" 0 1 (fontified t)) . -526) (undo-tree-id17 . -1) (undo-tree-id18 . -1) 527) nil (25294 52321 750869 0) 0 nil])
([nil nil ((#("(" 0 1 (fontified nil)) . -524) (undo-tree-id8 . 1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (#(")" 0 1 (fontified t)) . 525) (undo-tree-id13 . 1) (undo-tree-id14 . -1)) nil (25294 52321 750865 0) 0 nil])
([nil nil ((#("

" 0 1 (fontified t) 1 2 (fontified t)) . 522) (undo-tree-id5 . -2) (undo-tree-id6 . -2) (undo-tree-id7 . -2) 524) nil (25294 52321 750860 0) 0 nil])
([nil nil ((392 . 393)) nil (25294 52321 750857 0) 0 nil])
([nil nil ((393 . 405)) nil (25294 52321 750856 0) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face font-lock-comment-face)) . -403) (undo-tree-id3 . -1) (#("s" 0 1 (fontified t face font-lock-comment-face)) . -404) (undo-tree-id4 . -1) 405) nil (25294 52321 750856 0) 0 nil])
([nil nil ((403 . 404)) nil (25294 52321 750853 0) 0 nil])
([nil nil ((404 . 412)) nil (25294 52321 750853 0) 0 nil])
([nil nil ((#("用" 0 1 (fontified t face font-lock-comment-face)) . -411) (undo-tree-id2 . -1) 412) nil (25294 52321 750852 0) 0 nil])
([nil nil ((411 . 423)) nil (25294 52321 750850 0) 0 nil])
([nil nil ((423 . 435)) nil (25294 52321 750850 0) 0 nil])
([nil nil ((435 . 437)) nil (25294 52321 750849 0) 0 nil])
([nil nil ((437 . 444)) nil (25294 52321 750848 0) 0 nil])
([nil nil ((#("，" 0 1 (fontified t face font-lock-comment-face)) . -443) (undo-tree-id1 . -1) 444) nil (25294 52321 750848 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t face font-lock-comment-face)) . 442) (undo-tree-id0 . -1) 443) nil (25294 52321 750846 0) 0 nil])
([nil nil ((442 . 448)) nil (25294 52321 750826 0) 0 nil])
([nil nil ((448 . 454)) nil (25294 52321 750826 0) 0 nil])
([nil nil ((454 . 459)) nil (25294 52321 750825 0) 0 nil])
([nil nil ((#("d" 0 1 (fontified nil face font-lock-comment-face)) . -459) (459 . 460)) nil (25294 52321 750823 0) 0 nil])
([nil nil ((459 . 464)) nil (25294 52321 750818 0) 0 nil])
([nil nil ((389 . 390) (t 25294 52321 754758 235000)) nil (25300 9496 949429 0) 0 nil])
([nil nil ((#("。" 0 1 (fontified t)) . -389) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) 390) nil (25300 9496 949428 0) 0 nil])
([nil nil ((389 . 391)) nil (25300 9496 949409 0) 0 nil])
([nil nil ((392 . 395)) nil (25300 9496 949483 0) 0 nil])
([nil nil ((394 . 396) (#("  " 0 2 (fontified nil)) . 393) (undo-tree-id8 . -2) (undo-tree-id9 . -2) (395 . 396)) nil (25300 9511 204438 0) 0 nil] [nil nil ((nil rear-nonsticky nil 584 . 585) (nil fontified nil 428 . 585) (nil fontified nil 395 . 428) (395 . 585)) ((#("(setq company-show-numbers t) ;; 给选项编号 (按快捷键 M-1、M-2 等等来进行选择).
  (setq company-selection-wrap-around t)
  (setq company-transformers '(company-sort-by-occurrence))) ; 根据选择的频率进行排序，读者如果不喜欢可以去掉" 0 1 (fontified nil) 1 5 (face font-lock-keyword-face fontified nil) 5 30 (fontified nil) 30 33 (face font-lock-comment-delimiter-face fontified nil) 33 63 (face font-lock-comment-face fontified nil charset chinese-gb2312) 63 66 (fontified nil charset chinese-gb2312) 66 70 (face font-lock-keyword-face fontified nil charset chinese-gb2312) 70 104 (fontified nil charset chinese-gb2312) 104 107 (fontified nil charset chinese-gb2312) 107 111 (face font-lock-keyword-face fontified nil charset chinese-gb2312) 111 165 (fontified nil charset chinese-gb2312) 165 167 (face font-lock-comment-delimiter-face fontified nil charset chinese-gb2312) 167 189 (face font-lock-comment-face fontified nil charset chinese-gb2312) 189 190 (face font-lock-comment-face rear-nonsticky nil fontified nil charset chinese-gb2312)) . 395) (undo-tree-id3 . -190) (undo-tree-id4 . -104) (undo-tree-id5 . -104) (undo-tree-id6 . -190) (nil fontified t 465 . 499) (nil fontified t 461 . 465) (nil fontified t 458 . 461) (nil fontified t 428 . 458) (nil rear-nonsticky t 584 . 585)) (25300 9496 949405 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 582 . 583) (nil fontified nil 426 . 583) (nil fontified nil 393 . 426) (393 . 583)) nil (25300 9511 204435 0) 0 nil])
nil
([nil nil ((#("  " 0 2 (fontified nil)) . -586) (393 . 395) 583) nil (25300 9511 204433 0) 0 nil])
([nil nil ((#(";" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -426) (undo-tree-id7 . -1) 427) nil (25300 9511 204428 0) 0 nil])
([nil nil ((587 . 588) (t 25300 9511 209045 950000)) nil (25300 9548 191714 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 666 . 667) (nil fontified nil 588 . 667) (588 . 667)) nil (25300 9548 191713 0) 0 nil])
([nil nil ((#("  " 0 2 (fontified nil)) . -625) (667 . 668)) nil (25300 9548 191709 0) 0 nil])
([nil nil ((625 . 627) 665 (t 25300 9548 194530 433000)) nil (25300 9565 970721 0) 0 nil])
([nil nil ((587 . 588)) nil (25300 9565 970720 0) 0 nil])
([nil nil ((588 . 593)) nil (25300 9565 970720 0) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face font-lock-comment-face)) . -591) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (#("u" 0 1 (fontified t face font-lock-comment-face)) . -592) (undo-tree-id18 . -1) 593) nil (25300 9565 970719 0) 0 nil])
([nil nil ((591 . 593)) nil (25300 9565 970716 0) 0 nil])
([nil nil ((#("徒" 0 1 (fontified t face font-lock-comment-face)) . -591) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (#("刑" 0 1 (fontified t face font-lock-comment-face)) . -592) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) 593) nil (25300 9565 970715 0) 0 nil])
([nil nil ((591 . 595)) nil (25300 9565 970703 0) 0 nil])
([nil nil ((#("
  :ensure t" 0 3 (fontified t) 3 10 (fontified t face font-lock-builtin-face) 10 12 (fontified t)) . 620) (undo-tree-id540 . -1) (undo-tree-id541 . -12) (undo-tree-id542 . -12) (t 25300 9565 973895 556000)) nil (25300 10005 642177 0) 0 nil])
([nil nil ((#("
  " 0 3 (fontified t)) . 823) (undo-tree-id538 . -3) (undo-tree-id539 . -1) 826) nil (25300 10005 642175 0) 0 nil])
([nil nil ((823 . 824)) nil (25300 10005 642173 0) 0 nil])
([nil nil ((269 . 271)) nil (25300 10005 642172 0) 0 nil])
([nil nil ((#("；" 0 1 (fontified t)) . -269) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (#("；" 0 1 (fontified t)) . -270) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) 271) nil (25300 10005 642159 0) 0 nil])
([nil nil ((269 . 271)) nil (25300 10005 641843 0) 0 nil])
([nil nil ((178 . 179) (t 25300 10005 645521 40000)) nil (25300 10015 506134 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 277 . 278) (nil fontified nil 179 . 278) (179 . 278)) nil (25300 10015 506132 0) 0 nil])
([nil nil ((278 . 279)) nil (25300 10015 506127 0) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-unmatched-face) fontified t)) . -688) (undo-tree-id3 . -1) (undo-tree-id4 . 1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) 689 (t 25300 10015 509639 29000)) nil (25300 10124 277600 0) 0 nil])
([nil nil ((#("
" 0 1 (face font-lock-comment-face fontified t)) . 687) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) 688) nil (25300 10124 277592 0) 0 nil])
([nil nil ((688 . 689) (t 25300 10124 281429 127000)) nil (25300 10305 763715 0) 0 nil])
([nil nil ((690 . 693) (689 . 691)) nil (25300 10305 763714 0) 0 nil])
([nil nil ((693 . 704)) nil (25300 10305 763713 0) 0 nil])
([nil nil ((#("0" 0 1 (face font-lock-constant-face fontified t)) . -703) (undo-tree-id410 . -1) 704) nil (25300 10305 763713 0) 0 nil])
([nil nil ((703 . 704)) nil (25300 10305 763711 0) 0 nil])
([nil nil ((#("'" 0 1 (fontified t)) . -698) (undo-tree-id404 . -1) (#("i" 0 1 (face font-lock-constant-face fontified t)) . -699) (undo-tree-id405 . -1) (#("n" 0 1 (face font-lock-constant-face fontified t)) . -700) (undo-tree-id406 . -1) (#("t" 0 1 (face font-lock-constant-face fontified t)) . -701) (undo-tree-id407 . -1) (#("i" 0 1 (face font-lock-constant-face fontified t)) . -702) (undo-tree-id408 . -1) (#("-" 0 1 (face font-lock-constant-face fontified t)) . -703) (undo-tree-id409 . -1) 704) nil (25300 10305 763710 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 697) (undo-tree-id403 . -1) 698) nil (25300 10305 763705 0) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -690) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (#("e" 0 1 (fontified t)) . -691) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (#("q" 0 1 (fontified t)) . -692) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (#("u" 0 1 (fontified t)) . -693) (undo-tree-id399 . -1) (#("i" 0 1 (fontified t)) . -694) (undo-tree-id400 . -1) (#("r" 0 1 (fontified t)) . -695) (undo-tree-id401 . -1) (#("e" 0 1 (face font-lock-keyword-face fontified t)) . -696) (undo-tree-id402 . -1) 697) nil (25300 10305 763702 0) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -689) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . 1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . 690) (undo-tree-id391 . 1) (undo-tree-id392 . -1)) nil (25300 10305 763693 0) 0 nil])
([nil nil ((#("
" 0 1 (face font-lock-comment-face fontified t)) . 687) (undo-tree-id383 . -1) (undo-tree-id384 . -1) 688) nil (25300 10305 763688 0) 0 nil])
([nil nil ((#(";" 0 1 (face font-lock-comment-delimiter-face fontified t)) . -370) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (#(";" 0 1 (face font-lock-comment-delimiter-face fontified t)) . -371) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) 372) nil (25300 10305 763674 0) 0 nil])
([nil nil ((278 . 279) (t 25300 10305 767484 559000)) nil (25300 10673 433372 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 878 . 879) (nil fontified nil 279 . 879) (279 . 879)) nil (25300 10673 433371 0) 0 nil])
([nil nil ((#(";; workaround for company-transformers
(setq company-tabnine--disable-next-transform nil)
(defun my-company--transform-candidates (func &rest args)
  (if (not company-tabnine--disable-next-transform)
      (apply func args)
    (setq company-tabnine--disable-next-transform nil)
    (car args)))

(defun my-company-tabnine (func &rest args)
  (when (eq (car args) 'candidates)
    (setq company-tabnine--disable-next-transform t))
  (apply func args))

(advice-add #'company--transform-candidates :around #'my-company--transform-candidates)
(advice-add #'company-tabnine :around #'my-company-tabnine)" 0 3 (fontified t face font-lock-comment-delimiter-face) 3 39 (fontified t face font-lock-comment-face) 39 40 (fontified t face (rainbow-delimiters-depth-1-face)) 40 44 (fontified t face font-lock-keyword-face) 44 88 (fontified t) 88 89 (fontified t face (rainbow-delimiters-depth-1-face)) 89 90 (fontified t) 90 91 (fontified t face (rainbow-delimiters-depth-1-face)) 91 96 (fontified t face font-lock-keyword-face) 96 97 (fontified t) 97 129 (fontified t face font-lock-function-name-face) 129 130 (fontified t) 130 131 (fontified t face (rainbow-delimiters-depth-2-face)) 131 136 (fontified t) 136 141 (fontified t face font-lock-type-face) 141 146 (fontified t) 146 147 (fontified t face (rainbow-delimiters-depth-2-face)) 147 150 (fontified t) 150 151 (fontified t face (rainbow-delimiters-depth-2-face)) 151 153 (fontified t face font-lock-keyword-face) 153 154 (fontified t) 154 155 (fontified t face (rainbow-delimiters-depth-3-face)) 155 198 (fontified t) 198 199 (fontified t face (rainbow-delimiters-depth-3-face)) 199 206 (fontified t) 206 207 (fontified t face (rainbow-delimiters-depth-3-face)) 207 222 (fontified t) 222 223 (fontified t face (rainbow-delimiters-depth-3-face)) 223 228 (fontified t) 228 229 (fontified t face (rainbow-delimiters-depth-3-face)) 229 233 (fontified t face font-lock-keyword-face) 233 277 (fontified t) 277 278 (fontified t face (rainbow-delimiters-depth-3-face)) 278 283 (fontified t) 283 284 (fontified t face (rainbow-delimiters-depth-3-face)) 284 292 (fontified t) 292 293 (fontified t face (rainbow-delimiters-depth-3-face)) 293 294 (fontified t face (rainbow-delimiters-depth-2-face)) 294 295 (fontified t face (rainbow-delimiters-depth-1-face)) 295 297 (fontified t) 297 298 (fontified t face (rainbow-delimiters-depth-1-face)) 298 303 (fontified t face font-lock-keyword-face) 303 304 (fontified t) 304 322 (fontified t face font-lock-function-name-face) 322 323 (fontified t) 323 324 (fontified t face (rainbow-delimiters-depth-2-face)) 324 329 (fontified t) 329 334 (fontified t face font-lock-type-face) 334 339 (fontified t) 339 340 (fontified t face (rainbow-delimiters-depth-2-face)) 340 343 (fontified t) 343 344 (fontified t face (rainbow-delimiters-depth-2-face)) 344 348 (fontified t face font-lock-keyword-face) 348 349 (fontified t) 349 350 (fontified t face (rainbow-delimiters-depth-3-face)) 350 353 (fontified t) 353 354 (fontified t face (rainbow-delimiters-depth-4-face)) 354 362 (fontified t) 362 363 (fontified t face (rainbow-delimiters-depth-4-face)) 363 375 (fontified t) 375 376 (fontified t face (rainbow-delimiters-depth-3-face)) 376 381 (fontified t) 381 382 (fontified t face (rainbow-delimiters-depth-3-face)) 382 386 (fontified t face font-lock-keyword-face) 386 428 (fontified t) 428 429 (fontified t face (rainbow-delimiters-depth-3-face)) 429 430 (fontified t face (rainbow-delimiters-depth-2-face)) 430 433 (fontified t) 433 434 (fontified t face (rainbow-delimiters-depth-2-face)) 434 449 (fontified t) 449 450 (fontified t face (rainbow-delimiters-depth-2-face)) 450 451 (fontified t face (rainbow-delimiters-depth-1-face)) 451 453 (fontified t) 453 454 (fontified t face (rainbow-delimiters-depth-1-face)) 454 497 (fontified t) 497 504 (fontified t face font-lock-builtin-face) 504 539 (fontified t) 539 540 (fontified t face (rainbow-delimiters-depth-1-face)) 540 541 (fontified t) 541 542 (fontified t face (rainbow-delimiters-depth-1-face)) 542 571 (fontified t) 571 578 (fontified t face font-lock-builtin-face) 578 599 (fontified t) 599 600 (fontified t rear-nonsticky t face (rainbow-delimiters-depth-1-face))) . 279) (undo-tree-id55 . -39) (undo-tree-id56 . -600) (undo-tree-id57 . -600) (undo-tree-id58 . -600)) nil (25300 10673 433370 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 278) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) 279) nil (25300 10673 433367 0) 0 nil])
([nil nil ((277 . 280)) nil (25300 10673 433363 0) 0 nil])
([nil nil ((280 . 282) (#("\"" 0 1 (fontified nil)) . -280) (280 . 281)) nil (25300 10673 433363 0) 0 nil])
([nil nil ((#("\"" 0 1 (fontified nil face font-lock-string-face)) . -280) (undo-tree-id49 . -1) (#("\"" 0 1 (fontified t face font-lock-string-face)) . 281)) nil (25300 10673 433361 0) 0 nil])
([nil nil ((280 . 284)) nil (25300 10673 433360 0) 0 nil])
([nil nil ((280 . 287) (#(":con" 0 4 (fontified t face font-lock-builtin-face)) . -280) (undo-tree-id47 . -4) (undo-tree-id48 . -4) 284) nil (25300 10673 433359 0) 0 nil])
([nil nil ((287 . 290)) nil (25300 10673 433357 0) 0 nil])
([nil nil ((nil fontified nil 889 . 890) (nil fontified nil 868 . 889) (nil fontified nil 861 . 868) (nil fontified nil 832 . 861) (nil fontified nil 831 . 832) (nil fontified nil 830 . 831) (nil fontified nil 829 . 830) (nil fontified nil 794 . 829) (nil fontified nil 787 . 794) (nil fontified nil 744 . 787) (nil fontified nil 743 . 744) (nil fontified nil 741 . 743) (nil fontified nil 740 . 741) (nil fontified nil 739 . 740) (nil fontified nil 724 . 739) (nil fontified nil 723 . 724) (nil fontified nil 720 . 723) (nil fontified nil 719 . 720) (nil fontified nil 718 . 719) (nil fontified nil 676 . 718) (nil fontified nil 672 . 676) (nil fontified nil 671 . 672) (nil fontified nil 666 . 671) (nil fontified nil 665 . 666) (nil fontified nil 653 . 665) (nil fontified nil 652 . 653) (nil fontified nil 644 . 652) (nil fontified nil 643 . 644) (nil fontified nil 640 . 643) (nil fontified nil 639 . 640) (nil fontified nil 638 . 639) (nil fontified nil 634 . 638) (nil fontified nil 633 . 634) (nil fontified nil 630 . 633) (nil fontified nil 629 . 630) (nil fontified nil 624 . 629) (nil fontified nil 619 . 624) (nil fontified nil 614 . 619) (nil fontified nil 613 . 614) (nil fontified nil 612 . 613) (nil fontified nil 594 . 612) (nil fontified nil 593 . 594) (nil fontified nil 588 . 593) (nil fontified nil 587 . 588) (nil fontified nil 585 . 587) (nil fontified nil 584 . 585) (nil fontified nil 583 . 584) (nil fontified nil 582 . 583) (nil fontified nil 574 . 582) (nil fontified nil 573 . 574) (nil fontified nil 568 . 573) (nil fontified nil 567 . 568) (nil fontified nil 523 . 567) (nil fontified nil 519 . 523) (nil fontified nil 518 . 519) (nil fontified nil 513 . 518) (nil fontified nil 512 . 513) (nil fontified nil 497 . 512) (nil fontified nil 496 . 497) (nil fontified nil 489 . 496) (nil fontified nil 488 . 489) (nil fontified nil 445 . 488) (nil fontified nil 444 . 445) (nil fontified nil 443 . 444) (nil fontified nil 441 . 443) (nil fontified nil 440 . 441) (nil fontified nil 437 . 440) (nil fontified nil 436 . 437) (nil fontified nil 431 . 436) (nil fontified nil 426 . 431) (nil fontified nil 421 . 426) (nil fontified nil 420 . 421) (nil fontified nil 419 . 420) (nil fontified nil 387 . 419) (nil fontified nil 386 . 387) (nil fontified nil 381 . 386) (nil fontified nil 380 . 381) (nil fontified nil 379 . 380) (nil fontified nil 378 . 379) (nil fontified nil 334 . 378) (nil fontified nil 330 . 334) (nil fontified nil 329 . 330) (nil fontified nil 293 . 329) (nil fontified nil 290 . 293) (290 . 890)) nil (25300 10673 433354 0) 0 nil])
([nil nil ((851 . 853) (761 . 763) (737 . 741) (#("  " 0 2 (fontified nil)) . 737) (681 . 687) (#("    " 0 4 (fontified nil)) . 681) (643 . 647) (#("  " 0 2 (fontified nil)) . 643) (597 . 599) (577 . 583) (#("    " 0 4 (fontified nil)) . 577) (520 . 526) (#("    " 0 4 (fontified nil)) . 520) (442 . 446) (#("  " 0 2 (fontified nil)) . 442) (382 . 384) (329 . 331) 890) nil (25300 10673 433339 0) 0 nil])
([nil nil ((#("
  :ensure t" 0 3 (fontified t) 3 10 (fontified t face font-lock-builtin-face) 10 12 (fontified t)) . 207) (undo-tree-id43 . -1) (undo-tree-id44 . -12) (undo-tree-id45 . -12) (undo-tree-id46 . -12)) nil (25300 10673 433336 0) 0 nil])
([nil nil ((#("(use-package company-tabnine
  :init (add-to-list 'company-backends #'company-tabnine)
  :config
  ;; workaround for company-transformers
  (setq company-tabnine--disable-next-transform nil)
  (defun my-company--transform-candidates (func &rest args)
    (if (not company-tabnine--disable-next-transform)
      (apply func args)
      (setq company-tabnine--disable-next-transform nil)
      (car args)))

  (defun my-company-tabnine (func &rest args)
    (when (eq (car args) 'candidates)
      (setq company-tabnine--disable-next-transform t))
    (apply func args))

  (advice-add #'company--transform-candidates :around #'my-company--transform-candidates)
  (advice-add #'company-tabnine :around #'my-company-tabnine))" 0 1 (fontified t face (rainbow-delimiters-depth-1-face)) 1 12 (fontified t face font-lock-keyword-face) 12 13 (fontified t) 13 28 (fontified t face font-lock-constant-face) 28 29 (fontified t) 29 31 (fontified t) 31 36 (fontified t face font-lock-builtin-face) 36 37 (fontified t) 37 38 (fontified t face (rainbow-delimiters-depth-2-face)) 38 85 (fontified t) 85 86 (fontified t face (rainbow-delimiters-depth-2-face)) 86 87 (fontified t) 87 89 (fontified t) 89 96 (fontified t face font-lock-builtin-face) 96 97 (fontified t) 97 99 (fontified t) 99 102 (fontified t face font-lock-comment-delimiter-face) 102 138 (fontified t face font-lock-comment-face) 138 140 (fontified t) 140 141 (fontified t face (rainbow-delimiters-depth-2-face)) 141 145 (fontified t face font-lock-keyword-face) 145 189 (fontified t) 189 190 (fontified t face (rainbow-delimiters-depth-2-face)) 190 193 (fontified t) 193 194 (fontified t face (rainbow-delimiters-depth-2-face)) 194 199 (fontified t face font-lock-keyword-face) 199 200 (fontified t) 200 232 (fontified t face font-lock-function-name-face) 232 233 (fontified t) 233 234 (fontified t face (rainbow-delimiters-depth-3-face)) 234 239 (fontified t) 239 244 (fontified t face font-lock-type-face) 244 249 (fontified t) 249 250 (fontified t face (rainbow-delimiters-depth-3-face)) 250 255 (fontified t) 255 256 (fontified t face (rainbow-delimiters-depth-3-face)) 256 258 (fontified t face font-lock-keyword-face) 258 259 (fontified t) 259 260 (fontified t face (rainbow-delimiters-depth-4-face)) 260 303 (fontified t) 303 304 (fontified t face (rainbow-delimiters-depth-4-face)) 304 311 (fontified t) 311 312 (fontified t face (rainbow-delimiters-depth-4-face)) 312 327 (fontified t) 327 328 (fontified t face (rainbow-delimiters-depth-4-face)) 328 335 (fontified t) 335 336 (fontified t face (rainbow-delimiters-depth-4-face)) 336 340 (fontified t face font-lock-keyword-face) 340 384 (fontified t) 384 385 (fontified t face (rainbow-delimiters-depth-4-face)) 385 392 (fontified t) 392 393 (fontified t face (rainbow-delimiters-depth-4-face)) 393 401 (fontified t) 401 402 (fontified t face (rainbow-delimiters-depth-4-face)) 402 403 (fontified t face (rainbow-delimiters-depth-3-face)) 403 404 (fontified t face (rainbow-delimiters-depth-2-face)) 404 408 (fontified t) 408 409 (fontified t face (rainbow-delimiters-depth-2-face)) 409 414 (fontified t face font-lock-keyword-face) 414 415 (fontified t) 415 433 (fontified t face font-lock-function-name-face) 433 434 (fontified t) 434 435 (fontified t face (rainbow-delimiters-depth-3-face)) 435 440 (fontified t) 440 445 (fontified t face font-lock-type-face) 445 450 (fontified t) 450 451 (fontified t face (rainbow-delimiters-depth-3-face)) 451 456 (fontified t) 456 457 (fontified t face (rainbow-delimiters-depth-3-face)) 457 461 (fontified t face font-lock-keyword-face) 461 462 (fontified t) 462 463 (fontified t face (rainbow-delimiters-depth-4-face)) 463 466 (fontified t) 466 467 (fontified t face (rainbow-delimiters-depth-5-face)) 467 475 (fontified t) 475 476 (fontified t face (rainbow-delimiters-depth-5-face)) 476 488 (fontified t) 488 489 (fontified t face (rainbow-delimiters-depth-4-face)) 489 496 (fontified t) 496 497 (fontified t face (rainbow-delimiters-depth-4-face)) 497 501 (fontified t face font-lock-keyword-face) 501 543 (fontified t) 543 544 (fontified t face (rainbow-delimiters-depth-4-face)) 544 545 (fontified t face (rainbow-delimiters-depth-3-face)) 545 550 (fontified t) 550 551 (fontified t face (rainbow-delimiters-depth-3-face)) 551 566 (fontified t) 566 567 (fontified t face (rainbow-delimiters-depth-3-face)) 567 568 (fontified t face (rainbow-delimiters-depth-2-face)) 568 572 (fontified t) 572 573 (fontified t face (rainbow-delimiters-depth-2-face)) 573 616 (fontified t) 616 623 (fontified t face font-lock-builtin-face) 623 658 (fontified t) 658 659 (fontified t face (rainbow-delimiters-depth-2-face)) 659 662 (fontified t) 662 663 (fontified t face (rainbow-delimiters-depth-2-face)) 663 692 (fontified t) 692 699 (fontified t face font-lock-builtin-face) 699 720 (fontified t) 720 721 (rear-nonsticky t fontified t face (rainbow-delimiters-depth-2-face)) 721 722 (fontified t face (rainbow-delimiters-depth-1-face))) . 179) (undo-tree-id25 . -29) (undo-tree-id26 . -722) (undo-tree-id27 . -722) (undo-tree-id28 . -722) (undo-tree-id29 . -722) (undo-tree-id30 . -722) (undo-tree-id31 . -722) (undo-tree-id32 . 722) (undo-tree-id33 . -1) (undo-tree-id34 . 1) (undo-tree-id35 . -722) (undo-tree-id36 . -89) (undo-tree-id37 . -722) (undo-tree-id38 . -28) (undo-tree-id39 . -99) (undo-tree-id40 . -722) (undo-tree-id41 . -28) (undo-tree-id42 . -722)) nil (25300 10673 433332 0) 0 nil])
([nil nil ((#("

" 0 2 (fontified t)) . 177) (undo-tree-id11 . -2) (undo-tree-id12 . -2) (undo-tree-id13 . -2) (undo-tree-id14 . -2) (undo-tree-id15 . -2) (undo-tree-id16 . -2) (undo-tree-id17 . -2) (undo-tree-id18 . -2) (undo-tree-id19 . -2) (undo-tree-id20 . -2) (undo-tree-id21 . -2) (undo-tree-id22 . -2) (undo-tree-id23 . -2) (undo-tree-id24 . -2) 179) nil (25300 10673 433321 0) 0 nil])
([nil nil ((863 . 864)) nil (25300 10673 433312 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 1585 . 1586) (nil fontified nil 1585 . 1586) (nil fontified nil 1584 . 1585) (nil fontified nil 1563 . 1584) (nil fontified nil 1556 . 1563) (nil fontified nil 1527 . 1556) (nil fontified nil 1526 . 1527) (nil fontified nil 1523 . 1526) (nil fontified nil 1522 . 1523) (nil fontified nil 1487 . 1522) (nil fontified nil 1480 . 1487) (nil fontified nil 1437 . 1480) (nil fontified nil 1436 . 1437) (nil fontified nil 1432 . 1436) (nil fontified nil 1431 . 1432) (nil fontified nil 1430 . 1431) (nil fontified nil 1415 . 1430) (nil fontified nil 1414 . 1415) (nil fontified nil 1409 . 1414) (nil fontified nil 1408 . 1409) (nil fontified nil 1407 . 1408) (nil fontified nil 1365 . 1407) (nil fontified nil 1361 . 1365) (nil fontified nil 1360 . 1361) (nil fontified nil 1353 . 1360) (nil fontified nil 1352 . 1353) (nil fontified nil 1340 . 1352) (nil fontified nil 1339 . 1340) (nil fontified nil 1331 . 1339) (nil fontified nil 1330 . 1331) (nil fontified nil 1327 . 1330) (nil fontified nil 1326 . 1327) (nil fontified nil 1325 . 1326) (nil fontified nil 1321 . 1325) (nil fontified nil 1320 . 1321) (nil fontified nil 1315 . 1320) (nil fontified nil 1314 . 1315) (nil fontified nil 1309 . 1314) (nil fontified nil 1304 . 1309) (nil fontified nil 1299 . 1304) (nil fontified nil 1298 . 1299) (nil fontified nil 1297 . 1298) (nil fontified nil 1279 . 1297) (nil fontified nil 1278 . 1279) (nil fontified nil 1273 . 1278) (nil fontified nil 1272 . 1273) (nil fontified nil 1268 . 1272) (nil fontified nil 1267 . 1268) (nil fontified nil 1266 . 1267) (nil fontified nil 1265 . 1266) (nil fontified nil 1257 . 1265) (nil fontified nil 1256 . 1257) (nil fontified nil 1249 . 1256) (nil fontified nil 1248 . 1249) (nil fontified nil 1204 . 1248) (nil fontified nil 1200 . 1204) (nil fontified nil 1199 . 1200) (nil fontified nil 1192 . 1199) (nil fontified nil 1191 . 1192) (nil fontified nil 1176 . 1191) (nil fontified nil 1175 . 1176) (nil fontified nil 1168 . 1175) (nil fontified nil 1167 . 1168) (nil fontified nil 1124 . 1167) (nil fontified nil 1123 . 1124) (nil fontified nil 1122 . 1123) (nil fontified nil 1120 . 1122) (nil fontified nil 1119 . 1120) (nil fontified nil 1114 . 1119) (nil fontified nil 1113 . 1114) (nil fontified nil 1108 . 1113) (nil fontified nil 1103 . 1108) (nil fontified nil 1098 . 1103) (nil fontified nil 1097 . 1098) (nil fontified nil 1096 . 1097) (nil fontified nil 1064 . 1096) (nil fontified nil 1063 . 1064) (nil fontified nil 1058 . 1063) (nil fontified nil 1057 . 1058) (nil fontified nil 1054 . 1057) (nil fontified nil 1053 . 1054) (nil fontified nil 1009 . 1053) (nil fontified nil 1005 . 1009) (nil fontified nil 1004 . 1005) (nil fontified nil 1002 . 1004) (nil fontified nil 966 . 1002) (nil fontified nil 963 . 966) (nil fontified nil 961 . 963) (nil fontified nil 960 . 961) (nil fontified nil 953 . 960) (nil fontified nil 951 . 953) (nil fontified nil 950 . 951) (nil fontified nil 949 . 950) (nil fontified nil 902 . 949) (nil fontified nil 901 . 902) (nil fontified nil 900 . 901) (nil fontified nil 895 . 900) (nil fontified nil 893 . 895) (nil fontified nil 892 . 893) (nil fontified nil 877 . 892) (nil fontified nil 876 . 877) (nil fontified nil 865 . 876) (nil fontified nil 864 . 865) (864 . 1586)) nil (25300 10673 433309 0) 0 nil])
([nil nil ((1586 . 1587)) nil (25300 10673 433292 0) 0 nil])
([nil nil ((863 . 864)) nil (25300 10673 433291 0) 0 nil])
([nil nil ((864 . 870)) nil (25300 10673 433291 0) 0 nil])
([nil nil ((870 . 874)) nil (25300 10673 433290 0) 0 nil])
([nil nil ((874 . 878)) nil (25300 10673 433289 0) 0 nil])
([nil nil ((878 . 882)) nil (25300 10673 433289 0) 0 nil])
([nil nil ((882 . 883)) nil (25300 10673 433288 0) 0 nil])
([nil nil ((883 . 886)) nil (25300 10673 433287 0) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face font-lock-comment-face)) . -883) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (#("a" 0 1 (fontified t face font-lock-comment-face)) . -884) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (#("b" 0 1 (fontified t face font-lock-comment-face)) . -885) (undo-tree-id9 . -1) (undo-tree-id10 . -1) 886) nil (25300 10673 433286 0) 0 nil])
([nil nil ((883 . 890)) nil (25300 10673 433281 0) 0 nil])
([nil nil ((#("z" 0 1 (fontified t face font-lock-comment-face)) . -886) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (#("i" 0 1 (fontified t face font-lock-comment-face)) . -887) (undo-tree-id2 . -1) (#("d" 0 1 (fontified t face font-lock-comment-face)) . -888) (undo-tree-id3 . -1) (#("o" 0 1 (fontified t face font-lock-comment-face)) . -889) (undo-tree-id4 . -1) 890) nil (25300 10996 655504 0) 0 nil])
([nil nil ((#("

" 0 1 (fontified t) 1 2 (fontified t)) . 862) (undo-tree-id72 . -2) (undo-tree-id73 . -2) (undo-tree-id74 . -1) (undo-tree-id75 . -2) 864 (#("tabnine::config" 0 9 (fontified t) 9 15 (fontified t)) . 864) (undo-tree-id76 . -15) (undo-tree-id77 . -15) 879 (879 . 880) (873 . 879) (#("c" 0 1 (fontified t)) . -873) (undo-tree-id78 . -1) (undo-tree-id79 . -1) 874 (871 . 874) (#("“" 0 1 (fontified t help-echo "Confusable character" face font-lock-warning-face)) . -871) (undo-tree-id80 . -1) (#("”" 0 1 (fontified t help-echo "Confusable character" face font-lock-warning-face)) . -872) (undo-tree-id81 . -1) 873 (#("”" 0 1 (fontified nil help-echo "Confusable character" face font-lock-warning-face)) . -872) (872 . 873) (871 . 873) (864 . 871) (#("tab" 0 3 (fontified t)) . -864) (undo-tree-id82 . -3) (undo-tree-id83 . -3) 867 (866 . 867) (#("v" 0 1 (fontified t)) . -866) (undo-tree-id84 . -1) (undo-tree-id85 . -1) 867 (864 . 867) (863 . 864) (886 . 890) (#("z" 0 1 (fontified t face font-lock-comment-face)) . -886) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (#("i" 0 1 (fontified t face font-lock-comment-face)) . -887) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (#("d" 0 1 (fontified t face font-lock-comment-face)) . -888) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (#("o" 0 1 (fontified t face font-lock-comment-face)) . -889) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (#("n" 0 1 (fontified t face font-lock-comment-face)) . -890) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (#("g" 0 1 (fontified t face font-lock-comment-face)) . -891) (undo-tree-id96 . -1) 892 (886 . 892)) nil (25300 11137 287863 0) 0 nil] [nil nil ((886 . 890)) ((#("自动补全" 0 4 (fontified t face font-lock-comment-face)) . 886) (t 25300 10673 438284 274000)) (25300 10673 433253 0) 0 nil])
([nil nil ((#("th" 0 2 (fontified nil)) . 857) (undo-tree-id68 . 2) (828 . 857) (#("company-tooltip-minimum-wid" 0 27 (fontified t)) . -828) (undo-tree-id69 . 1) (undo-tree-id70 . -27) (undo-tree-id71 . -27) 855) nil (25300 11137 287840 0) 0 nil])
nil
([nil nil ((nil rear-nonsticky nil 877 . 878) (nil fontified nil 872 . 878) (nil fontified nil 863 . 872) (863 . 878)) nil (25300 11137 287836 0) 0 nil])
([nil nil ((878 . 879)) nil (25300 11138 561301 0) 0 nil])
([nil nil ((#("tabnine::config" 0 9 (fontified t) 9 12 (fontified t) 12 13 (fontified t) 13 14 (fontified t) 14 15 (fontified t rear-nonsticky t)) . 863) (undo-tree-id395 . -15) (undo-tree-id396 . -12) (undo-tree-id397 . -15)) nil (25300 11604 217444 0) 0 nil] [nil nil ((#("f" 0 1 (fontified t)) . -875) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (#("i" 0 1 (fontified t)) . -876) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (#("g" 0 1 (fontified t rear-nonsticky t)) . -877) (undo-tree-id66 . -1) (undo-tree-id67 . -1) 878) ((875 . 878)) (25300 11138 269887 0) 0 nil])
([nil nil ((586 . 591) (585 . 587) (t 25300 11604 223605 202000)) nil (25300 11856 744241 0) 0 nil])
([nil nil ((875 . 876)) ((#("f" 0 1 (fontified t)) . 875) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1)) (25300 11137 861796 0) 0 nil])
([nil nil ((591 . 592)) nil (25300 11856 744240 0) 0 nil])
([nil nil ((872 . 878) (#("conf" 0 4 (fontified t)) . -872) (undo-tree-id59 . -4) (undo-tree-id60 . -4) (undo-tree-id61 . -3) 876) ((872 . 876) (#("config" 0 6 (fontified t)) . 872) (undo-tree-id99 . -6) (undo-tree-id100 . -6) (undo-tree-id101 . -6) (undo-tree-id102 . -6) (undo-tree-id103 . -6) (undo-tree-id104 . -6) (undo-tree-id105 . -6) (undo-tree-id106 . -6) (undo-tree-id107 . -6) (undo-tree-id108 . -6) (undo-tree-id109 . -6) (undo-tree-id110 . -6) (undo-tree-id111 . -6) (undo-tree-id112 . -6) (undo-tree-id113 . -6) (undo-tree-id114 . -6) (undo-tree-id115 . -6) (undo-tree-id116 . -6) (undo-tree-id117 . -6) (undo-tree-id118 . -6) (undo-tree-id119 . -6) (undo-tree-id120 . -6) (undo-tree-id121 . -6) (undo-tree-id122 . -6) (undo-tree-id123 . -6) (undo-tree-id124 . -6) (undo-tree-id125 . -6) (undo-tree-id126 . -6) (undo-tree-id127 . -6) (undo-tree-id128 . -6) (undo-tree-id129 . -6) (undo-tree-id130 . -6) (undo-tree-id131 . -6) (undo-tree-id132 . -6) (undo-tree-id133 . -6) (undo-tree-id134 . -6) (undo-tree-id135 . -6) (undo-tree-id136 . -6) (undo-tree-id137 . -6) (undo-tree-id138 . -6) (undo-tree-id139 . -6) (undo-tree-id140 . -6) (undo-tree-id141 . -6) (undo-tree-id142 . -6) (undo-tree-id143 . -6) (undo-tree-id144 . -6) (undo-tree-id145 . -6) (undo-tree-id146 . -6) (undo-tree-id147 . -6) (undo-tree-id148 . -6) (undo-tree-id149 . -6) (undo-tree-id150 . -6) (undo-tree-id151 . -6) (undo-tree-id152 . -6) (undo-tree-id153 . -6) (undo-tree-id154 . -6) (undo-tree-id155 . -6) (undo-tree-id156 . -6) (undo-tree-id157 . -6) (undo-tree-id158 . -6) (undo-tree-id159 . -6) (undo-tree-id160 . -6) (undo-tree-id161 . -6) (undo-tree-id162 . -6) (undo-tree-id163 . -6) (undo-tree-id164 . -6) (undo-tree-id165 . -6) (undo-tree-id166 . -6) (undo-tree-id167 . -6) (undo-tree-id168 . -6) (undo-tree-id169 . -6) (undo-tree-id170 . -6) (undo-tree-id171 . -6) (undo-tree-id172 . -6) (undo-tree-id173 . -6) (undo-tree-id174 . -6) (undo-tree-id175 . -6) (undo-tree-id176 . -6) (undo-tree-id177 . -6) (undo-tree-id178 . -6) (undo-tree-id179 . -6) (undo-tree-id180 . -6) (undo-tree-id181 . -6) (undo-tree-id182 . -6) (undo-tree-id183 . -6) (undo-tree-id184 . -6) (undo-tree-id185 . -6) (undo-tree-id186 . -6) (undo-tree-id187 . -6) (undo-tree-id188 . -6) (undo-tree-id189 . -6) (undo-tree-id190 . -6) (undo-tree-id191 . -6) (undo-tree-id192 . -6) (undo-tree-id193 . -6) (undo-tree-id194 . -6) (undo-tree-id195 . -6) (undo-tree-id196 . -6) (undo-tree-id197 . -6) (undo-tree-id198 . -6) (undo-tree-id199 . -6) (undo-tree-id200 . -6) (undo-tree-id201 . -6) (undo-tree-id202 . -6) (undo-tree-id203 . -6) (undo-tree-id204 . -6) (undo-tree-id205 . -6) (undo-tree-id206 . -6) (undo-tree-id207 . -6) (undo-tree-id208 . -6) (undo-tree-id209 . -6) (undo-tree-id210 . -6) (undo-tree-id211 . -6) (undo-tree-id212 . -6) (undo-tree-id213 . -6) (undo-tree-id214 . -6) (undo-tree-id215 . -6) (undo-tree-id216 . -6) (undo-tree-id217 . -6) (undo-tree-id218 . -6) (undo-tree-id219 . -6) (undo-tree-id220 . -6) (undo-tree-id221 . -6) (undo-tree-id222 . -6) (undo-tree-id223 . -6) (undo-tree-id224 . -6) (undo-tree-id225 . -6) (undo-tree-id226 . -6) (undo-tree-id227 . -6) (undo-tree-id228 . -6) (undo-tree-id229 . -6) (undo-tree-id230 . -6) (undo-tree-id231 . -6) (undo-tree-id232 . -6) (undo-tree-id233 . -6) (undo-tree-id234 . -6) (undo-tree-id235 . -6) (undo-tree-id236 . -6) (undo-tree-id237 . -6) (undo-tree-id238 . -6) (undo-tree-id239 . -6) (undo-tree-id240 . -6) (undo-tree-id241 . -6) (undo-tree-id242 . -6) (undo-tree-id243 . -6) (undo-tree-id244 . -6) (undo-tree-id245 . -6) (undo-tree-id246 . -6) (undo-tree-id247 . -6) (undo-tree-id248 . -6) (undo-tree-id249 . -6) (undo-tree-id250 . -6) (undo-tree-id251 . -6) (undo-tree-id252 . -6) (undo-tree-id253 . -6) (undo-tree-id254 . -6) (undo-tree-id255 . -6) (undo-tree-id256 . -6) (undo-tree-id257 . -6) (undo-tree-id258 . -6) (undo-tree-id259 . -6) (undo-tree-id260 . -6) (undo-tree-id261 . -6) (undo-tree-id262 . -6) (undo-tree-id263 . -6) (undo-tree-id264 . -6) (undo-tree-id265 . -6) (undo-tree-id266 . -6) (undo-tree-id267 . -6) (undo-tree-id268 . -6) (undo-tree-id269 . -6) (undo-tree-id270 . -6) (undo-tree-id271 . -6) (undo-tree-id272 . -6) (undo-tree-id273 . -6) (undo-tree-id274 . -6) (undo-tree-id275 . -6) (undo-tree-id276 . -6)) (25300 11137 287912 0) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -591) (undo-tree-id36 . -1) 592) nil (25300 11856 744240 0) 0 nil])
([nil nil ((878 . 949)) ((#("Started config server at http://127.0.0.1:5555/sec-ttkowymwsrcrtbwzpcsz" 0 71 (fontified t)) . 878) (undo-tree-id97 . -71) (undo-tree-id98 . -71)) (25300 11137 287813 0) 0 nil])
([nil nil ((591 . 594)) nil (25300 11856 744238 0) 0 nil])
nil
([nil nil ((#(" " 0 1 (fontified t)) . 593) (undo-tree-id35 . -1) 594) nil (25300 11856 744238 0) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -586) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (#("e" 0 1 (fontified t)) . -587) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (#("q" 0 1 (fontified t)) . -588) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (#("u" 0 1 (fontified t)) . -589) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (#("i" 0 1 (fontified t)) . -590) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (#("r" 0 1 (fontified t)) . -591) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (#("e" 0 1 (fontified t face font-lock-keyword-face)) . -592) (undo-tree-id33 . -1) (undo-tree-id34 . -1) 593) nil (25300 11856 744236 0) 0 nil])
([nil nil ((586 . 590)) nil (25300 11856 744228 0) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -589) (undo-tree-id20 . -1) 590) nil (25300 11856 744226 0) 0 nil])
([nil nil ((592 . 593) (589 . 593)) nil (25300 11856 744225 0) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -592) (undo-tree-id18 . -1) (undo-tree-id19 . -1) 593) nil (25300 11856 744224 0) 0 nil])
([nil nil ((#("[" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -591) (undo-tree-id11 . 1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (#("]" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . 592) (undo-tree-id16 . 1) (undo-tree-id17 . -1)) nil (25300 11856 744222 0) 0 nil])
([nil nil ((591 . 595)) nil (25300 11856 744218 0) 0 nil])
([nil nil ((586 . 597) (#("use-packa" 0 9 (fontified t)) . -586) (undo-tree-id9 . -9) (undo-tree-id10 . -9) 595) nil (25300 11856 744217 0) 0 nil])
([nil nil ((#("(use-package)" 0 1 (fontified t face (rainbow-delimiters-depth-1-face)) 1 12 (fontified t face font-lock-keyword-face) 12 13 (fontified t face (rainbow-delimiters-depth-1-face))) . 585) (undo-tree-id0 . -13) (undo-tree-id1 . 13) (undo-tree-id2 . -1) (undo-tree-id3 . 1) (undo-tree-id4 . -13) (undo-tree-id5 . -1) (undo-tree-id6 . -13) (undo-tree-id7 . -13) (undo-tree-id8 . -13)) nil (25300 11856 744213 0) 0 nil])
([nil nil ((586 . 589) (585 . 587) (t 25300 11856 748046 567000)) nil (25300 12256 336715 0) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -586) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (#("s" 0 1 (fontified t)) . -587) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (#("e" 0 1 (fontified t)) . -588) (undo-tree-id162 . -1) (undo-tree-id163 . -1) 589) nil (25300 12256 336714 0) 0 nil])
([nil nil ((#("（" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -585) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . 1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (#("）" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . 586) (undo-tree-id156 . 1) (undo-tree-id157 . -1)) nil (25300 12256 336710 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t face font-lock-comment-face)) . 584) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) 585) nil (25300 12256 336705 0) 0 nil])
([nil nil ((584 . 585)) nil (25300 12256 336698 0) 0 nil])
([nil nil ((585 . 587)) nil (25300 12256 336697 0) 0 nil])
([nil nil ((#("（" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -585) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . 1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (#("）" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . 586) (undo-tree-id141 . 1) (undo-tree-id142 . -1)) nil (25300 12256 336697 0) 0 nil])
([nil nil ((586 . 592) (585 . 587)) nil (25300 12256 336692 0) 0 nil])
([nil nil ((586 . 597) (#("use-pa" 0 6 (fontified t)) . -586) (undo-tree-id133 . -6) (undo-tree-id134 . -6) 592) nil (25300 12256 336691 0) 0 nil])
([nil nil ((597 . 603)) nil (25300 12256 336689 0) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face font-lock-constant-face)) . -602) (undo-tree-id131 . -1) (undo-tree-id132 . -1) 603) nil (25300 12256 336688 0) 0 nil])
([nil nil ((602 . 604)) nil (25300 12256 336686 0) 0 nil])
([nil nil ((#("c" 0 1 (fontified t face font-lock-constant-face)) . -598) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (#("o" 0 1 (fontified t face font-lock-constant-face)) . -599) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (#("m" 0 1 (fontified t face font-lock-constant-face)) . -600) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (#("p" 0 1 (fontified t face font-lock-constant-face)) . -601) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (#("a" 0 1 (fontified t face font-lock-constant-face)) . -602) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (#("n" 0 1 (fontified t face font-lock-constant-face)) . -603) (undo-tree-id129 . -1) (undo-tree-id130 . -1) 604) nil (25300 12256 336685 0) 0 nil])
([nil nil ((598 . 604)) nil (25300 12256 336678 0) 0 nil])
([nil nil ((#("m" 0 1 (fontified t face font-lock-constant-face)) . -603) (undo-tree-id118 . -1) 604) nil (25300 12256 336677 0) 0 nil])
([nil nil ((603 . 605)) nil (25300 12256 336676 0) 0 nil])
([nil nil ((605 . 609)) nil (25300 12256 336675 0) 0 nil])
([nil nil ((#("m" 0 1 (fontified t face font-lock-constant-face)) . -608) (undo-tree-id116 . -1) (undo-tree-id117 . -1) 609) nil (25300 12256 336675 0) 0 nil])
([nil nil ((608 . 609)) nil (25300 12256 336673 0) 0 nil])
([nil nil ((#("c" 0 1 (fontified t face font-lock-constant-face)) . -606) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (#("o" 0 1 (fontified t face font-lock-constant-face)) . -607) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (#("n" 0 1 (fontified t face font-lock-constant-face)) . -608) (undo-tree-id114 . -1) (undo-tree-id115 . -1) 609) nil (25300 12256 336672 0) 0 nil])
([nil nil ((606 . 609)) nil (25300 12256 336668 0) 0 nil])
([nil nil ((609 . 613)) nil (25300 12256 336667 0) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face font-lock-constant-face)) . -612) (undo-tree-id108 . -1) (undo-tree-id109 . -1) 613) nil (25300 12256 336666 0) 0 nil])
([nil nil ((612 . 613)) nil (25300 12256 336665 0) 0 nil])
([nil nil ((598 . 614) (#("company-tabnine" 0 15 (fontified t face font-lock-constant-face)) . -598) (undo-tree-id106 . -15) (undo-tree-id107 . -15) 613) nil (25300 12256 336664 0) 0 nil])
([nil nil ((#("-" 0 1 (fontified t face font-lock-constant-face)) . -613) (undo-tree-id104 . -1) (undo-tree-id105 . -1) 614) nil (25300 12256 336662 0) 0 nil])
([nil nil ((598 . 614) (#("company-tabnine" 0 15 (fontified t face font-lock-constant-face)) . -598) (undo-tree-id102 . -15) (undo-tree-id103 . -15) 613) nil (25300 12256 336660 0) 0 nil])
([nil nil ((#("-" 0 1 (fontified t face font-lock-constant-face)) . -613) (undo-tree-id100 . -1) (undo-tree-id101 . -1) 614) nil (25300 12256 336658 0) 0 nil])
([nil nil ((613 . 614)) nil (25300 12256 336656 0) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face font-lock-constant-face)) . -606) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (#("a" 0 1 (fontified t face font-lock-constant-face)) . -607) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (#("b" 0 1 (fontified t face font-lock-constant-face)) . -608) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (#("n" 0 1 (fontified t face font-lock-constant-face)) . -609) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (#("i" 0 1 (fontified t face font-lock-constant-face)) . -610) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (#("n" 0 1 (fontified t face font-lock-constant-face)) . -611) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (#("e" 0 1 (fontified t face font-lock-constant-face)) . -612) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (#("-" 0 1 (fontified t face font-lock-constant-face)) . -613) (undo-tree-id98 . -1) (undo-tree-id99 . -1) 614) nil (25300 12256 336654 0) 0 nil])
([nil nil ((#("c" 0 1 (fontified t face font-lock-constant-face)) . -598) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (#("o" 0 1 (fontified t face font-lock-constant-face)) . -599) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (#("m" 0 1 (fontified t face font-lock-constant-face)) . -600) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (#("p" 0 1 (fontified t face font-lock-constant-face)) . -601) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (#("a" 0 1 (fontified t face font-lock-constant-face)) . -602) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (#("n" 0 1 (fontified t face font-lock-constant-face)) . -603) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (#("y" 0 1 (fontified t face font-lock-constant-face)) . -604) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (#("-" 0 1 (fontified t face font-lock-constant-face)) . -605) (undo-tree-id82 . -1) (undo-tree-id83 . -1) 606) nil (25300 12256 336641 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 597) (undo-tree-id66 . -1) (undo-tree-id67 . -1) 598) nil (25300 12256 336631 0) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -586) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (#("s" 0 1 (fontified t)) . -587) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (#("e" 0 1 (fontified t)) . -588) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (#("-" 0 1 (fontified t)) . -589) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (#("p" 0 1 (fontified t)) . -590) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (#("a" 0 1 (fontified t)) . -591) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (#("c" 0 1 (fontified t)) . -592) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (#("k" 0 1 (fontified t)) . -593) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (#("a" 0 1 (fontified t)) . -594) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (#("g" 0 1 (fontified t)) . -595) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (#("e" 0 1 (fontified t face font-lock-keyword-face)) . -596) (undo-tree-id64 . -1) (undo-tree-id65 . -1) 597) nil (25300 12256 336627 0) 0 nil])
([nil nil ((#("(" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -585) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . 1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . 586) (undo-tree-id42 . 1) (undo-tree-id43 . -1)) nil (25300 12256 336610 0) 0 nil])
([nil nil ((586 . 589) (585 . 587) (t 25300 12256 342278 905000)) nil (25300 12442 713022 0) 0 nil])
([nil nil ((#("w" 0 1 (fontified t)) . -588) (undo-tree-id80 . -1) (undo-tree-id81 . -1) 589) nil (25300 12442 713021 0) 0 nil])
([nil nil ((588 . 593)) nil (25300 12442 713019 0) 0 nil])
([nil nil ((593 . 600)) nil (25300 12442 713018 0) 0 nil])
([nil nil ((#("-" 0 1 (face font-lock-constant-face fontified t)) . -599) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) 600) nil (25300 12442 713017 0) 0 nil])
([nil nil ((599 . 600)) nil (25300 12442 713014 0) 0 nil])
([nil nil ((#("t" 0 1 (face font-lock-constant-face fontified t)) . -598) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (#("-" 0 1 (face font-lock-constant-face fontified t)) . -599) (undo-tree-id74 . -1) (undo-tree-id75 . -1) 600) nil (25300 12442 713012 0) 0 nil])
([nil nil ((598 . 599)) nil (25300 12442 713007 0) 0 nil])
([nil nil ((#("p" 0 1 (face font-lock-constant-face fontified t)) . -598) (undo-tree-id68 . -1) (undo-tree-id69 . -1) 599) nil (25300 12442 713006 0) 0 nil])
([nil nil ((598 . 600)) nil (25300 12442 713004 0) 0 nil])
([nil nil ((#("p" 0 1 (face font-lock-constant-face fontified t)) . -599) (undo-tree-id66 . -1) (undo-tree-id67 . -1) 600) nil (25300 12442 713003 0) 0 nil])
([nil nil ((599 . 600)) nil (25300 12442 713001 0) 0 nil])
([nil nil ((#("'" 0 1 (fontified t)) . -594) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (#("i" 0 1 (face font-lock-constant-face fontified t)) . -595) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (#("n" 0 1 (face font-lock-constant-face fontified t)) . -596) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (#("i" 0 1 (face font-lock-constant-face fontified t)) . -597) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (#("t" 0 1 (face font-lock-constant-face fontified t)) . -598) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (#("-" 0 1 (face font-lock-constant-face fontified t)) . -599) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -600) (undo-tree-id63 . -1) (undo-tree-id64 . 1) (undo-tree-id65 . -1) 601) nil (25300 12442 712999 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 593) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) 594) nil (25300 12442 712980 0) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -585) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . 1) (undo-tree-id10 . -1) (#("r" 0 1 (fontified t)) . -586) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (#("e" 0 1 (fontified t)) . -587) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (#("q" 0 1 (fontified t)) . -588) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (#("u" 0 1 (fontified t)) . -589) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (#("i" 0 1 (fontified t)) . -590) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (#("r" 0 1 (fontified t)) . -591) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (#("e" 0 1 (face font-lock-keyword-face fontified t)) . -592) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) 593) nil (25300 12442 712975 0) 0 nil])
([nil nil ((#("
" 0 1 (face font-lock-comment-face fontified t)) . 584) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) 585) nil (25300 12442 712950 0) 0 nil])
([nil nil ((584 . 585)) nil (25300 12442 712922 0) 0 nil])
([nil nil ((#(";; company-tabnine AI 自动补全
(use-package company-tabnine
  :init (add-to-list 'company-backends #'company-tabnine)
  :config
  ;; workaround for company-transformers
  (setq company-tabnine--disable-next-transform nil)
  (defun my-company--transform-candidates (func &rest args)
    (if (not company-tabnine--disable-next-transform)
      (apply func args)
      (setq company-tabnine--disable-next-transform nil)
      (car args)))

  (defun my-company-tabnine (func &rest args)
    (when (eq (car args) 'candidates)
      (setq company-tabnine--disable-next-transform t))
    (apply func args))

  (advice-add #'company--transform-candidates :around #'my-company--transform-candidates)
  (advice-add #'company-tabnine :around #'my-company-tabnine))" 0 3 (face font-lock-comment-delimiter-face fontified t) 3 27 (face font-lock-comment-face fontified t) 27 28 (face (rainbow-delimiters-depth-1-face) fontified t) 28 39 (face font-lock-keyword-face fontified t) 39 40 (fontified t) 40 55 (face font-lock-constant-face fontified t) 55 58 (fontified t) 58 63 (face font-lock-builtin-face fontified t) 63 64 (fontified t) 64 65 (face (rainbow-delimiters-depth-2-face) fontified t) 65 112 (fontified t) 112 113 (face (rainbow-delimiters-depth-2-face) fontified t) 113 116 (fontified t) 116 123 (face font-lock-builtin-face fontified t) 123 126 (fontified t) 126 129 (face font-lock-comment-delimiter-face fontified t) 129 165 (face font-lock-comment-face fontified t) 165 167 (fontified t) 167 168 (face (rainbow-delimiters-depth-2-face) fontified t) 168 172 (face font-lock-keyword-face fontified t) 172 216 (fontified t) 216 217 (face (rainbow-delimiters-depth-2-face) fontified t) 217 220 (fontified t) 220 221 (face (rainbow-delimiters-depth-2-face) fontified t) 221 226 (face font-lock-keyword-face fontified t) 226 227 (fontified t) 227 259 (face font-lock-function-name-face fontified t) 259 260 (fontified t) 260 261 (face (rainbow-delimiters-depth-3-face) fontified t) 261 266 (fontified t) 266 271 (face font-lock-type-face fontified t) 271 276 (fontified t) 276 277 (face (rainbow-delimiters-depth-3-face) fontified t) 277 282 (fontified t) 282 283 (face (rainbow-delimiters-depth-3-face) fontified t) 283 285 (face font-lock-keyword-face fontified t) 285 286 (fontified t) 286 287 (face (rainbow-delimiters-depth-4-face) fontified t) 287 330 (fontified t) 330 331 (face (rainbow-delimiters-depth-4-face) fontified t) 331 338 (fontified t) 338 339 (face (rainbow-delimiters-depth-4-face) fontified t) 339 354 (fontified t) 354 355 (face (rainbow-delimiters-depth-4-face) fontified t) 355 362 (fontified t) 362 363 (face (rainbow-delimiters-depth-4-face) fontified t) 363 367 (face font-lock-keyword-face fontified t) 367 411 (fontified t) 411 412 (face (rainbow-delimiters-depth-4-face) fontified t) 412 419 (fontified t) 419 420 (face (rainbow-delimiters-depth-4-face) fontified t) 420 428 (fontified t) 428 429 (face (rainbow-delimiters-depth-4-face) fontified t) 429 430 (face (rainbow-delimiters-depth-3-face) fontified t) 430 431 (face (rainbow-delimiters-depth-2-face) fontified t) 431 435 (fontified t) 435 436 (face (rainbow-delimiters-depth-2-face) fontified t) 436 441 (face font-lock-keyword-face fontified t) 441 442 (fontified t) 442 460 (face font-lock-function-name-face fontified t) 460 461 (fontified t) 461 462 (face (rainbow-delimiters-depth-3-face) fontified t) 462 467 (fontified t) 467 472 (face font-lock-type-face fontified t) 472 477 (fontified t) 477 478 (face (rainbow-delimiters-depth-3-face) fontified t) 478 483 (fontified t) 483 484 (face (rainbow-delimiters-depth-3-face) fontified t) 484 488 (face font-lock-keyword-face fontified t) 488 489 (fontified t) 489 490 (face (rainbow-delimiters-depth-4-face) fontified t) 490 493 (fontified t) 493 494 (face (rainbow-delimiters-depth-5-face) fontified t) 494 502 (fontified t) 502 503 (face (rainbow-delimiters-depth-5-face) fontified t) 503 515 (fontified t) 515 516 (face (rainbow-delimiters-depth-4-face) fontified t) 516 523 (fontified t) 523 524 (face (rainbow-delimiters-depth-4-face) fontified t) 524 528 (face font-lock-keyword-face fontified t) 528 570 (fontified t) 570 571 (face (rainbow-delimiters-depth-4-face) fontified t) 571 572 (face (rainbow-delimiters-depth-3-face) fontified t) 572 577 (fontified t) 577 578 (face (rainbow-delimiters-depth-3-face) fontified t) 578 593 (fontified t) 593 594 (face (rainbow-delimiters-depth-3-face) fontified t) 594 595 (face (rainbow-delimiters-depth-2-face) fontified t) 595 599 (fontified t) 599 600 (face (rainbow-delimiters-depth-2-face) fontified t) 600 636 (fontified t) 636 643 (fontified t) 643 650 (face font-lock-builtin-face fontified t) 650 685 (fontified t) 685 686 (face (rainbow-delimiters-depth-2-face) fontified t) 686 687 (fontified t) 687 689 (fontified t) 689 690 (face (rainbow-delimiters-depth-2-face) fontified t) 690 719 (fontified t) 719 726 (face font-lock-builtin-face fontified t) 726 747 (fontified t) 747 748 (face (rainbow-delimiters-depth-2-face) fontified t) 748 749 (face (rainbow-delimiters-depth-1-face) fontified t)) . 865) (undo-tree-id9 . -27) (undo-tree-id10 . -749) (undo-tree-id11 . -65) (undo-tree-id12 . 683) (undo-tree-id13 . -65) (undo-tree-id14 . -65) (undo-tree-id15 . -749) (undo-tree-id16 . -749) (undo-tree-id17 . -749) (undo-tree-id18 . -749) (t 25300 12442 718143 337000)) nil (25300 12643 620673 0) 0 nil])
([nil nil ((#("


" 0 3 (fontified t)) . 862) (undo-tree-id0 . -3) (undo-tree-id1 . -3) (undo-tree-id2 . -3) (undo-tree-id3 . -3) (undo-tree-id4 . -3) (undo-tree-id5 . -3) (undo-tree-id6 . -3) (undo-tree-id7 . -3) (undo-tree-id8 . -3) 865) nil (25300 12644 472443 0) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -557) (undo-tree-id261 . -1) (undo-tree-id262 . 1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) 558) nil (25300 12654 775865 0) 0 nil] [nil nil ((557 . 560)) ((#("
  " 0 1 (fontified t) 1 3 (fontified t)) . 557) (undo-tree-id24 . -3) (undo-tree-id25 . -1) (undo-tree-id26 . -3) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -3) (undo-tree-id30 . -3) (undo-tree-id31 . -3) (undo-tree-id32 . -3) (undo-tree-id33 . -3) (undo-tree-id34 . -3) (undo-tree-id35 . -3) (undo-tree-id36 . -3) (undo-tree-id37 . -3) (undo-tree-id38 . -3) (undo-tree-id39 . -3) (undo-tree-id40 . -3) (undo-tree-id41 . -3) (undo-tree-id42 . -3) (undo-tree-id43 . -3) (undo-tree-id44 . -3) (undo-tree-id45 . -3) (undo-tree-id46 . -3) (undo-tree-id47 . -3) (undo-tree-id48 . -3) (undo-tree-id49 . -3) (undo-tree-id50 . -3) (undo-tree-id51 . -3) (undo-tree-id52 . -3) (undo-tree-id53 . -3) (undo-tree-id54 . -3) (undo-tree-id55 . -3) (undo-tree-id56 . -3) (undo-tree-id57 . -3) (undo-tree-id58 . -3) (undo-tree-id59 . -3) (undo-tree-id60 . -3) (undo-tree-id61 . -3) (undo-tree-id62 . -3) (undo-tree-id63 . -3) (undo-tree-id64 . -3) (undo-tree-id65 . -3) (undo-tree-id66 . -3) (undo-tree-id67 . -3) (undo-tree-id68 . -3) (undo-tree-id69 . -3) (undo-tree-id70 . -3) (undo-tree-id71 . -3) (undo-tree-id72 . -3) (undo-tree-id73 . -3) (undo-tree-id74 . -3) (undo-tree-id75 . -3) (undo-tree-id76 . -3) (undo-tree-id77 . -3) (undo-tree-id78 . -3) (undo-tree-id79 . -3) (undo-tree-id80 . -3) (undo-tree-id81 . -3) (undo-tree-id82 . -3) (undo-tree-id83 . -3) (undo-tree-id84 . -3) (undo-tree-id85 . -3) (undo-tree-id86 . -3) (undo-tree-id87 . -3) (undo-tree-id88 . -3) (undo-tree-id89 . -3) (undo-tree-id90 . -3) (undo-tree-id91 . -3) (undo-tree-id92 . -3) (undo-tree-id93 . -3) (undo-tree-id94 . -3) (undo-tree-id95 . -3) (undo-tree-id96 . -3) (undo-tree-id97 . -3) (undo-tree-id98 . -3) (undo-tree-id99 . -3) (undo-tree-id100 . -3) (undo-tree-id101 . -3) (undo-tree-id102 . -3) (undo-tree-id103 . -3) (undo-tree-id104 . -3) (undo-tree-id105 . -3) (undo-tree-id106 . -3) (undo-tree-id107 . -3) (undo-tree-id108 . -3) (undo-tree-id109 . -3) (undo-tree-id110 . -3) (undo-tree-id111 . -3) (undo-tree-id112 . -3) (undo-tree-id113 . -3) (undo-tree-id114 . -3) (undo-tree-id115 . -3) (undo-tree-id116 . -3) (undo-tree-id117 . -3) (undo-tree-id118 . -3) (undo-tree-id119 . -3) (undo-tree-id120 . -3) (undo-tree-id121 . -3) (undo-tree-id122 . -3) (undo-tree-id123 . -3) (undo-tree-id124 . -3) (undo-tree-id125 . -3) (undo-tree-id126 . -3) (undo-tree-id127 . -3) (undo-tree-id128 . -3) (undo-tree-id129 . -3) (undo-tree-id130 . -3) (undo-tree-id131 . -3) (undo-tree-id132 . -3) (undo-tree-id133 . -3) (undo-tree-id134 . -3) (undo-tree-id135 . -3) (undo-tree-id136 . -3) (undo-tree-id137 . -3) (undo-tree-id138 . -3) (undo-tree-id139 . -3) (undo-tree-id140 . -3) (undo-tree-id141 . -3) (undo-tree-id142 . -3) (undo-tree-id143 . -3) (undo-tree-id144 . -3) (undo-tree-id145 . -3) (undo-tree-id146 . -3) (undo-tree-id147 . -3) (undo-tree-id148 . -3) (undo-tree-id149 . -3) (undo-tree-id150 . -3) (undo-tree-id151 . -3) (undo-tree-id152 . -3) (undo-tree-id153 . -3) (undo-tree-id154 . -3) (undo-tree-id155 . -3) (undo-tree-id156 . -3) (undo-tree-id157 . -3) (undo-tree-id158 . -3) (undo-tree-id159 . -3) (undo-tree-id160 . -3) (undo-tree-id161 . -3) (undo-tree-id162 . -3) (undo-tree-id163 . -3) (undo-tree-id164 . -3) (undo-tree-id165 . -3) (undo-tree-id166 . -3) (undo-tree-id167 . -3) (undo-tree-id168 . -3) (undo-tree-id169 . -3) (undo-tree-id170 . -3) (undo-tree-id171 . -3) (undo-tree-id172 . -3) (undo-tree-id173 . -3) (undo-tree-id174 . -3) (undo-tree-id175 . -3) (undo-tree-id176 . -3) (undo-tree-id177 . -3) (undo-tree-id178 . -3) (undo-tree-id179 . -3) (undo-tree-id180 . -3) (undo-tree-id181 . -3) (undo-tree-id182 . -3) (undo-tree-id183 . -3) (undo-tree-id184 . -3) (undo-tree-id185 . -3) (undo-tree-id186 . -3) (undo-tree-id187 . -3) (undo-tree-id188 . -3) (undo-tree-id189 . -3) (undo-tree-id190 . -3) (undo-tree-id191 . -3) (undo-tree-id192 . -3) (undo-tree-id193 . -3) (undo-tree-id194 . -3) (undo-tree-id195 . -3) (undo-tree-id196 . -3) (undo-tree-id197 . -3) (undo-tree-id198 . -3) (undo-tree-id199 . -3) (undo-tree-id200 . -3) (undo-tree-id201 . -3) (undo-tree-id202 . -3) (undo-tree-id203 . -3) (undo-tree-id204 . -3) (undo-tree-id205 . -3) (undo-tree-id206 . -3) (undo-tree-id207 . -3) (undo-tree-id208 . -3) (undo-tree-id209 . -3) (undo-tree-id210 . -3) (undo-tree-id211 . -3) (undo-tree-id212 . -3) (undo-tree-id213 . -3) (undo-tree-id214 . -3) (undo-tree-id215 . -3) (undo-tree-id216 . -3) (undo-tree-id217 . -3) (undo-tree-id218 . -3) (undo-tree-id219 . -3) (undo-tree-id220 . -3) (undo-tree-id221 . -3) (undo-tree-id222 . -3) (undo-tree-id223 . -3) (undo-tree-id224 . -3) (undo-tree-id225 . -3) (undo-tree-id226 . -3) (undo-tree-id227 . -3) (undo-tree-id228 . -3) (undo-tree-id229 . -3) (undo-tree-id230 . -3) (undo-tree-id231 . -3) (undo-tree-id232 . -3) (undo-tree-id233 . -3) (undo-tree-id234 . -3) (undo-tree-id235 . -3) (undo-tree-id236 . -3) (undo-tree-id237 . -3) (undo-tree-id238 . -3) (undo-tree-id239 . -3) (undo-tree-id240 . -3) (undo-tree-id241 . -3) (undo-tree-id242 . -3) (undo-tree-id243 . -3) (undo-tree-id244 . -3) (undo-tree-id245 . -3) (undo-tree-id246 . -3) (undo-tree-id247 . -3) (undo-tree-id248 . -3) (undo-tree-id249 . -3) (undo-tree-id250 . -3) (undo-tree-id251 . -3) (undo-tree-id252 . -3) (undo-tree-id253 . -3) (undo-tree-id254 . -3) (undo-tree-id255 . -3) (undo-tree-id256 . -3) (undo-tree-id257 . -3) (undo-tree-id258 . -3) (undo-tree-id259 . -3) (undo-tree-id260 . -3)) (25300 12643 620934 0) 0 nil])
([nil nil ((583 . 586)) nil (25300 12654 775856 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 1308 . 1309) (nil fontified nil 1308 . 1309) (nil fontified nil 1307 . 1308) (nil fontified nil 1286 . 1307) (nil fontified nil 1279 . 1286) (nil fontified nil 1250 . 1279) (nil fontified nil 1249 . 1250) (nil fontified nil 1247 . 1249) (nil fontified nil 1246 . 1247) (nil fontified nil 1245 . 1246) (nil fontified nil 1210 . 1245) (nil fontified nil 1203 . 1210) (nil fontified nil 1196 . 1203) (nil fontified nil 1160 . 1196) (nil fontified nil 1159 . 1160) (nil fontified nil 1155 . 1159) (nil fontified nil 1154 . 1155) (nil fontified nil 1153 . 1154) (nil fontified nil 1138 . 1153) (nil fontified nil 1137 . 1138) (nil fontified nil 1132 . 1137) (nil fontified nil 1131 . 1132) (nil fontified nil 1130 . 1131) (nil fontified nil 1088 . 1130) (nil fontified nil 1084 . 1088) (nil fontified nil 1083 . 1084) (nil fontified nil 1076 . 1083) (nil fontified nil 1075 . 1076) (nil fontified nil 1063 . 1075) (nil fontified nil 1062 . 1063) (nil fontified nil 1054 . 1062) (nil fontified nil 1053 . 1054) (nil fontified nil 1050 . 1053) (nil fontified nil 1049 . 1050) (nil fontified nil 1048 . 1049) (nil fontified nil 1044 . 1048) (nil fontified nil 1043 . 1044) (nil fontified nil 1038 . 1043) (nil fontified nil 1037 . 1038) (nil fontified nil 1032 . 1037) (nil fontified nil 1027 . 1032) (nil fontified nil 1022 . 1027) (nil fontified nil 1021 . 1022) (nil fontified nil 1020 . 1021) (nil fontified nil 1002 . 1020) (nil fontified nil 1001 . 1002) (nil fontified nil 996 . 1001) (nil fontified nil 995 . 996) (nil fontified nil 991 . 995) (nil fontified nil 990 . 991) (nil fontified nil 989 . 990) (nil fontified nil 988 . 989) (nil fontified nil 980 . 988) (nil fontified nil 979 . 980) (nil fontified nil 972 . 979) (nil fontified nil 971 . 972) (nil fontified nil 927 . 971) (nil fontified nil 923 . 927) (nil fontified nil 922 . 923) (nil fontified nil 915 . 922) (nil fontified nil 914 . 915) (nil fontified nil 899 . 914) (nil fontified nil 898 . 899) (nil fontified nil 891 . 898) (nil fontified nil 890 . 891) (nil fontified nil 847 . 890) (nil fontified nil 846 . 847) (nil fontified nil 845 . 846) (nil fontified nil 843 . 845) (nil fontified nil 842 . 843) (nil fontified nil 837 . 842) (nil fontified nil 836 . 837) (nil fontified nil 831 . 836) (nil fontified nil 826 . 831) (nil fontified nil 821 . 826) (nil fontified nil 820 . 821) (nil fontified nil 819 . 820) (nil fontified nil 787 . 819) (nil fontified nil 786 . 787) (nil fontified nil 781 . 786) (nil fontified nil 780 . 781) (nil fontified nil 777 . 780) (nil fontified nil 776 . 777) (nil fontified nil 732 . 776) (nil fontified nil 728 . 732) (nil fontified nil 727 . 728) (nil fontified nil 725 . 727) (nil fontified nil 689 . 725) (nil fontified nil 686 . 689) (nil fontified nil 683 . 686) (nil fontified nil 676 . 683) (nil fontified nil 673 . 676) (nil fontified nil 672 . 673) (nil fontified nil 625 . 672) (nil fontified nil 624 . 625) (nil fontified nil 623 . 624) (nil fontified nil 618 . 623) (nil fontified nil 615 . 618) (nil fontified nil 600 . 615) (nil fontified nil 599 . 600) (nil fontified nil 588 . 599) (nil fontified nil 587 . 588) (nil fontified nil 563 . 587) (nil fontified nil 560 . 563) (560 . 1309)) ((#(";; company-tabnine AI 自动补全
(use-package company-tabnine
  :init (add-to-list 'company-backends #'company-tabnine)
  :config
  ;; workaround for company-transformers
  (setq company-tabnine--disable-next-transform nil)
  (defun my-company--transform-candidates (func &rest args)
    (if (not company-tabnine--disable-next-transform)
      (apply func args)
      (setq company-tabnine--disable-next-transform nil)
      (car args)))

  (defun my-company-tabnine (func &rest args)
    (when (eq (car args) 'candidates)
      (setq company-tabnine--disable-next-transform t))
    (apply func args))

  (advice-add #'company--transform-candidates :around #'my-company--transform-candidates)
  (advice-add #'company-tabnine :around #'my-company-tabnine))" 0 3 (face font-lock-comment-delimiter-face fontified nil) 3 27 (face font-lock-comment-face fontified nil) 27 28 (face (rainbow-delimiters-depth-2-face) fontified nil) 28 39 (face font-lock-keyword-face fontified nil) 39 40 (fontified nil) 40 55 (face font-lock-constant-face fontified nil) 55 56 (fontified nil) 56 58 (fontified nil) 58 63 (face font-lock-builtin-face fontified nil) 63 64 (fontified nil) 64 65 (face (rainbow-delimiters-depth-3-face) fontified nil) 65 112 (fontified nil) 112 113 (face (rainbow-delimiters-depth-3-face) fontified nil) 113 114 (fontified nil) 114 116 (fontified nil) 116 123 (face font-lock-builtin-face fontified nil) 123 124 (fontified nil) 124 126 (fontified nil) 126 129 (face font-lock-comment-delimiter-face fontified nil) 129 165 (face font-lock-comment-face fontified nil) 165 167 (fontified nil) 167 168 (face (rainbow-delimiters-depth-3-face) fontified nil) 168 172 (face font-lock-keyword-face fontified nil) 172 216 (fontified nil) 216 217 (face (rainbow-delimiters-depth-3-face) fontified nil) 217 218 (fontified nil) 218 220 (fontified nil) 220 221 (face (rainbow-delimiters-depth-3-face) fontified nil) 221 226 (face font-lock-keyword-face fontified nil) 226 227 (fontified nil) 227 259 (face font-lock-function-name-face fontified nil) 259 260 (fontified nil) 260 261 (face (rainbow-delimiters-depth-4-face) fontified nil) 261 266 (fontified nil) 266 271 (face font-lock-type-face fontified nil) 271 276 (fontified nil) 276 277 (face (rainbow-delimiters-depth-4-face) fontified nil) 277 278 (fontified nil) 278 282 (fontified nil) 282 283 (face (rainbow-delimiters-depth-4-face) fontified nil) 283 285 (face font-lock-keyword-face fontified nil) 285 286 (fontified nil) 286 287 (face (rainbow-delimiters-depth-5-face) fontified nil) 287 330 (fontified nil) 330 331 (face (rainbow-delimiters-depth-5-face) fontified nil) 331 332 (fontified nil) 332 338 (fontified nil) 338 339 (face (rainbow-delimiters-depth-5-face) fontified nil) 339 354 (fontified nil) 354 355 (face (rainbow-delimiters-depth-5-face) fontified nil) 355 356 (fontified nil) 356 362 (fontified nil) 362 363 (face (rainbow-delimiters-depth-5-face) fontified nil) 363 367 (face font-lock-keyword-face fontified nil) 367 411 (fontified nil) 411 412 (face (rainbow-delimiters-depth-5-face) fontified nil) 412 413 (fontified nil) 413 419 (fontified nil) 419 420 (face (rainbow-delimiters-depth-5-face) fontified nil) 420 428 (fontified nil) 428 429 (face (rainbow-delimiters-depth-5-face) fontified nil) 429 430 (face (rainbow-delimiters-depth-4-face) fontified nil) 430 431 (face (rainbow-delimiters-depth-3-face) fontified nil) 431 433 (fontified nil) 433 435 (fontified nil) 435 436 (face (rainbow-delimiters-depth-3-face) fontified nil) 436 441 (face font-lock-keyword-face fontified nil) 441 442 (fontified nil) 442 460 (face font-lock-function-name-face fontified nil) 460 461 (fontified nil) 461 462 (face (rainbow-delimiters-depth-4-face) fontified nil) 462 467 (fontified nil) 467 472 (face font-lock-type-face fontified nil) 472 477 (fontified nil) 477 478 (face (rainbow-delimiters-depth-4-face) fontified nil) 478 479 (fontified nil) 479 483 (fontified nil) 483 484 (face (rainbow-delimiters-depth-4-face) fontified nil) 484 488 (face font-lock-keyword-face fontified nil) 488 489 (fontified nil) 489 490 (face (rainbow-delimiters-depth-5-face) fontified nil) 490 493 (fontified nil) 493 494 (face (rainbow-delimiters-depth-6-face) fontified nil) 494 502 (fontified nil) 502 503 (face (rainbow-delimiters-depth-6-face) fontified nil) 503 515 (fontified nil) 515 516 (face (rainbow-delimiters-depth-5-face) fontified nil) 516 517 (fontified nil) 517 523 (fontified nil) 523 524 (face (rainbow-delimiters-depth-5-face) fontified nil) 524 528 (face font-lock-keyword-face fontified nil) 528 570 (fontified nil) 570 571 (face (rainbow-delimiters-depth-5-face) fontified nil) 571 572 (face (rainbow-delimiters-depth-4-face) fontified nil) 572 573 (fontified nil) 573 577 (fontified nil) 577 578 (face (rainbow-delimiters-depth-4-face) fontified nil) 578 593 (fontified nil) 593 594 (face (rainbow-delimiters-depth-4-face) fontified nil) 594 595 (face (rainbow-delimiters-depth-3-face) fontified nil) 595 597 (fontified nil) 597 599 (fontified nil) 599 600 (face (rainbow-delimiters-depth-3-face) fontified nil) 600 636 (fontified nil) 636 643 (fontified nil) 643 650 (face font-lock-builtin-face fontified nil) 650 685 (fontified nil) 685 686 (face (rainbow-delimiters-depth-3-face) fontified nil) 686 687 (fontified nil) 687 689 (fontified nil) 689 690 (face (rainbow-delimiters-depth-3-face) fontified nil) 690 719 (fontified nil) 719 726 (face font-lock-builtin-face fontified nil) 726 747 (fontified nil) 747 748 (face (rainbow-delimiters-depth-3-face) fontified nil) 748 749 (face (rainbow-delimiters-depth-2-face) rear-nonsticky nil fontified nil)) . 560) (undo-tree-id19 . -749) (undo-tree-id20 . -278) (undo-tree-id21 . -687) (undo-tree-id22 . -687) (undo-tree-id23 . -749) (nil fontified t 563 . 587) (nil fontified t 615 . 616) (nil fontified t 673 . 674) (nil fontified t 683 . 684) (nil fontified t 689 . 725) (nil fontified t 777 . 778) (nil fontified t 837 . 838) (nil fontified t 891 . 892) (nil fontified t 915 . 916) (nil fontified t 972 . 973) (nil fontified t 991 . 993) (nil fontified t 1038 . 1039) (nil fontified t 1076 . 1077) (nil fontified t 1132 . 1133) (nil fontified t 1155 . 1157) (nil fontified t 1246 . 1247) (nil rear-nonsticky t 1308 . 1309)) (25300 12643 620638 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 1334 . 1335) (nil fontified nil 1334 . 1335) (nil fontified nil 1333 . 1334) (nil fontified nil 1312 . 1333) (nil fontified nil 1305 . 1312) (nil fontified nil 1276 . 1305) (nil fontified nil 1275 . 1276) (nil fontified nil 1273 . 1275) (nil fontified nil 1272 . 1273) (nil fontified nil 1271 . 1272) (nil fontified nil 1236 . 1271) (nil fontified nil 1229 . 1236) (nil fontified nil 1222 . 1229) (nil fontified nil 1186 . 1222) (nil fontified nil 1185 . 1186) (nil fontified nil 1181 . 1185) (nil fontified nil 1180 . 1181) (nil fontified nil 1179 . 1180) (nil fontified nil 1164 . 1179) (nil fontified nil 1163 . 1164) (nil fontified nil 1158 . 1163) (nil fontified nil 1157 . 1158) (nil fontified nil 1156 . 1157) (nil fontified nil 1114 . 1156) (nil fontified nil 1110 . 1114) (nil fontified nil 1109 . 1110) (nil fontified nil 1102 . 1109) (nil fontified nil 1101 . 1102) (nil fontified nil 1089 . 1101) (nil fontified nil 1088 . 1089) (nil fontified nil 1080 . 1088) (nil fontified nil 1079 . 1080) (nil fontified nil 1076 . 1079) (nil fontified nil 1075 . 1076) (nil fontified nil 1074 . 1075) (nil fontified nil 1070 . 1074) (nil fontified nil 1069 . 1070) (nil fontified nil 1064 . 1069) (nil fontified nil 1063 . 1064) (nil fontified nil 1058 . 1063) (nil fontified nil 1053 . 1058) (nil fontified nil 1048 . 1053) (nil fontified nil 1047 . 1048) (nil fontified nil 1046 . 1047) (nil fontified nil 1028 . 1046) (nil fontified nil 1027 . 1028) (nil fontified nil 1022 . 1027) (nil fontified nil 1021 . 1022) (nil fontified nil 1017 . 1021) (nil fontified nil 1016 . 1017) (nil fontified nil 1015 . 1016) (nil fontified nil 1014 . 1015) (nil fontified nil 1006 . 1014) (nil fontified nil 1005 . 1006) (nil fontified nil 998 . 1005) (nil fontified nil 997 . 998) (nil fontified nil 953 . 997) (nil fontified nil 949 . 953) (nil fontified nil 948 . 949) (nil fontified nil 941 . 948) (nil fontified nil 940 . 941) (nil fontified nil 925 . 940) (nil fontified nil 924 . 925) (nil fontified nil 917 . 924) (nil fontified nil 916 . 917) (nil fontified nil 873 . 916) (nil fontified nil 872 . 873) (nil fontified nil 871 . 872) (nil fontified nil 869 . 871) (nil fontified nil 868 . 869) (nil fontified nil 863 . 868) (nil fontified nil 862 . 863) (nil fontified nil 857 . 862) (nil fontified nil 852 . 857) (nil fontified nil 847 . 852) (nil fontified nil 846 . 847) (nil fontified nil 845 . 846) (nil fontified nil 813 . 845) (nil fontified nil 812 . 813) (nil fontified nil 807 . 812) (nil fontified nil 806 . 807) (nil fontified nil 803 . 806) (nil fontified nil 802 . 803) (nil fontified nil 758 . 802) (nil fontified nil 754 . 758) (nil fontified nil 753 . 754) (nil fontified nil 751 . 753) (nil fontified nil 715 . 751) (nil fontified nil 712 . 715) (nil fontified nil 709 . 712) (nil fontified nil 702 . 709) (nil fontified nil 699 . 702) (nil fontified nil 698 . 699) (nil fontified nil 651 . 698) (nil fontified nil 650 . 651) (nil fontified nil 649 . 650) (nil fontified nil 644 . 649) (nil fontified nil 641 . 644) (nil fontified nil 626 . 641) (nil fontified nil 625 . 626) (nil fontified nil 614 . 625) (nil fontified nil 613 . 614) (nil fontified nil 589 . 613) (nil fontified nil 586 . 589) (586 . 1335)) nil (25300 12654 775853 0) 0 nil])
nil
([nil nil ((1335 . 1336) (#(")" 0 1 (fontified nil)) . -1335) (1335 . 1336)) nil (25300 12654 775835 0) 0 nil])
([nil nil ((1303 . 1307) (#("  " 0 2 (fontified nil)) . 1303) (1211 . 1215) (#("  " 0 2 (fontified nil)) . 1211) (1185 . 1191) (#("    " 0 4 (fontified nil)) . 1185) (1127 . 1135) (#("      " 0 6 (fontified nil)) . 1127) (1087 . 1093) (#("    " 0 4 (fontified nil)) . 1087) (1039 . 1043) (#("  " 0 2 (fontified nil)) . 1039) (1017 . 1025) (#("      " 0 6 (fontified nil)) . 1017) (958 . 966) (#("      " 0 6 (fontified nil)) . 958) (932 . 940) (#("      " 0 6 (fontified nil)) . 932) (876 . 882) (#("    " 0 4 (fontified nil)) . 876) (814 . 818) (#("  " 0 2 (fontified nil)) . 814) (759 . 763) (#("  " 0 2 (fontified nil)) . 759) (716 . 720) (#("  " 0 2 (fontified nil)) . 716) (704 . 708) (#("  " 0 2 (fontified nil)) . 704) (644 . 648) (#("  " 0 2 (fontified nil)) . 644) (613 . 615) 1336) nil (25300 12654 775828 0) 0 nil])
([nil nil ((1038 . 1040) (t 25300 12654 781465 441000)) nil (25300 13013 828788 0) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . -1038) (undo-tree-id0 . -1) (undo-tree-id1 . 1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . 1039) (undo-tree-id4 . 1) (undo-tree-id5 . -1)) nil (25300 13013 828784 0) 0 nil])
([nil nil ((1367 . 1370) (t 25300 13013 834380 649000)) nil (25300 13024 819495 0) 0 nil])
([nil nil ((583 . 586)) nil (25300 13024 819494 0) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . 584) (undo-tree-id6 . -2) (undo-tree-id7 . -2) (undo-tree-id8 . -2) (undo-tree-id9 . -2) (undo-tree-id10 . -2) (undo-tree-id11 . -2) (undo-tree-id12 . -2) (undo-tree-id13 . -2) (undo-tree-id14 . -2) (undo-tree-id15 . -2) (undo-tree-id16 . -2) (undo-tree-id17 . -2) (undo-tree-id18 . -2) (undo-tree-id19 . -2) (undo-tree-id20 . -2) (undo-tree-id21 . -2) (undo-tree-id22 . -2) (undo-tree-id23 . -2) (undo-tree-id24 . -2) (undo-tree-id25 . -2) (undo-tree-id26 . -2) (undo-tree-id27 . -2) (undo-tree-id28 . -2) (undo-tree-id29 . -2) (undo-tree-id30 . -2) (undo-tree-id31 . -2) (undo-tree-id32 . -2) (undo-tree-id33 . -2) (undo-tree-id34 . -2) (undo-tree-id35 . -2) (undo-tree-id36 . -2) (undo-tree-id37 . -2) (undo-tree-id38 . -2) (undo-tree-id39 . -2) (undo-tree-id40 . -2) (undo-tree-id41 . -2) (undo-tree-id42 . -2) (undo-tree-id43 . -2) (undo-tree-id44 . -2) (undo-tree-id45 . -2) (undo-tree-id46 . -2) (undo-tree-id47 . -2) (undo-tree-id48 . -2) (undo-tree-id49 . -2) (undo-tree-id50 . -2) (undo-tree-id51 . -2) (undo-tree-id52 . -2) (undo-tree-id53 . -2) (undo-tree-id54 . -2) (undo-tree-id55 . -2) (undo-tree-id56 . -2) (undo-tree-id57 . -2) (undo-tree-id58 . -2) (undo-tree-id59 . -2) (undo-tree-id60 . -2) (undo-tree-id61 . -2) (undo-tree-id62 . -2) (undo-tree-id63 . -2) (undo-tree-id64 . -2) (undo-tree-id65 . -2) (undo-tree-id66 . -2) (undo-tree-id67 . -2) (undo-tree-id68 . -2) (undo-tree-id69 . -2) (undo-tree-id70 . -2) (undo-tree-id71 . -2) (undo-tree-id72 . -2) (undo-tree-id73 . -2) (undo-tree-id74 . -2) (undo-tree-id75 . -2) (undo-tree-id76 . -2) (undo-tree-id77 . -2) (undo-tree-id78 . -2) (undo-tree-id79 . -2) (undo-tree-id80 . -2) (undo-tree-id81 . -2) (undo-tree-id82 . -2) (undo-tree-id83 . -2) (undo-tree-id84 . -2) (undo-tree-id85 . -2) (undo-tree-id86 . -2) (undo-tree-id87 . -2) (undo-tree-id88 . -2) (undo-tree-id89 . -2) (undo-tree-id90 . -2) (undo-tree-id91 . -2) (undo-tree-id92 . -2) (undo-tree-id93 . -2) (undo-tree-id94 . -2) (undo-tree-id95 . -2) (undo-tree-id96 . -2) (undo-tree-id97 . -2) (undo-tree-id98 . -2) (undo-tree-id99 . -2) (undo-tree-id100 . -2) (undo-tree-id101 . -2) (undo-tree-id102 . -2) (undo-tree-id103 . -2) (undo-tree-id104 . -2) (undo-tree-id105 . -2) (undo-tree-id106 . -2) (undo-tree-id107 . -2) (undo-tree-id108 . -2) (undo-tree-id109 . -2) (undo-tree-id110 . -2) (undo-tree-id111 . -2) (undo-tree-id112 . -2) (undo-tree-id113 . -2) (undo-tree-id114 . -2) (undo-tree-id115 . -2) (undo-tree-id116 . -2) (undo-tree-id117 . -2) (undo-tree-id118 . -2) (undo-tree-id119 . -2) (undo-tree-id120 . -2) (undo-tree-id121 . -2) (undo-tree-id122 . -2) (undo-tree-id123 . -2) (undo-tree-id124 . -2) (undo-tree-id125 . -2) (undo-tree-id126 . -2) (undo-tree-id127 . -2) (undo-tree-id128 . -2) (undo-tree-id129 . -2) (undo-tree-id130 . -2) (undo-tree-id131 . -2) (undo-tree-id132 . -2) (undo-tree-id133 . -2) (undo-tree-id134 . -2) (undo-tree-id135 . -2) (undo-tree-id136 . -2) (undo-tree-id137 . -2) (undo-tree-id138 . -2) (undo-tree-id139 . -2) (undo-tree-id140 . -2) (undo-tree-id141 . -2) (undo-tree-id142 . -2) (undo-tree-id143 . -2) (undo-tree-id144 . -2) (undo-tree-id145 . -2) (undo-tree-id146 . -2) (undo-tree-id147 . -2) (undo-tree-id148 . -2) (undo-tree-id149 . -2) (undo-tree-id150 . -2) (undo-tree-id151 . -2) (undo-tree-id152 . -2) (undo-tree-id153 . -2) (undo-tree-id154 . -2) (undo-tree-id155 . -2) (undo-tree-id156 . -2) (undo-tree-id157 . -2) (undo-tree-id158 . -2) (undo-tree-id159 . -2) (undo-tree-id160 . -2) (undo-tree-id161 . -2) (undo-tree-id162 . -2) (undo-tree-id163 . -2) (undo-tree-id164 . -2) (undo-tree-id165 . -2) (undo-tree-id166 . -2) (undo-tree-id167 . -2) (undo-tree-id168 . -2) (undo-tree-id169 . -2) (undo-tree-id170 . -2) (undo-tree-id171 . -2) (undo-tree-id172 . -2) (undo-tree-id173 . -2) (undo-tree-id174 . -2) (undo-tree-id175 . -2) (undo-tree-id176 . -2) (undo-tree-id177 . -2) (undo-tree-id178 . -2) (undo-tree-id179 . -2) (undo-tree-id180 . -2) (undo-tree-id181 . -2) (undo-tree-id182 . -2) (undo-tree-id183 . -2) (undo-tree-id184 . -2) (undo-tree-id185 . -2) (undo-tree-id186 . -2) (undo-tree-id187 . -2) (undo-tree-id188 . -2) (undo-tree-id189 . -2) (undo-tree-id190 . -2) (undo-tree-id191 . -2) (undo-tree-id192 . -2) (undo-tree-id193 . -2) (undo-tree-id194 . -2) (undo-tree-id195 . -2) (undo-tree-id196 . -2) (undo-tree-id197 . -2) (undo-tree-id198 . -2) (undo-tree-id199 . -2) (undo-tree-id200 . -2) (undo-tree-id201 . -2) (undo-tree-id202 . -2) (undo-tree-id203 . -2) (undo-tree-id204 . -2) (undo-tree-id205 . -2) (undo-tree-id206 . -2) (undo-tree-id207 . -2) (undo-tree-id208 . -2) (undo-tree-id209 . -2) (undo-tree-id210 . -2) (undo-tree-id211 . -2) (undo-tree-id212 . -2) (undo-tree-id213 . -2) (undo-tree-id214 . -2) (undo-tree-id215 . -2) (undo-tree-id216 . -2) (undo-tree-id217 . -2) (undo-tree-id218 . -2) (undo-tree-id219 . -2) (undo-tree-id220 . -2) (undo-tree-id221 . -2) (undo-tree-id222 . -2) (undo-tree-id223 . -2) (undo-tree-id224 . -2) (undo-tree-id225 . -2) (undo-tree-id226 . -2) (undo-tree-id227 . -2) (undo-tree-id228 . -2) (undo-tree-id229 . -2) (undo-tree-id230 . -2) (undo-tree-id231 . -2) (undo-tree-id232 . -2) (undo-tree-id233 . -2) (undo-tree-id234 . -2) (undo-tree-id235 . -2) (undo-tree-id236 . -2) (undo-tree-id237 . -2) (undo-tree-id238 . -2) (undo-tree-id239 . -2) (undo-tree-id240 . -2) (undo-tree-id241 . -2) (undo-tree-id242 . -2) (undo-tree-id243 . -2) (undo-tree-id244 . -2) (undo-tree-id245 . -2) (undo-tree-id246 . -2) (undo-tree-id247 . -2) (undo-tree-id248 . -2) (undo-tree-id249 . -2) (undo-tree-id250 . -2) (undo-tree-id251 . -2) (undo-tree-id252 . -2) (undo-tree-id253 . -2) (undo-tree-id254 . -2) (undo-tree-id255 . -2) (undo-tree-id256 . -2) (undo-tree-id257 . -2) (undo-tree-id258 . -2) (undo-tree-id259 . -2) (undo-tree-id260 . -2) 586) nil (25300 13024 819485 0) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -1371) (undo-tree-id0 . -1) (undo-tree-id1 . 1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) 1372 (t 25300 13024 825147 512000)) nil (25300 52091 937119 0) 0 nil])
([nil nil ((1649 . 1652)) nil (25300 52091 937095 0) 0 nil])
([nil nil ((1652 . 1653) (#(")" 0 1 (fontified nil)) . -1652) (1652 . 1653)) nil (25300 52091 937094 0) 0 nil])
([nil nil ((1611 . 1615) (#("  " 0 2 (fontified nil)) . 1611) (1562 . 1566) (#("  " 0 2 (fontified nil)) . 1562) (1530 . 1532) (1456 . 1458) (1410 . 1414) (#("  " 0 2 (fontified nil)) . 1410) (1383 . 1385) (1373 . 1375) 1653) nil (25300 52091 937092 0) 0 nil])
([nil nil ((245 . 246)) nil (25300 52101 523079 0) 0 nil])
([nil nil ((247 . 248) (1668 . 1669) (#("(" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -1668) (1668 . 1669)) nil (25300 52122 487709 0) 0 nil] [nil nil ((1669 . 1670) (247 . 248)) ((#("{" 0 1 (fontified t)) . 247) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (#("}" 0 1 (face (font-lock-warning-face) help-echo "Easy to misread; consider moving the element to the next line" fontified t)) . 1669)) (25300 52101 523020 0) 0 nil] [nil nil ((247 . 248) (1676 . 1677) (#("(" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -1676) (1668 . 1677)) ((#("(((((((((" 0 1 (face (rainbow-delimiters-depth-2-face font-lock-warning-face) help-echo "Easy to misread; consider moving the element to the next line" fontified nil) 1 2 (face (rainbow-delimiters-depth-3-face font-lock-warning-face) help-echo "Easy to misread; consider moving the element to the next line" fontified nil) 2 3 (face (rainbow-delimiters-depth-4-face font-lock-warning-face) help-echo "Easy to misread; consider moving the element to the next line" fontified nil) 3 4 (face (rainbow-delimiters-depth-5-face font-lock-warning-face) help-echo "Easy to misread; consider moving the element to the next line" fontified nil) 4 5 (face (rainbow-delimiters-depth-6-face font-lock-warning-face) help-echo "Easy to misread; consider moving the element to the next line" fontified nil) 5 6 (face (rainbow-delimiters-depth-7-face font-lock-warning-face) help-echo "Easy to misread; consider moving the element to the next line" fontified nil) 6 7 (face (rainbow-delimiters-depth-8-face font-lock-warning-face) help-echo "Easy to misread; consider moving the element to the next line" fontified nil) 7 8 (face (rainbow-delimiters-depth-9-face font-lock-warning-face) help-echo "Easy to misread; consider moving the element to the next line" fontified nil) 8 9 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 1668) (1676 . 1677) (#(")" 0 1 (face (rainbow-delimiters-depth-9-face font-lock-warning-face) help-echo "Easy to misread; consider moving the element to the next line" fontified t)) . 1676) (#("(" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . 247) (undo-tree-id5 . -1) (undo-tree-id6 . -1)) (25300 52091 937085 0) 0 nil])
([nil nil ((248 . 251)) nil (25300 52164 771593 0) 0 nil] [nil nil ((248 . 252)) ((#("when" 0 4 (face font-lock-keyword-face fontified t)) . 248) (undo-tree-id16 . -4) (undo-tree-id17 . -4) (undo-tree-id18 . -4) (undo-tree-id19 . -4) (undo-tree-id20 . -4) (undo-tree-id21 . -4) (undo-tree-id22 . -4) (undo-tree-id23 . -4) (undo-tree-id24 . -4) (undo-tree-id25 . -4) (undo-tree-id26 . -4) (undo-tree-id27 . -4) (undo-tree-id28 . -4) (undo-tree-id29 . -4) (undo-tree-id30 . -4) (undo-tree-id31 . -4) (undo-tree-id32 . -4) (undo-tree-id33 . -4) (undo-tree-id34 . -4) (undo-tree-id35 . -4) (undo-tree-id36 . -4) (undo-tree-id37 . -4) (undo-tree-id38 . -4) (undo-tree-id39 . -4) (undo-tree-id40 . -4) (undo-tree-id41 . -4) (undo-tree-id42 . -4) (undo-tree-id43 . -4) (undo-tree-id44 . -4) (undo-tree-id45 . -4) (undo-tree-id46 . -4) (undo-tree-id47 . -4) (undo-tree-id48 . -4) (undo-tree-id49 . -4) (undo-tree-id50 . -4) (undo-tree-id51 . -4) (undo-tree-id52 . -4) (undo-tree-id53 . -4) (undo-tree-id54 . -4) (undo-tree-id55 . -4) (undo-tree-id56 . -4) (undo-tree-id57 . -4) (undo-tree-id58 . -4) (undo-tree-id59 . -4) (undo-tree-id60 . -4) (undo-tree-id61 . -4) (undo-tree-id62 . -4) (undo-tree-id63 . -4) (undo-tree-id64 . -4) (undo-tree-id65 . -4) (undo-tree-id66 . -4) (undo-tree-id67 . -4) (undo-tree-id68 . -4) (undo-tree-id69 . -4) (undo-tree-id70 . -4) (undo-tree-id71 . -4) (undo-tree-id72 . -4) (undo-tree-id73 . -4) (undo-tree-id74 . -4) (undo-tree-id75 . -4) (undo-tree-id76 . -4) (undo-tree-id77 . -4) (undo-tree-id78 . -4) (undo-tree-id79 . -4) (undo-tree-id80 . -4) (undo-tree-id81 . -4) (undo-tree-id82 . -4) (undo-tree-id83 . -4) (undo-tree-id84 . -4) (undo-tree-id85 . -4) (undo-tree-id86 . -4) (undo-tree-id87 . -4) (undo-tree-id88 . -4) (undo-tree-id89 . -4) (undo-tree-id90 . -4) (undo-tree-id91 . -4) (undo-tree-id92 . -4) (undo-tree-id93 . -4) (undo-tree-id94 . -4) (undo-tree-id95 . -4) (undo-tree-id96 . -4) (undo-tree-id97 . -4) (undo-tree-id98 . -4) (undo-tree-id99 . -4) (undo-tree-id100 . -4) (undo-tree-id101 . -4) (undo-tree-id102 . -4) (undo-tree-id103 . -4) (undo-tree-id104 . -4) (undo-tree-id105 . -4) (undo-tree-id106 . -4) (undo-tree-id107 . -4) (undo-tree-id108 . -4) (undo-tree-id109 . -4) (undo-tree-id110 . -4) (undo-tree-id111 . -4) (undo-tree-id112 . -4) (undo-tree-id113 . -4) (undo-tree-id114 . -4) (undo-tree-id115 . -4) (undo-tree-id116 . -4) (undo-tree-id117 . -4) (undo-tree-id118 . -4) (undo-tree-id119 . -4) (undo-tree-id120 . -4) (undo-tree-id121 . -4) (undo-tree-id122 . -4) (undo-tree-id123 . -4) (undo-tree-id124 . -4) (undo-tree-id125 . -4) (undo-tree-id126 . -4) (undo-tree-id127 . -4) (undo-tree-id128 . -4) (undo-tree-id129 . -4) (undo-tree-id130 . -4) (undo-tree-id131 . -4) (undo-tree-id132 . -4) (undo-tree-id133 . -4) (undo-tree-id134 . -4) (undo-tree-id135 . -4) (undo-tree-id136 . -4) (undo-tree-id137 . -4) (undo-tree-id138 . -4) (undo-tree-id139 . -4) (undo-tree-id140 . -4) (undo-tree-id141 . -4) (undo-tree-id142 . -4) (undo-tree-id143 . -4) (undo-tree-id144 . -4) (undo-tree-id145 . -4) (undo-tree-id146 . -4) (undo-tree-id147 . -4) (undo-tree-id148 . -4) (undo-tree-id149 . -4) (undo-tree-id150 . -4) (undo-tree-id151 . -4) (undo-tree-id152 . -4) (undo-tree-id153 . -4) (undo-tree-id154 . -4) (undo-tree-id155 . -4) (undo-tree-id156 . -4) (undo-tree-id157 . -4) (undo-tree-id158 . -4) (undo-tree-id159 . -4) (undo-tree-id160 . -4) (undo-tree-id161 . -4) (undo-tree-id162 . -4) (undo-tree-id163 . -4) (undo-tree-id164 . -4) (undo-tree-id165 . -4) (undo-tree-id166 . -4) (undo-tree-id167 . -4) (undo-tree-id168 . -4) (undo-tree-id169 . -4) (undo-tree-id170 . -4) (undo-tree-id171 . -4) (undo-tree-id172 . -4) (undo-tree-id173 . -4) (undo-tree-id174 . -4) (undo-tree-id175 . -4) (undo-tree-id176 . -4) (undo-tree-id177 . -4) (undo-tree-id178 . -4) (undo-tree-id179 . -4) (undo-tree-id180 . -4) (undo-tree-id181 . -4) (undo-tree-id182 . -4) (undo-tree-id183 . -4) (undo-tree-id184 . -4) (undo-tree-id185 . -4) (undo-tree-id186 . -4) (undo-tree-id187 . -4) (undo-tree-id188 . -4) (undo-tree-id189 . -4) (undo-tree-id190 . -4) (undo-tree-id191 . -4) (undo-tree-id192 . -4) (undo-tree-id193 . -4) (undo-tree-id194 . -4) (undo-tree-id195 . -4) (undo-tree-id196 . -4) (undo-tree-id197 . -4) (undo-tree-id198 . -4) (undo-tree-id199 . -4) (undo-tree-id200 . -4) (undo-tree-id201 . -4) (undo-tree-id202 . -4) (undo-tree-id203 . -4) (undo-tree-id204 . -4) (undo-tree-id205 . -4) (undo-tree-id206 . -4) (undo-tree-id207 . -4) (undo-tree-id208 . -4) (undo-tree-id209 . -4) (undo-tree-id210 . -4) (undo-tree-id211 . -4) (undo-tree-id212 . -4) (undo-tree-id213 . -4) (undo-tree-id214 . -4) (undo-tree-id215 . -4) (undo-tree-id216 . -4) (undo-tree-id217 . -4) (undo-tree-id218 . -4) (undo-tree-id219 . -4) (undo-tree-id220 . -4) (undo-tree-id221 . -4) (undo-tree-id222 . -4) (undo-tree-id223 . -4) (undo-tree-id224 . -4) (undo-tree-id225 . -4) (undo-tree-id226 . -4) (undo-tree-id227 . -4) (undo-tree-id228 . -4) (undo-tree-id229 . -4) (undo-tree-id230 . -4) (undo-tree-id231 . -4) (undo-tree-id232 . -4) (undo-tree-id233 . -4) (undo-tree-id234 . -4) (undo-tree-id235 . -4) (undo-tree-id236 . -4) (undo-tree-id237 . -4) (undo-tree-id238 . -4) (undo-tree-id239 . -4) (undo-tree-id240 . -4) (undo-tree-id241 . -4) (undo-tree-id242 . -4) (undo-tree-id243 . -4) (undo-tree-id244 . -4) (undo-tree-id245 . -4) (undo-tree-id246 . -4) (undo-tree-id247 . -4) (undo-tree-id248 . -4) (undo-tree-id249 . -4) (undo-tree-id250 . -4) (undo-tree-id251 . -4) (undo-tree-id252 . -4) (undo-tree-id253 . -4) (undo-tree-id254 . -4) (undo-tree-id255 . -4) (undo-tree-id256 . -4) (undo-tree-id257 . -4) (undo-tree-id258 . -4) (undo-tree-id259 . -4) (undo-tree-id260 . -4) (undo-tree-id261 . -4) (undo-tree-id262 . -4) (undo-tree-id263 . -4) (undo-tree-id264 . -4) (undo-tree-id265 . -4) (undo-tree-id266 . -4) (undo-tree-id267 . -4) (undo-tree-id268 . -4) (undo-tree-id269 . -4) (undo-tree-id270 . -4) (undo-tree-id271 . -4) (undo-tree-id272 . -4) (undo-tree-id273 . -4) (undo-tree-id274 . -4) (undo-tree-id275 . -4) (undo-tree-id276 . -4) (undo-tree-id277 . -4) (undo-tree-id278 . -4) (undo-tree-id279 . -4) (undo-tree-id280 . -4) (undo-tree-id281 . -4) (undo-tree-id282 . -4) (undo-tree-id283 . -4) (undo-tree-id284 . -4) (undo-tree-id285 . -4) (undo-tree-id286 . -4) (undo-tree-id287 . -4) (undo-tree-id288 . -4) (undo-tree-id289 . -4) (undo-tree-id290 . -4) (undo-tree-id291 . -4) (undo-tree-id292 . -4) (undo-tree-id293 . -4) (undo-tree-id294 . -4) (undo-tree-id295 . -4) (undo-tree-id296 . -4) (undo-tree-id297 . -4) (undo-tree-id298 . -4) (undo-tree-id299 . -4) (undo-tree-id300 . -4) (undo-tree-id301 . -4) (undo-tree-id302 . -4) (undo-tree-id303 . -4) (undo-tree-id304 . -4) (undo-tree-id305 . -4) (undo-tree-id306 . -4) (undo-tree-id307 . -4) (undo-tree-id308 . -4) (undo-tree-id309 . -4) (undo-tree-id310 . -4) (undo-tree-id311 . -4) (undo-tree-id312 . -4) (undo-tree-id313 . -4) (undo-tree-id314 . -4) (undo-tree-id315 . -4) (undo-tree-id316 . -4) (undo-tree-id317 . -4) (undo-tree-id318 . -4) (undo-tree-id319 . -4) (undo-tree-id320 . -4) (undo-tree-id321 . -4) (undo-tree-id322 . -4) (undo-tree-id323 . -4) (undo-tree-id324 . -4) (undo-tree-id325 . -4) (undo-tree-id326 . -4) (undo-tree-id327 . -4) (undo-tree-id328 . -4) (undo-tree-id329 . -4) (undo-tree-id330 . -4) (undo-tree-id331 . -4) (undo-tree-id332 . -4) (undo-tree-id333 . -4) (undo-tree-id334 . -4) (undo-tree-id335 . -4) (undo-tree-id336 . -4) (undo-tree-id337 . -4) (undo-tree-id338 . -4) (undo-tree-id339 . -4) (undo-tree-id340 . -4) (undo-tree-id341 . -4) (undo-tree-id342 . -4) (undo-tree-id343 . -4) (undo-tree-id344 . -4) (undo-tree-id345 . -4) (undo-tree-id346 . -4) (undo-tree-id347 . -4) (undo-tree-id348 . -4) (undo-tree-id349 . -4) (undo-tree-id350 . -4) (undo-tree-id351 . -4) (undo-tree-id352 . -4) (undo-tree-id353 . -4) (undo-tree-id354 . -4) (undo-tree-id355 . -4) (undo-tree-id356 . -4) (undo-tree-id357 . -4) (undo-tree-id358 . -4) (undo-tree-id359 . -4) (undo-tree-id360 . -4) (undo-tree-id361 . -4) (undo-tree-id362 . -4) (undo-tree-id363 . -4) (undo-tree-id364 . -4) (undo-tree-id365 . -4) (undo-tree-id366 . -4) (undo-tree-id367 . -4) (undo-tree-id368 . -4) (undo-tree-id369 . -4) (undo-tree-id370 . -4) (undo-tree-id371 . -4) (undo-tree-id372 . -4) (undo-tree-id373 . -4) (undo-tree-id374 . -4) (undo-tree-id375 . -4) (undo-tree-id376 . -4) (undo-tree-id377 . -4) (undo-tree-id378 . -4) (undo-tree-id379 . -4) (undo-tree-id380 . -4) (undo-tree-id381 . -4) (undo-tree-id382 . -4) (undo-tree-id383 . -4) (undo-tree-id384 . -4) (undo-tree-id385 . -4) (undo-tree-id386 . -4) (undo-tree-id387 . -4) (undo-tree-id388 . -4) (undo-tree-id389 . -4) (undo-tree-id390 . -4) (undo-tree-id391 . -4) (undo-tree-id392 . -4) (undo-tree-id393 . -4) (undo-tree-id394 . -4) (undo-tree-id395 . -4) (undo-tree-id396 . -4) (undo-tree-id397 . -4) (undo-tree-id398 . -4) (undo-tree-id399 . -4) (undo-tree-id400 . -4) (undo-tree-id401 . -4) (undo-tree-id402 . -4) (undo-tree-id403 . -4) (undo-tree-id404 . -4) (undo-tree-id405 . -4) (undo-tree-id406 . -4) (undo-tree-id407 . -4) (undo-tree-id408 . -4) (undo-tree-id409 . -4) (undo-tree-id410 . -4) (undo-tree-id411 . -4) (undo-tree-id412 . -4) (undo-tree-id413 . -4) (undo-tree-id414 . -4) (undo-tree-id415 . -4) (undo-tree-id416 . -4) (undo-tree-id417 . -4) (undo-tree-id418 . -4) (undo-tree-id419 . -4) (undo-tree-id420 . -4) (undo-tree-id421 . -4) (undo-tree-id422 . -4) (undo-tree-id423 . -4) (undo-tree-id424 . -4) (undo-tree-id425 . -4) (undo-tree-id426 . -4) (undo-tree-id427 . -4) (undo-tree-id428 . -4) (undo-tree-id429 . -4) (undo-tree-id430 . -4) (undo-tree-id431 . -4) (undo-tree-id432 . -4) (undo-tree-id433 . -4) (undo-tree-id434 . -4) (undo-tree-id435 . -4) (undo-tree-id436 . -4) (undo-tree-id437 . -4) (undo-tree-id438 . -4) (undo-tree-id439 . -4) (undo-tree-id440 . -4) (undo-tree-id441 . -4) (undo-tree-id442 . -4) (undo-tree-id443 . -4)) (25300 52120 940102 0) 0 nil])
nil
nil
([nil nil ((248 . 253)) nil (25300 52164 771592 0) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 254) (undo-tree-id9 . 1) (undo-tree-id10 . -1) (248 . 254) (#("when" 0 4 (face font-lock-keyword-face fontified t)) . -248) (undo-tree-id11 . -4) (undo-tree-id12 . -4) 252) ((248 . 252) (#("when (" 0 4 (face font-lock-keyword-face fontified nil) 4 5 (fontified nil) 5 6 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 248) (undo-tree-id13 . -6) (undo-tree-id14 . 1) (undo-tree-id15 . -6) (254 . 255)) (25300 52120 940010 0) 0 nil])
([nil nil ((254 . 260) (253 . 255)) nil (25300 52164 771592 0) 0 nil])
nil
([nil nil ((254 . 264) (#("is-com" 0 6 (fontified t)) . -254) (undo-tree-id450 . -6) (undo-tree-id451 . -6) 260) nil (25300 52164 771591 0) 0 nil])
([nil nil ((179 . 181) (178 . 180)) nil (25300 52164 771589 0) 0 nil])
([nil nil ((179 . 186) (#("re" 0 2 (fontified t)) . -179) (undo-tree-id448 . -2) (undo-tree-id449 . -2) 181) nil (25300 52164 771588 0) 0 nil])
([nil nil ((186 . 188)) nil (25300 52164 771586 0) 0 nil])
([nil nil ((188 . 193)) nil (25300 52164 771586 0) 0 nil])
([nil nil ((193 . 195)) nil (25300 52164 771585 0) 0 nil])
([nil nil ((188 . 199) (#("init-cu" 0 7 (face font-lock-constant-face fontified t)) . -188) (undo-tree-id446 . -7) (undo-tree-id447 . -7) 195) nil (25300 52164 771584 0) 0 nil])
([nil nil ((200 . 201)) nil (25300 52164 771581 0) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . 1414) (undo-tree-id444 . -2) (undo-tree-id445 . -2) 201) nil (25300 52164 771578 0) 0 nil])
([nil nil ((#("  ;; 图形界面
  (use-package company-box
    :hook (company-mode . company-box-mode))

  ;; org-bars 的文档中说到，如果同时使用 org-bars 和 company-mode，就需要使用company-posframe
  (use-package company-posframe
    :hook (company-mode . company-posframe-mode)
    :config (setq company-tooltip-minimum-width 40))" 0 2 (fontified t) 2 5 (face font-lock-comment-delimiter-face fontified t) 5 10 (face font-lock-comment-face fontified t) 10 12 (fontified t) 12 13 (face (rainbow-delimiters-depth-3-face) fontified t) 13 24 (face font-lock-keyword-face fontified t) 24 25 (fontified t) 25 36 (face font-lock-constant-face fontified t) 36 41 (fontified t) 41 46 (face font-lock-builtin-face fontified t) 46 47 (fontified t) 47 48 (face (rainbow-delimiters-depth-4-face) fontified t) 48 79 (fontified t) 79 80 (face (rainbow-delimiters-depth-4-face) fontified t) 80 81 (face (rainbow-delimiters-depth-3-face) fontified t) 81 85 (fontified t) 85 88 (face font-lock-comment-delimiter-face fontified t) 88 135 (face font-lock-comment-face fontified t) 135 157 (face font-lock-comment-face fontified t) 157 159 (fontified t) 159 160 (face (rainbow-delimiters-depth-3-face) fontified t) 160 171 (face font-lock-keyword-face fontified t) 171 172 (fontified t) 172 188 (face font-lock-constant-face fontified t) 188 190 (fontified t) 190 193 (fontified t) 193 198 (face font-lock-builtin-face fontified t) 198 199 (fontified t) 199 200 (face (rainbow-delimiters-depth-4-face) fontified t) 200 236 (fontified t) 236 237 (face (rainbow-delimiters-depth-4-face) fontified t) 237 238 (fontified t) 238 242 (fontified t) 242 249 (face font-lock-builtin-face fontified t) 249 250 (fontified t) 250 251 (face (rainbow-delimiters-depth-4-face) fontified t) 251 255 (face font-lock-keyword-face fontified t) 255 284 (fontified t) 284 288 (fontified t) 288 289 (face (rainbow-delimiters-depth-4-face) fontified t) 289 290 (face (rainbow-delimiters-depth-3-face) fontified t)) . 1416) (undo-tree-id459 . -290) (undo-tree-id460 . -290) (undo-tree-id461 . -10) (undo-tree-id462 . -290) (undo-tree-id463 . -290) (t 25300 52164 777475 672000)) nil (25300 52350 497527 0) 0 nil])
([nil nil ((#("


" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . 1413) (undo-tree-id452 . -3) (undo-tree-id453 . -1) (undo-tree-id454 . -3) (undo-tree-id455 . -1) (undo-tree-id456 . -3) (undo-tree-id457 . -3) (undo-tree-id458 . -3) 1416) nil (25300 52350 497523 0) 0 nil])
([nil nil ((1420 . 1422) (1414 . 1418) (#("  " 0 2 (fontified nil)) . 1414) (1417 . 1418)) nil (25300 52350 497511 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 1711 . 1712) (nil fontified nil 1711 . 1712) (nil fontified nil 1710 . 1711) (nil fontified nil 1706 . 1710) (nil fontified nil 1677 . 1706) (nil fontified nil 1673 . 1677) (nil fontified nil 1672 . 1673) (nil fontified nil 1671 . 1672) (nil fontified nil 1664 . 1671) (nil fontified nil 1660 . 1664) (nil fontified nil 1659 . 1660) (nil fontified nil 1658 . 1659) (nil fontified nil 1622 . 1658) (nil fontified nil 1621 . 1622) (nil fontified nil 1620 . 1621) (nil fontified nil 1615 . 1620) (nil fontified nil 1612 . 1615) (nil fontified nil 1610 . 1612) (nil fontified nil 1594 . 1610) (nil fontified nil 1593 . 1594) (nil fontified nil 1582 . 1593) (nil fontified nil 1581 . 1582) (nil fontified nil 1579 . 1581) (nil fontified nil 1557 . 1579) (nil fontified nil 1510 . 1557) (nil fontified nil 1507 . 1510) (nil fontified nil 1503 . 1507) (nil fontified nil 1502 . 1503) (nil fontified nil 1501 . 1502) (nil fontified nil 1470 . 1501) (nil fontified nil 1469 . 1470) (nil fontified nil 1468 . 1469) (nil fontified nil 1463 . 1468) (nil fontified nil 1458 . 1463) (nil fontified nil 1447 . 1458) (nil fontified nil 1446 . 1447) (nil fontified nil 1435 . 1446) (nil fontified nil 1434 . 1435) (nil fontified nil 1432 . 1434) (nil fontified nil 1427 . 1432) (nil fontified nil 1424 . 1427) (nil fontified nil 1422 . 1424) (1422 . 1712)) nil (25300 52350 497509 0) 0 nil])
([nil nil ((1712 . 1715)) nil (25300 52350 497502 0) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . -1470) (1395 . 1401) (#("    " 0 4 (fontified t)) . 1395) (1301 . 1307) (#("    " 0 4 (fontified t)) . 1301) (1273 . 1281) (#("      " 0 6 (fontified t)) . 1273) (1213 . 1223) (#("        " 0 8 (fontified t)) . 1213) (1171 . 1179) (#("      " 0 6 (fontified t)) . 1171) (1121 . 1127) (#("    " 0 4 (fontified t)) . 1121) (1097 . 1107) (#("        " 0 8 (fontified t)) . 1097) (1036 . 1046) (#("        " 0 8 (fontified t)) . 1036) (1008 . 1018) (#("        " 0 8 (fontified t)) . 1008) (950 . 958) (#("      " 0 6 (fontified t)) . 950) (886 . 892) (#("    " 0 4 (fontified t)) . 886) (829 . 835) (#("    " 0 4 (fontified t)) . 829) (784 . 790) (#("    " 0 4 (fontified t)) . 784) (770 . 776) (#("    " 0 4 (fontified t)) . 770) (708 . 714) (#("    " 0 4 (fontified t)) . 708) (675 . 679) (#("  " 0 2 (fontified t)) . 675) (644 . 648) (#("  " 0 2 (fontified t)) . 644) (555 . 559) (#("  " 0 2 (fontified t)) . 555) (512 . 516) (#("  " 0 2 (fontified t)) . 512) (446 . 450) (#("  " 0 2 (fontified t)) . 446) (412 . 416) (#("  " 0 2 (fontified t)) . 412) (369 . 373) (#("  " 0 2 (fontified t)) . 369) (357 . 361) (#("  " 0 2 (fontified t)) . 357) (312 . 316) (#("  " 0 2 (fontified t)) . 312) 1715) nil (25300 52350 497496 0) 0 nil])
([nil nil ((270 . 272) (t 25300 52350 503112 26000)) nil (25300 52467 251212 0) 0 nil])
([nil nil ((1469 . 1470)) nil (25300 52467 251211 0) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-unmatched-face))) . -1764) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . 1) (undo-tree-id6 . -1) 1765) nil (25300 52467 251209 0) 0 nil])
([nil nil ((1554 . 1555)) nil (25300 52467 251204 0) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -1554) (undo-tree-id2 . -1) 1555) nil (25300 52467 251203 0) 0 nil])
([nil nil ((514 . 515)) nil (25300 52467 251201 0) 0 nil])
([nil nil ((#("≈" 0 1 (fontified t)) . -514) (undo-tree-id1 . -1) 515) nil (25300 52467 251199 0) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . 1762) (undo-tree-id0 . -2) 514) nil (25300 52467 251193 0) 0 nil])
([nil nil ((#(";" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -270) (undo-tree-id28 . -1) (#(";" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -271) (undo-tree-id29 . -1) (undo-tree-id30 . 1) 272 (t 25300 52467 258934 985000)) nil (25300 52734 725773 0) 0 nil])
([nil nil ((#("
    " 0 5 (fontified t)) . 1461) (undo-tree-id26 . -5) (undo-tree-id27 . -1) 1466) nil (25300 52734 725770 0) 0 nil])
([nil nil ((1755 . 1756) (#(")" 0 1 (fontified nil)) . -1755) (1755 . 1756)) nil (25300 52734 725768 0) 0 nil])
([nil nil ((1755 . 1757) 1756) nil (25300 52734 725767 0) 0 nil])
([nil nil ((287 . 290)) nil (25300 52734 725766 0) 0 nil])
([nil nil ((288 . 298) (#("is" 0 2 (fontified t)) . -288) (undo-tree-id24 . -2) (undo-tree-id25 . -2) 290) nil (25300 52734 725765 0) 0 nil])
([nil nil ((#("(when (is-company is-company)" 0 1 (fontified t face (rainbow-delimiters-depth-1-face)) 1 5 (fontified t face font-lock-keyword-face) 5 6 (fontified t) 6 7 (fontified t face (rainbow-delimiters-depth-2-face)) 7 18 (fontified t) 18 28 (fontified t) 28 29 (fontified t face (rainbow-delimiters-depth-2-face))) . 270) (undo-tree-id16 . -29) (undo-tree-id17 . 29) (undo-tree-id18 . -17) (undo-tree-id19 . -28) (undo-tree-id20 . 29) (undo-tree-id21 . -1) (undo-tree-id22 . -29) (undo-tree-id23 . -29)) nil (25300 52734 725763 0) 0 nil])
([nil nil ((#("

" 0 1 (fontified t face font-lock-comment-face) 1 2 (fontified t)) . 268) (undo-tree-id6 . -2) (undo-tree-id7 . -2) (undo-tree-id8 . -2) (undo-tree-id9 . -2) (undo-tree-id10 . -2) (undo-tree-id11 . -2) (undo-tree-id12 . -2) (undo-tree-id13 . -2) (undo-tree-id14 . -2) (undo-tree-id15 . -2) 270) nil (25300 52734 725757 0) 0 nil])
([nil nil ((268 . 269)) nil (25300 52734 725750 0) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-unmatched-face))) . -1738) (undo-tree-id2 . -1) (undo-tree-id3 . 1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) 1739) nil (25300 52734 725749 0) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . -1672) (undo-tree-id0 . -2) (undo-tree-id1 . -2) (#("  " 0 2 (fontified t)) . -1623) (#("  " 0 2 (fontified t)) . -1576) (#("  " 0 2 (fontified t)) . -1544) (#("  " 0 2 (fontified t)) . -1472) (#("  " 0 2 (fontified t)) . -1430) (#("  " 0 2 (fontified t)) . -1403) (#("  " 0 2 (fontified t)) . -1395) (#("  " 0 2 (fontified t)) . -1332) (#("  " 0 2 (fontified t)) . -1240) (#("  " 0 2 (fontified t)) . -1216) (#("  " 0 2 (fontified t)) . -1160) (#("  " 0 2 (fontified t)) . -1118) (#("  " 0 2 (fontified t)) . -1068) (#("  " 0 2 (fontified t)) . -1050) (#("  " 0 2 (fontified t)) . -991) (#("  " 0 2 (fontified t)) . -965) (#("  " 0 2 (fontified t)) . -907) (#("  " 0 2 (fontified t)) . -843) (#("  " 0 2 (fontified t)) . -788) (#("  " 0 2 (fontified t)) . -745) (#("  " 0 2 (fontified t)) . -733) (#("  " 0 2 (fontified t)) . -673) (#("  " 0 2 (fontified t)) . -640) (#("  " 0 2 (fontified t)) . -611) (#("  " 0 2 (fontified t)) . -524) (#("  " 0 2 (fontified t)) . -483) (#("  " 0 2 (fontified t)) . -419) (#("  " 0 2 (fontified t)) . -387) (#("  " 0 2 (fontified t)) . -346) (#("  " 0 2 (fontified t)) . -336) (#("  " 0 2 (fontified t)) . -293) (#("  " 0 2 (fontified t)) . -270) 1738) nil (25300 52734 725741 0) 0 nil])
([nil nil ((290 . 293) (t 25300 52734 732110 115000) 289) nil (25300 65450 215808 0) 0 nil])
([nil nil ((#("
  " 0 3 (fontified t)) . 290) (undo-tree-id0 . -3) (undo-tree-id1 . -1) 293) nil (25300 65450 215873 0) 0 nil])
([nil nil ((1672 . 1673) (270 . 271)) nil (25300 65506 669761 0) 0 nil] [nil nil ((270 . 271) (1671 . 1672) (#("（" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -1671) (1671 . 1672)) ((#("（" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 1671) (1671 . 1672) (#("）" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . 1671) (#("（" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . 270) (undo-tree-id2 . -1) (undo-tree-id3 . -1)) (25300 65450 215784 0) 0 nil])
([nil nil ((271 . 274)) nil (25300 65506 669759 0) 0 nil])
nil
([nil nil ((271 . 279)) nil (25300 65506 669759 0) 0 nil])
([nil nil ((276 . 286) (#("is-" 0 3 (fontified t)) . -276) (undo-tree-id7 . -3) (undo-tree-id8 . -3) 279) nil (25300 65506 669757 0) 0 nil])
([nil nil ((1414 . 1416) (#("  " 0 2 (fontified nil)) . 1413) (1413 . 1415) (1413 . 1414)) nil (25300 65506 669755 0) 0 nil])
([nil nil ((#("

  " 0 1 (fontified t) 1 4 (fontified t)) . 1412) (undo-tree-id4 . -2) (undo-tree-id5 . -4) (undo-tree-id6 . -1) 1416) nil (25300 65506 670230 0) 0 nil])
([nil nil ((1412 . 1415)) nil (25300 65530 901450 0) 0 nil] [nil nil ((1699 . 1703) (#("  " 0 2 (fontified nil)) . 1699) (1650 . 1654) (#("  " 0 2 (fontified nil)) . 1650) (1618 . 1620) (1544 . 1546) (1498 . 1502) (#("  " 0 2 (fontified nil)) . 1498) (1471 . 1473) (1461 . 1463) (1393 . 1399) (#("    " 0 4 (fontified nil)) . 1393) (1299 . 1305) (#("    " 0 4 (fontified nil)) . 1299) (1271 . 1279) (#("      " 0 6 (fontified nil)) . 1271) (1211 . 1221) (#("        " 0 8 (fontified nil)) . 1211) (1169 . 1177) (#("      " 0 6 (fontified nil)) . 1169) (1119 . 1125) (#("    " 0 4 (fontified nil)) . 1119) (1095 . 1105) (#("        " 0 8 (fontified nil)) . 1095) (1034 . 1044) (#("        " 0 8 (fontified nil)) . 1034) (1006 . 1016) (#("        " 0 8 (fontified nil)) . 1006) (948 . 956) (#("      " 0 6 (fontified nil)) . 948) (884 . 890) (#("    " 0 4 (fontified nil)) . 884) (827 . 833) (#("    " 0 4 (fontified nil)) . 827) (782 . 788) (#("    " 0 4 (fontified nil)) . 782) (768 . 774) (#("    " 0 4 (fontified nil)) . 768) (706 . 712) (#("    " 0 4 (fontified nil)) . 706) (673 . 677) (#("  " 0 2 (fontified nil)) . 673) (642 . 646) (#("  " 0 2 (fontified nil)) . 642) (553 . 557) (#("  " 0 2 (fontified nil)) . 553) (510 . 514) (#("  " 0 2 (fontified nil)) . 510) (444 . 448) (#("  " 0 2 (fontified nil)) . 444) (410 . 414) (#("  " 0 2 (fontified nil)) . 410) (367 . 371) (#("  " 0 2 (fontified nil)) . 367) (355 . 359) (#("  " 0 2 (fontified nil)) . 355) (310 . 314) (#("  " 0 2 (fontified nil)) . 310) 1412) ((310 . 312) ("    " . 310) (355 . 357) ("    " . 355) (367 . 369) ("    " . 367) (410 . 412) ("    " . 410) (444 . 446) ("    " . 444) (510 . 512) (#("    " 0 4 (face font-lock-comment-face)) . 510) (553 . 555) ("    " . 553) (642 . 644) ("    " . 642) (673 . 675) (#("    " 0 4 (face font-lock-comment-face)) . 673) (706 . 710) ("      " . 706) (768 . 772) ("      " . 768) (782 . 786) ("      " . 782) (827 . 831) (#("      " 0 6 (face font-lock-comment-face)) . 827) (884 . 888) ("      " . 884) (948 . 954) ("        " . 948) (1006 . 1014) ("          " . 1006) (1034 . 1042) ("          " . 1034) (1095 . 1103) (#("          " 0 10 (fontified t)) . 1095) (1119 . 1123) (#("      " 0 6 (fontified t)) . 1119) (1169 . 1175) (#("        " 0 8 (fontified t)) . 1169) (1211 . 1219) (#("          " 0 10 (fontified t)) . 1211) (1271 . 1277) (#("        " 0 8 (fontified t)) . 1271) (1299 . 1303) (#("      " 0 6 (fontified t)) . 1299) (1393 . 1397) (#("      " 0 6 (fontified t)) . 1393) (#("  " 0 2 (fontified t)) . 1461) (#("  " 0 2 (fontified t)) . 1471) (1498 . 1500) (#("    " 0 4 (fontified t)) . 1498) (#("  " 0 2 (fontified t)) . 1544) (#("  " 0 2 (fontified t)) . 1618) (1650 . 1652) (#("    " 0 4 (fontified t)) . 1650) (1699 . 1701) (#("    " 0 4 (fontified t)) . 1699)) (25300 65506 669737 0) 0 nil])
([nil nil ((1693 . 1694)) nil (25300 65530 901449 0) 0 nil])
nil
([nil nil ((1694 . 1695)) nil (25300 65530 901449 0) 0 nil])
([nil nil ((1702 . 1706) (#("  " 0 2 (fontified t)) . 1702) (1653 . 1657) (#("  " 0 2 (fontified t)) . 1653) (1621 . 1623) (1547 . 1549) (1501 . 1505) (#("  " 0 2 (fontified t)) . 1501) (1474 . 1476) (1464 . 1466) (1393 . 1399) (#("    " 0 4 (fontified t)) . 1393) (1299 . 1305) (#("    " 0 4 (fontified t)) . 1299) (1271 . 1279) (#("      " 0 6 (fontified t)) . 1271) (1211 . 1221) (#("        " 0 8 (fontified t)) . 1211) (1169 . 1177) (#("      " 0 6 (fontified t)) . 1169) (1119 . 1125) (#("    " 0 4 (fontified t)) . 1119) (1095 . 1105) (#("        " 0 8 (fontified t)) . 1095) (1034 . 1044) ("        " . 1034) (1006 . 1016) ("        " . 1006) (948 . 956) ("      " . 948) (884 . 890) ("    " . 884) (827 . 833) ("    " . 827) (782 . 788) ("    " . 782) (768 . 774) ("    " . 768) (706 . 712) ("    " . 706) (673 . 677) ("  " . 673) (642 . 646) ("  " . 642) (553 . 557) ("  " . 553) (510 . 514) ("  " . 510) (444 . 448) ("  " . 444) (410 . 414) ("  " . 410) (367 . 371) ("  " . 367) (355 . 359) ("  " . 355) (310 . 314) ("  " . 310) 1695) nil (25300 65530 901445 0) 0 nil])
([nil nil ((1758 . 1765) (1757 . 1759)) nil (25300 65530 901533 0) 0 nil])
([nil nil ((1765 . 1766)) nil (25301 157 649691 0) 0 nil] [nil nil ((1763 . 1773) (#("is" 0 2 (fontified t)) . -1763) (undo-tree-id9 . -2) (undo-tree-id10 . -2) 1765) ((1763 . 1765) (#("is company" 0 10 (fontified t)) . 1763) (undo-tree-id11 . -10) (undo-tree-id12 . -10)) (25300 65530 901430 0) 0 nil])
([nil nil ((1763 . 1773) (#("is-" 0 3 (fontified t)) . -1763) (undo-tree-id48 . -3) (undo-tree-id49 . -3) 1766) nil (25301 157 649690 0) 0 nil])
nil
([nil nil ((1756 . 1757)) nil (25301 157 649688 0) 0 nil])
([nil nil ((1758 . 1761) (1757 . 1759)) nil (25301 157 649687 0) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -1758) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (#("u" 0 1 (fontified t)) . -1759) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (#("s" 0 1 (fontified t)) . -1760) (undo-tree-id47 . -1) 1761) nil (25301 157 649686 0) 0 nil])
([nil nil ((1758 . 1765)) nil (25301 157 649682 0) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -1758) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (#("s" 0 1 (fontified t)) . -1759) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (#("e" 0 1 (fontified t)) . -1760) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (#("-" 0 1 (fontified t)) . -1761) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (#("p" 0 1 (fontified t)) . -1762) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (#("a" 0 1 (fontified t)) . -1763) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (#("c" 0 1 (fontified t)) . -1764) (undo-tree-id41 . -1) (undo-tree-id42 . -1) 1765) nil (25301 157 649681 0) 0 nil])
([nil nil ((1758 . 1762)) nil (25301 157 649672 0) 0 nil])
([nil nil ((#("w" 0 1 (fontified t)) . -1758) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (#("h" 0 1 (fontified t)) . -1759) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (#("e" 0 1 (fontified t)) . -1760) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t)) . -1761) (undo-tree-id27 . -1) (undo-tree-id28 . -1) 1762) nil (25301 157 649671 0) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -1757) (undo-tree-id14 . 1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . 1758) (undo-tree-id19 . 1) (undo-tree-id20 . -1)) nil (25301 157 649666 0) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . 1461) (undo-tree-id13 . -2) 1169) nil (25301 157 649659 0) 0 nil])
([nil nil ((1762 . 1767) (1772 . 1773) (#("(" 0 1 (fontified nil)) . -1772) (1772 . 1773) (t 25301 157 655988 784000)) nil (25301 280 4783 0) 0 nil])
([nil nil ((1756 . 1758)) nil (25301 280 4782 0) 0 nil])
([nil nil ((269 . 270)) nil (25301 280 4781 0) 0 nil])
([nil nil ((271 . 272) (270 . 272)) nil (25301 280 4780 0) 0 nil])
([nil nil ((271 . 275) (#("s" 0 1 (fontified t)) . -271) (undo-tree-id56 . -1) (undo-tree-id57 . -1) 272) nil (25301 280 4779 0) 0 nil])
([nil nil ((275 . 279)) nil (25301 280 4777 0) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . -278) (undo-tree-id54 . -1) (undo-tree-id55 . -1) 279) nil (25301 280 4776 0) 0 nil])
([nil nil ((278 . 279)) nil (25301 280 4774 0) 0 nil])
([nil nil ((276 . 286) (#("is-" 0 3 (fontified t)) . -276) (undo-tree-id52 . -3) (undo-tree-id53 . -3) 279) nil (25301 280 4773 0) 0 nil])
([nil nil ((286 . 288)) nil (25301 280 4770 0) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -287) (undo-tree-id50 . -1) (undo-tree-id51 . -1) 288) nil (25301 280 4769 0) 0 nil])
([nil nil ((287 . 290)) nil (25301 280 4762 0) 0 nil])
([nil nil ((291 . 292)) nil (25301 280 4758 0) 0 nil])
([nil nil ((292 . 293) (t 25301 280 10941 730000)) nil (25301 350 127731 0) 0 nil])
([nil nil ((294 . 297) (293 . 295)) nil (25301 350 127730 0) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -295) (undo-tree-id20 . -1) (#("s" 0 1 (fontified t)) . -296) (undo-tree-id21 . -1) 297) nil (25301 350 127728 0) 0 nil])
([nil nil ((295 . 296)) nil (25301 350 127726 0) 0 nil])
([nil nil ((296 . 300)) nil (25301 350 127725 0) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -294) (undo-tree-id14 . -1) (#("s" 0 1 (fontified t)) . -295) (undo-tree-id15 . -1) (#("e" 0 1 (fontified t)) . -296) (undo-tree-id16 . -1) (#("-" 0 1 (fontified t)) . -297) (undo-tree-id17 . -1) (#("p" 0 1 (fontified t)) . -298) (undo-tree-id18 . -1) (#("a" 0 1 (fontified t)) . -299) (undo-tree-id19 . -1) 300) nil (25301 350 127724 0) 0 nil])
([nil nil ((#("(" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -293) (undo-tree-id8 . -1) (undo-tree-id9 . 1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . 294) (undo-tree-id12 . 1) (undo-tree-id13 . -1)) nil (25301 350 127718 0) 0 nil])
([nil nil ((#("

" 0 1 (fontified t) 1 2 (fontified t)) . 291) (undo-tree-id6 . -2) (undo-tree-id7 . -2) 293) nil (25301 350 127714 0) 0 nil])
([nil nil ((291 . 292)) nil (25301 350 127712 0) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -287) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (#("i" 0 1 (fontified t)) . -288) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (#("l" 0 1 (fontified t)) . -289) (undo-tree-id4 . -1) (undo-tree-id5 . -1) 290) nil (25301 350 127710 0) 0 nil])
([nil nil ((287 . 288)) nil (25301 350 127683 0) 0 nil])
([nil nil ((#(";" 0 1 (face font-lock-comment-delimiter-face fontified t)) . -1777) (undo-tree-id11 . -1) (#(";" 0 1 (face font-lock-comment-delimiter-face fontified t)) . -1778) (undo-tree-id12 . -1) 1779 (t 25301 350 133832 488000)) nil (25301 664 121962 0) 0 nil])
([nil nil ((1799 . 1802)) nil (25301 664 121960 0) 0 nil])
([nil nil ((1802 . 1804)) nil (25301 664 121959 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 3457 . 3458) (nil fontified nil 1803 . 3458) (1803 . 3458)) nil (25301 664 121959 0) 0 nil])
([nil nil ((3458 . 3463)) nil (25301 664 121958 0) 0 nil])
([nil nil ((3464 . 3467)) nil (25301 664 121957 0) 0 nil])
([nil nil ((3528 . 3534) (#("  " 0 2 (fontified nil)) . 3528) (3472 . 3478) (#("  " 0 2 (fontified nil)) . 3472) (3414 . 3420) (#("  " 0 2 (fontified nil)) . 3414) (3358 . 3364) (#("  " 0 2 (fontified nil)) . 3358) (3311 . 3317) (#("  " 0 2 (fontified nil)) . 3311) (3227 . 3233) (#("  " 0 2 (fontified nil)) . 3227) (3147 . 3153) (#("  " 0 2 (fontified nil)) . 3147) (3104 . 3110) (#("  " 0 2 (fontified nil)) . 3104) (3052 . 3058) (#("  " 0 2 (fontified nil)) . 3052) (3040 . 3046) (#("  " 0 2 (fontified nil)) . 3040) (3017 . 3021) (2974 . 2978) (2947 . 2952) (#("  " 0 2 (fontified nil)) . 2947) (2936 . 2941) (#("  " 0 2 (fontified nil)) . 2936) (2895 . 2900) (#("  " 0 2 (fontified nil)) . 2895) (2825 . 2830) (#("  " 0 2 (fontified nil)) . 2825) (2781 . 2786) (#("  " 0 2 (fontified nil)) . 2781) (2737 . 2742) (#("  " 0 2 (fontified nil)) . 2737) (2696 . 2701) (#("  " 0 2 (fontified nil)) . 2696) (2656 . 2661) (#("  " 0 2 (fontified nil)) . 2656) (2611 . 2616) (#("  " 0 2 (fontified nil)) . 2611) (2550 . 2555) (#("  " 0 2 (fontified nil)) . 2550) (2469 . 2474) (#("  " 0 2 (fontified nil)) . 2469) (2391 . 2396) (#("  " 0 2 (fontified nil)) . 2391) (2318 . 2323) (#("  " 0 2 (fontified nil)) . 2318) (2242 . 2247) (#("  " 0 2 (fontified nil)) . 2242) (2162 . 2167) (#("  " 0 2 (fontified nil)) . 2162) (2086 . 2091) (#("  " 0 2 (fontified nil)) . 2086) (2018 . 2023) (#("  " 0 2 (fontified nil)) . 2018) (1953 . 1958) (#("  " 0 2 (fontified nil)) . 1953) (1870 . 1875) (#("  " 0 2 (fontified nil)) . 1870) (1854 . 1859) (#("  " 0 2 (fontified nil)) . 1854) (1822 . 1827) (#("  " 0 2 (fontified nil)) . 1822) 3467) nil (25301 664 121953 0) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -1802) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) 1803) nil (25301 664 121941 0) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -3573) (undo-tree-id3 . -1) (undo-tree-id4 . 1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) 3574) nil (25301 664 121937 0) 0 nil])
([nil nil ((#("
    " 0 1 (fontified t) 1 5 (fontified t)) . 3568) (undo-tree-id0 . -5) (undo-tree-id1 . -1) (undo-tree-id2 . -5) 3573) nil (25301 664 121931 0) 0 nil])
([nil nil ((2973 . 2975) (#("  " 0 2 (fontified nil)) . 2972) (2972 . 2974) (2972 . 2973) (t 25301 664 128590 675000)) nil (25301 1155 198019 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 3245 . 3246) (nil fontified nil 2975 . 3246) (2975 . 3246)) nil (25301 1155 198018 0) 0 nil])
([nil nil ((3246 . 3249)) nil (25301 1155 198017 0) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . -3780) (#("  " 0 2 (fontified t)) . -3726) (#("  " 0 2 (fontified t)) . -3670) (#("  " 0 2 (fontified t)) . -3616) (#("  " 0 2 (fontified t)) . -3571) (#("  " 0 2 (fontified t)) . -3489) (#("  " 0 2 (fontified t)) . -3411) (#("  " 0 2 (fontified t)) . -3370) (#("  " 0 2 (fontified t)) . -3320) (#("  " 0 2 (fontified t)) . -3310) (#("  " 0 2 (fontified t)) . -3287) (#("  " 0 2 (fontified t)) . -3246) (3166 . 3170) (#("  " 0 2 (fontified t)) . 3166) (3154 . 3158) (#("  " 0 2 (fontified t)) . 3154) (3110 . 3114) (#("  " 0 2 (fontified t)) . 3110) (3070 . 3082) (#("         " 0 9 (fontified t)) . 3070) (3030 . 3034) (#("  " 0 2 (fontified t)) . 3030) (3004 . 3008) (#("  " 0 2 (fontified t)) . 3004) (2981 . 2983) (#(" " 0 1 (fontified t)) . -2930) (#(" " 0 1 (fontified t)) . -2920) (#(" " 0 1 (fontified t)) . -2880) (#(" " 0 1 (fontified t)) . -2811) (#(" " 0 1 (fontified t)) . -2768) (#(" " 0 1 (fontified t)) . -2725) (#(" " 0 1 (fontified t)) . -2685) (#(" " 0 1 (fontified t)) . -2646) (#(" " 0 1 (fontified t)) . -2602) (#(" " 0 1 (fontified t)) . -2542) (#(" " 0 1 (fontified t)) . -2462) (#(" " 0 1 (fontified t)) . -2385) (#(" " 0 1 (fontified t)) . -2313) (#(" " 0 1 (fontified t)) . -2238) (#(" " 0 1 (fontified t)) . -2159) (#(" " 0 1 (fontified t)) . -2084) (#(" " 0 1 (fontified t)) . -2017) (#(" " 0 1 (fontified t)) . -1953) (#(" " 0 1 (fontified t)) . -1871) (#(" " 0 1 (fontified t)) . -1856) (#(" " 0 1 (fontified t)) . -1825) 3249) nil (25301 1155 198014 0) 0 nil])
([nil nil ((#("(use-package orderless
  :ensure t
  :config (setq completion-styles '(orderless)))" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t) 1 12 (face font-lock-keyword-face fontified t) 12 13 (fontified t) 13 22 (face font-lock-constant-face fontified t) 22 25 (fontified t) 25 32 (face font-lock-builtin-face fontified t) 32 37 (fontified t) 37 44 (face font-lock-builtin-face fontified t) 44 45 (fontified t) 45 46 (face (rainbow-delimiters-depth-2-face) fontified t) 46 50 (face font-lock-keyword-face fontified t) 50 70 (fontified t) 70 71 (face (rainbow-delimiters-depth-3-face) fontified t) 71 80 (fontified t) 80 81 (face (rainbow-delimiters-depth-3-face) fontified t) 81 82 (face (rainbow-delimiters-depth-2-face) fontified t) 82 83 (face (rainbow-delimiters-depth-1-face) fontified t)) . 4010) (undo-tree-id18 . -23) (undo-tree-id19 . -83) (undo-tree-id20 . 83) (undo-tree-id21 . -1) (undo-tree-id22 . 1) (undo-tree-id23 . -83) (undo-tree-id24 . -83)) nil (25301 1155 198006 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 4464 . 4465) (nil fontified nil 4010 . 4465) (4010 . 4465)) nil (25301 1155 198002 0) 0 nil])
([nil nil ((2925 . 2930)) nil (25301 1155 198001 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 2973 . 2974) (nil fontified nil 2930 . 2974) (2930 . 2974)) nil (25301 1155 198000 0) 0 nil])
([nil nil ((2976 . 2980) (#("    " 0 4 (fontified nil)) . 2975) (undo-tree-id17 . -4) (2974 . 2980)) nil (25301 1155 197999 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 3204 . 3205) (nil fontified nil 2980 . 3205) (2980 . 3205)) nil (25301 1155 197998 0) 0 nil])
([nil nil ((3229 . 3234)) nil (25301 1155 197997 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 3269 . 3270) (nil fontified nil 3234 . 3270) (3234 . 3270)) nil (25301 1155 197996 0) 0 nil])
([nil nil ((3270 . 3275)) nil (25301 1155 197995 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 4107 . 4108) (nil fontified nil 3275 . 4108) (3275 . 4108)) nil (25301 1155 197995 0) 0 nil])
([nil nil ((4108 . 4113)) nil (25301 1155 197994 0) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -5549) (#("    " 0 4 (fontified t)) . -5512) (3786 . 3787) 4113) nil (25301 1155 197993 0) 0 nil])
([nil nil ((#("
    " 0 5 (fontified t)) . 4109) (undo-tree-id15 . -5) (undo-tree-id16 . -1) 4114) nil (25301 1155 197992 0) 0 nil])
([nil nil ((3282 . 3287)) nil (25301 1155 197990 0) 0 nil])
([nil nil ((3287 . 3291)) nil (25301 1155 197989 0) 0 nil])
([nil nil ((#("y" 0 1 (face font-lock-comment-face fontified t)) . -3290) (undo-tree-id13 . -1) (undo-tree-id14 . -1) 3291) nil (25301 1155 197988 0) 0 nil])
([nil nil ((3290 . 3295)) nil (25301 1155 197982 0) 0 nil])
([nil nil ((3295 . 3297)) nil (25301 1155 197981 0) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . 4416) 3297) nil (25301 1155 197977 0) 0 nil])
([nil nil ((3675 . 3679) (#("    " 0 4 (face font-lock-comment-face fontified nil)) . 3674) (3674 . 3678) (3674 . 3675) (t 25301 1155 204348 492000)) nil (25301 1604 461975 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 3688 . 3689) (nil fontified nil 3682 . 3689) (nil fontified nil 3679 . 3682) (3679 . 3689)) nil (25301 1604 461973 0) 0 nil])
([nil nil ((5019 . 5021)) nil (25301 1604 461972 0) 0 nil])
([nil nil ((#("；" 0 1 (fontified t)) . -5019) (undo-tree-id332 . -1) (#("；" 0 1 (fontified t)) . -5020) (undo-tree-id333 . -1) 5021) nil (25301 1604 461971 0) 0 nil])
([nil nil ((5019 . 5021)) nil (25301 1604 461969 0) 0 nil])
([nil nil ((#(";;tab键补全
;;(setq tab-always-indent 'complete)" 0 2 (face font-lock-comment-delimiter-face fontified t) 2 9 (face font-lock-comment-face fontified t) 9 11 (face font-lock-comment-delimiter-face fontified t) 11 12 (face font-lock-comment-face fontified t) 12 16 (face font-lock-comment-face fontified t) 16 44 (face font-lock-comment-face fontified t) 44 45 (face font-lock-comment-face fontified t)) . 5010) (undo-tree-id328 . -9) (undo-tree-id329 . -45) (undo-tree-id330 . -11) (undo-tree-id331 . -45)) nil (25301 1604 461969 0) 0 nil])
([nil nil ((#("


" 0 1 (fontified t) 1 3 (fontified t)) . 5007) (undo-tree-id324 . -3) (undo-tree-id325 . -3) (undo-tree-id326 . -3) (undo-tree-id327 . -3) 5010) nil (25301 1604 461962 0) 0 nil])
([nil nil ((#("onfig" 0 5 (face font-lock-builtin-face fontified t)) . 382) (undo-tree-id322 . -5) (undo-tree-id323 . -5)) nil (25301 1604 461960 0) 0 nil])
([nil nil ((#("c" 0 1 (face font-lock-builtin-face fontified t)) . -381) (undo-tree-id320 . -1) (undo-tree-id321 . -1) 382) nil (25301 1604 461958 0) 0 nil])
([nil nil ((381 . 385)) nil (25301 1604 462269 0) 0 nil])
([nil nil ((661 . 665) (#("    " 0 4 (face font-lock-comment-face fontified nil)) . 660) (660 . 664) (660 . 661)) nil (25301 1624 414204 0) 0 nil] [nil nil ((381 . 392) (#("init" 0 4 (face font-lock-builtin-face fontified t)) . -381) (undo-tree-id25 . -4) (undo-tree-id26 . -4) (undo-tree-id27 . -4) (undo-tree-id28 . -4) (undo-tree-id29 . -4) (undo-tree-id30 . -4) (undo-tree-id31 . -4) (undo-tree-id32 . -4) (undo-tree-id33 . -4) (undo-tree-id34 . -4) (undo-tree-id35 . -4) (undo-tree-id36 . -4) (undo-tree-id37 . -4) (undo-tree-id38 . -4) (undo-tree-id39 . -4) (undo-tree-id40 . -4) (undo-tree-id41 . -4) (undo-tree-id42 . -4) (undo-tree-id43 . -4) (undo-tree-id44 . -4) (undo-tree-id45 . -4) (undo-tree-id46 . -4) (undo-tree-id47 . -4) (undo-tree-id48 . -4) (undo-tree-id49 . -4) (undo-tree-id50 . -4) (undo-tree-id51 . -4) (undo-tree-id52 . -4) (undo-tree-id53 . -4) (undo-tree-id54 . -4) (undo-tree-id55 . -4) (undo-tree-id56 . -4) (undo-tree-id57 . -4) (undo-tree-id58 . -4) (undo-tree-id59 . -4) (undo-tree-id60 . -4) (undo-tree-id61 . -4) (undo-tree-id62 . -4) (undo-tree-id63 . -4) (undo-tree-id64 . -4) (undo-tree-id65 . -4) (undo-tree-id66 . -4) (undo-tree-id67 . -4) (undo-tree-id68 . -4) (undo-tree-id69 . -4) (undo-tree-id70 . -4) (undo-tree-id71 . -4) (undo-tree-id72 . -4) (undo-tree-id73 . -4) (undo-tree-id74 . -4) (undo-tree-id75 . -4) (undo-tree-id76 . -4) (undo-tree-id77 . -4) (undo-tree-id78 . -4) (undo-tree-id79 . -4) (undo-tree-id80 . -4) (undo-tree-id81 . -4) (undo-tree-id82 . -4) (undo-tree-id83 . -4) (undo-tree-id84 . -4) (undo-tree-id85 . -4) (undo-tree-id86 . -4) (undo-tree-id87 . -4) (undo-tree-id88 . -4) (undo-tree-id89 . -4) (undo-tree-id90 . -4) (undo-tree-id91 . -4) (undo-tree-id92 . -4) (undo-tree-id93 . -4) (undo-tree-id94 . -4) (undo-tree-id95 . -4) (undo-tree-id96 . -4) (undo-tree-id97 . -4) (undo-tree-id98 . -4) (undo-tree-id99 . -4) (undo-tree-id100 . -4) (undo-tree-id101 . -4) (undo-tree-id102 . -4) (undo-tree-id103 . -4) (undo-tree-id104 . -4) (undo-tree-id105 . -4) (undo-tree-id106 . -4) (undo-tree-id107 . -4) (undo-tree-id108 . -4) (undo-tree-id109 . -4) (undo-tree-id110 . -4) (undo-tree-id111 . -4) (undo-tree-id112 . -4) (undo-tree-id113 . -4) (undo-tree-id114 . -4) (undo-tree-id115 . -4) (undo-tree-id116 . -4) (undo-tree-id117 . -4) (undo-tree-id118 . -4) (undo-tree-id119 . -4) (undo-tree-id120 . -4) (undo-tree-id121 . -4) (undo-tree-id122 . -4) (undo-tree-id123 . -4) (undo-tree-id124 . -4) (undo-tree-id125 . -4) (undo-tree-id126 . -4) (undo-tree-id127 . -4) (undo-tree-id128 . -4) (undo-tree-id129 . -4) (undo-tree-id130 . -4) (undo-tree-id131 . -4) (undo-tree-id132 . -4) (undo-tree-id133 . -4) (undo-tree-id134 . -4) (undo-tree-id135 . -4) (undo-tree-id136 . -4) (undo-tree-id137 . -4) (undo-tree-id138 . -4) (undo-tree-id139 . -4) (undo-tree-id140 . -4) (undo-tree-id141 . -4) (undo-tree-id142 . -4) (undo-tree-id143 . -4) (undo-tree-id144 . -4) (undo-tree-id145 . -4) (undo-tree-id146 . -4) (undo-tree-id147 . -4) (undo-tree-id148 . -4) (undo-tree-id149 . -4) (undo-tree-id150 . -4) (undo-tree-id151 . -4) (undo-tree-id152 . -4) (undo-tree-id153 . -4) (undo-tree-id154 . -4) (undo-tree-id155 . -4) (undo-tree-id156 . -4) (undo-tree-id157 . -4) (undo-tree-id158 . -4) (undo-tree-id159 . -4) (undo-tree-id160 . -4) (undo-tree-id161 . -4) (undo-tree-id162 . -4) (undo-tree-id163 . -4) (undo-tree-id164 . -4) (undo-tree-id165 . -4) (undo-tree-id166 . -4) (undo-tree-id167 . -4) (undo-tree-id168 . -4) (undo-tree-id169 . -4) (undo-tree-id170 . -4) (undo-tree-id171 . -4) (undo-tree-id172 . -4) (undo-tree-id173 . -4) (undo-tree-id174 . -4) (undo-tree-id175 . -4) (undo-tree-id176 . -4) (undo-tree-id177 . -4) (undo-tree-id178 . -4) (undo-tree-id179 . -4) (undo-tree-id180 . -4) (undo-tree-id181 . -4) (undo-tree-id182 . -4) (undo-tree-id183 . -4) (undo-tree-id184 . -4) (undo-tree-id185 . -4) (undo-tree-id186 . -4) (undo-tree-id187 . -4) (undo-tree-id188 . -4) (undo-tree-id189 . -4) (undo-tree-id190 . -4) (undo-tree-id191 . -4) (undo-tree-id192 . -4) (undo-tree-id193 . -4) (undo-tree-id194 . -4) (undo-tree-id195 . -4) (undo-tree-id196 . -4) (undo-tree-id197 . -4) (undo-tree-id198 . -4) (undo-tree-id199 . -4) (undo-tree-id200 . -4) (undo-tree-id201 . -4) (undo-tree-id202 . -4) (undo-tree-id203 . -4) (undo-tree-id204 . -4) (undo-tree-id205 . -4) (undo-tree-id206 . -4) (undo-tree-id207 . -4) (undo-tree-id208 . -4) (undo-tree-id209 . -4) (undo-tree-id210 . -4) (undo-tree-id211 . -4) (undo-tree-id212 . -4) (undo-tree-id213 . -4) (undo-tree-id214 . -4) (undo-tree-id215 . -4) (undo-tree-id216 . -4) (undo-tree-id217 . -4) (undo-tree-id218 . -4) (undo-tree-id219 . -4) (undo-tree-id220 . -4) (undo-tree-id221 . -4) (undo-tree-id222 . -4) (undo-tree-id223 . -4) (undo-tree-id224 . -4) (undo-tree-id225 . -4) (undo-tree-id226 . -4) (undo-tree-id227 . -4) (undo-tree-id228 . -4) (undo-tree-id229 . -4) (undo-tree-id230 . -4) (undo-tree-id231 . -4) (undo-tree-id232 . -4) (undo-tree-id233 . -4) (undo-tree-id234 . -4) (undo-tree-id235 . -4) (undo-tree-id236 . -4) (undo-tree-id237 . -4) (undo-tree-id238 . -4) (undo-tree-id239 . -4) (undo-tree-id240 . -4) (undo-tree-id241 . -4) (undo-tree-id242 . -4) (undo-tree-id243 . -4) (undo-tree-id244 . -4) (undo-tree-id245 . -4) (undo-tree-id246 . -4) (undo-tree-id247 . -4) (undo-tree-id248 . -4) (undo-tree-id249 . -4) (undo-tree-id250 . -4) (undo-tree-id251 . -4) (undo-tree-id252 . -4) (undo-tree-id253 . -4) (undo-tree-id254 . -4) (undo-tree-id255 . -4) (undo-tree-id256 . -4) (undo-tree-id257 . -4) (undo-tree-id258 . -4) (undo-tree-id259 . -4) (undo-tree-id260 . -4) (undo-tree-id261 . -4) (undo-tree-id262 . -4) (undo-tree-id263 . -4) (undo-tree-id264 . -4) (undo-tree-id265 . -4) (undo-tree-id266 . -4) (undo-tree-id267 . -4) (undo-tree-id268 . -4) (undo-tree-id269 . -4) (undo-tree-id270 . -4) (undo-tree-id271 . -4) (undo-tree-id272 . -4) (undo-tree-id273 . -4) (undo-tree-id274 . -4) (undo-tree-id275 . -4) (undo-tree-id276 . -4) (undo-tree-id277 . -4) (undo-tree-id278 . -4) (undo-tree-id279 . -4) (undo-tree-id280 . -4) (undo-tree-id281 . -4) (undo-tree-id282 . -4) (undo-tree-id283 . -4) (undo-tree-id284 . -4) (undo-tree-id285 . -4) (undo-tree-id286 . -4) (undo-tree-id287 . -4) (undo-tree-id288 . -4) (undo-tree-id289 . -4) (undo-tree-id290 . -4) (undo-tree-id291 . -4) (undo-tree-id292 . -4) (undo-tree-id293 . -4) (undo-tree-id294 . -4) (undo-tree-id295 . -4) (undo-tree-id296 . -4) (undo-tree-id297 . -4) (undo-tree-id298 . -4) (undo-tree-id299 . -4) (undo-tree-id300 . -4) (undo-tree-id301 . -4) (undo-tree-id302 . -4) (undo-tree-id303 . -4) (undo-tree-id304 . -4) (undo-tree-id305 . -4) (undo-tree-id306 . -4) (undo-tree-id307 . -4) (undo-tree-id308 . -4) (undo-tree-id309 . -4) (undo-tree-id310 . -4) (undo-tree-id311 . -4) (undo-tree-id312 . -4) (undo-tree-id313 . -4) (undo-tree-id314 . -4) (undo-tree-id315 . -4) (undo-tree-id316 . -4) (undo-tree-id317 . -4) (undo-tree-id318 . -4) (undo-tree-id319 . -4) 385) ((381 . 385) (#("init (setq)" 0 4 (face font-lock-builtin-face fontified t) 4 5 (fontified t) 5 6 (face (rainbow-delimiters-depth-3-face) fontified t) 6 10 (face font-lock-keyword-face fontified t) 10 11 (face (rainbow-delimiters-depth-3-face) fontified t)) . 381) (undo-tree-id334 . -10) (undo-tree-id335 . 6) (undo-tree-id336 . -6) (undo-tree-id337 . 1) (undo-tree-id338 . -11) (undo-tree-id339 . -10)) (25301 1604 461948 0) 0 nil])
([nil nil ((665 . 669)) nil (25301 1624 414203 0) 0 nil])
nil
([nil nil ((666 . 672) (#("con" 0 3 (face font-lock-builtin-face fontified t)) . -666) (undo-tree-id497 . -3) (undo-tree-id498 . -3) 669) nil (25301 1624 414202 0) 0 nil])
([nil nil ((672 . 677)) nil (25301 1624 414200 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 721 . 722) (nil fontified nil 721 . 722) (nil fontified nil 693 . 721) (nil fontified nil 689 . 693) (nil fontified nil 688 . 689) (nil fontified nil 686 . 688) (nil fontified nil 679 . 686) (nil fontified nil 677 . 679) (677 . 722)) nil (25301 1624 414200 0) 0 nil])
([nil nil ((727 . 731) (686 . 690) (722 . 723)) nil (25301 1624 414198 0) 0 nil])
([nil nil ((#(";" 0 1 (face font-lock-comment-delimiter-face fontified t)) . -690) (undo-tree-id495 . -1) (#(";" 0 1 (face font-lock-comment-delimiter-face fontified t)) . -691) (undo-tree-id496 . -1) 692) nil (25301 1624 414197 0) 0 nil])
([nil nil ((#(";;tab键补全
    (setq tab-always-indent 'complete)" 0 2 (face font-lock-comment-delimiter-face fontified t) 2 9 (face font-lock-comment-face fontified t) 9 13 (fontified t) 13 14 (face (rainbow-delimiters-depth-3-face) fontified t) 14 18 (face font-lock-keyword-face fontified t) 18 46 (fontified t) 46 47 (face (rainbow-delimiters-depth-3-face) rear-nonsticky t fontified t)) . 677) (undo-tree-id492 . -9) (undo-tree-id493 . -47) (undo-tree-id494 . -47)) nil (25301 1624 414195 0) 0 nil])
([nil nil ((#("
    " 0 1 (fontified t) 1 5 (fontified t)) . 672) (undo-tree-id488 . -1) (undo-tree-id489 . -5) (undo-tree-id490 . -5) (undo-tree-id491 . -5) 677) nil (25301 1624 414193 0) 0 nil])
([nil nil ((nil fontified nil 723 . 724) (nil fontified nil 695 . 723) (nil fontified nil 691 . 695) (nil fontified nil 690 . 691) (nil fontified nil 686 . 690) (nil fontified nil 679 . 686) (nil fontified nil 677 . 679) (677 . 724)) nil (25301 1624 414190 0) 0 nil])
([nil nil ((724 . 729)) nil (25301 1624 414188 0) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . 725) (undo-tree-id340 . -4) (undo-tree-id341 . -4) (undo-tree-id342 . -4) (undo-tree-id343 . -4) (undo-tree-id344 . -4) (undo-tree-id345 . -4) (undo-tree-id346 . -4) (undo-tree-id347 . -4) (undo-tree-id348 . -4) (undo-tree-id349 . -4) (undo-tree-id350 . -4) (undo-tree-id351 . -4) (undo-tree-id352 . -4) (undo-tree-id353 . -4) (undo-tree-id354 . -4) (undo-tree-id355 . -4) (undo-tree-id356 . -4) (undo-tree-id357 . -4) (undo-tree-id358 . -4) (undo-tree-id359 . -4) (undo-tree-id360 . -4) (undo-tree-id361 . -4) (undo-tree-id362 . -4) (undo-tree-id363 . -4) (undo-tree-id364 . -4) (undo-tree-id365 . -4) (undo-tree-id366 . -4) (undo-tree-id367 . -4) (undo-tree-id368 . -4) (undo-tree-id369 . -4) (undo-tree-id370 . -4) (undo-tree-id371 . -4) (undo-tree-id372 . -4) (undo-tree-id373 . -4) (undo-tree-id374 . -4) (undo-tree-id375 . -4) (undo-tree-id376 . -4) (undo-tree-id377 . -4) (undo-tree-id378 . -4) (undo-tree-id379 . -4) (undo-tree-id380 . -4) (undo-tree-id381 . -4) (undo-tree-id382 . -4) (undo-tree-id383 . -4) (undo-tree-id384 . -4) (undo-tree-id385 . -4) (undo-tree-id386 . -4) (undo-tree-id387 . -4) (undo-tree-id388 . -4) (undo-tree-id389 . -4) (undo-tree-id390 . -4) (undo-tree-id391 . -4) (undo-tree-id392 . -4) (undo-tree-id393 . -4) (undo-tree-id394 . -4) (undo-tree-id395 . -4) (undo-tree-id396 . -4) (undo-tree-id397 . -4) (undo-tree-id398 . -4) (undo-tree-id399 . -4) (undo-tree-id400 . -4) (undo-tree-id401 . -4) (undo-tree-id402 . -4) (undo-tree-id403 . -4) (undo-tree-id404 . -4) (undo-tree-id405 . -4) (undo-tree-id406 . -4) (undo-tree-id407 . -4) (undo-tree-id408 . -4) (undo-tree-id409 . -4) (undo-tree-id410 . -4) (undo-tree-id411 . -4) (undo-tree-id412 . -4) (undo-tree-id413 . -4) (undo-tree-id414 . -4) (undo-tree-id415 . -4) (undo-tree-id416 . -4) (undo-tree-id417 . -4) (undo-tree-id418 . -4) (undo-tree-id419 . -4) (undo-tree-id420 . -4) (undo-tree-id421 . -4) (undo-tree-id422 . -4) (undo-tree-id423 . -4) (undo-tree-id424 . -4) (undo-tree-id425 . -4) (undo-tree-id426 . -4) (undo-tree-id427 . -4) (undo-tree-id428 . -4) (undo-tree-id429 . -4) (undo-tree-id430 . -4) (undo-tree-id431 . -4) (undo-tree-id432 . -4) (undo-tree-id433 . -4) (undo-tree-id434 . -4) (undo-tree-id435 . -4) (undo-tree-id436 . -4) (undo-tree-id437 . -4) (undo-tree-id438 . -4) (undo-tree-id439 . -4) (undo-tree-id440 . -4) (undo-tree-id441 . -4) (undo-tree-id442 . -4) (undo-tree-id443 . -4) (undo-tree-id444 . -4) (undo-tree-id445 . -4) (undo-tree-id446 . -4) (undo-tree-id447 . -4) (undo-tree-id448 . -4) (undo-tree-id449 . -4) (undo-tree-id450 . -4) (undo-tree-id451 . -4) (undo-tree-id452 . -4) (undo-tree-id453 . -4) (undo-tree-id454 . -4) (undo-tree-id455 . -4) (undo-tree-id456 . -4) (undo-tree-id457 . -4) (undo-tree-id458 . -4) (undo-tree-id459 . -4) (undo-tree-id460 . -4) (undo-tree-id461 . -4) (undo-tree-id462 . -4) (undo-tree-id463 . -4) (undo-tree-id464 . -4) (undo-tree-id465 . -4) (undo-tree-id466 . -4) (undo-tree-id467 . -4) (undo-tree-id468 . -4) (undo-tree-id469 . -4) (undo-tree-id470 . -4) (undo-tree-id471 . -4) (undo-tree-id472 . -4) (undo-tree-id473 . -4) (undo-tree-id474 . -4) (undo-tree-id475 . -4) (undo-tree-id476 . -4) (undo-tree-id477 . -4) (undo-tree-id478 . -4) (undo-tree-id479 . -4) (undo-tree-id480 . -4) (undo-tree-id481 . -4) (undo-tree-id482 . -4) (undo-tree-id483 . -4) (undo-tree-id484 . -4) (undo-tree-id485 . -4) (undo-tree-id486 . -4) (undo-tree-id487 . -4) 729) nil (25301 1624 414183 0) 0 nil])
([nil nil ((4492 . 4497) (t 25301 1624 421675 597000)) nil (25301 1662 277048 0) 0 nil])
([nil nil ((#("
    " 0 5 (fontified t)) . 4492) (undo-tree-id503 . -1) (undo-tree-id504 . -5) 4497) nil (25301 1662 277046 0) 0 nil])
([nil nil ((5068 . 5070) (#("  " 0 2 (fontified nil)) . 5067) (undo-tree-id502 . -2) (5066 . 5070)) nil (25301 1662 277044 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 6181 . 6182) (nil fontified nil 5070 . 6182) (5070 . 6182)) nil (25301 1662 277043 0) 0 nil])
([nil nil ((#("
    " 0 5 (fontified t)) . 6176) (undo-tree-id499 . -1) (undo-tree-id500 . -5) (undo-tree-id501 . -5) 6181) nil (25301 1662 277039 0) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -287) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) 288 (t 25301 1662 283408 468000)) nil (25301 1672 882010 0) 0 nil])
([nil nil ((287 . 290)) nil (25301 1672 881999 0) 0 nil])
([nil nil ((293 . 295) (292 . 294) (t 25301 1672 888850 937000)) nil (25301 1726 587872 0) 0 nil])
([nil nil ((295 . 296)) nil (25301 1726 587872 0) 0 nil])
([nil nil ((#("q" 0 1 (fontified t)) . -295) (undo-tree-id135 . -1) 296) nil (25301 1726 587871 0) 0 nil])
([nil nil ((295 . 297)) nil (25301 1726 587870 0) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -293) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (#("e" 0 1 (fontified t)) . -294) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (#("t" 0 1 (fontified t)) . -295) (undo-tree-id133 . -1) (#("q" 0 1 (fontified t face font-lock-keyword-face)) . -296) (undo-tree-id134 . -1) 297) nil (25301 1726 587868 0) 0 nil])
([nil nil ((293 . 296)) nil (25301 1726 587863 0) 0 nil])
([nil nil ((296 . 297)) nil (25301 1726 587863 0) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -296) (undo-tree-id126 . -1) 297) nil (25301 1726 587862 0) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -294) (undo-tree-id124 . -1) (#("s" 0 1 (fontified t)) . -295) (undo-tree-id125 . -1) 296) nil (25301 1726 587860 0) 0 nil])
([nil nil ((294 . 296)) nil (25301 1726 587857 0) 0 nil])
([nil nil ((298 . 304) (296 . 298)) nil (25301 1726 587857 0) 0 nil])
([nil nil ((304 . 308)) nil (25301 1726 587855 0) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face font-lock-constant-face)) . -305) (undo-tree-id121 . -1) (#("s" 0 1 (fontified t face font-lock-constant-face)) . -306) (undo-tree-id122 . -1) (#("d" 0 1 (fontified t face font-lock-constant-face)) . -307) (undo-tree-id123 . -1) 308) nil (25301 1726 587854 0) 0 nil])
([nil nil ((305 . 308)) nil (25301 1726 587851 0) 0 nil])
([nil nil ((#("c" 0 1 (fontified t face font-lock-constant-face)) . -305) (undo-tree-id118 . -1) (#("o" 0 1 (fontified t face font-lock-constant-face)) . -306) (undo-tree-id119 . -1) (#("m" 0 1 (fontified t face font-lock-constant-face)) . -307) (undo-tree-id120 . -1) 308) nil (25301 1726 587850 0) 0 nil])
([nil nil ((#("(use-package )" 0 1 (fontified t) 1 12 (fontified t face font-lock-keyword-face) 12 13 (fontified t) 13 14 (fontified t)) . 292) (undo-tree-id0 . -1) (undo-tree-id1 . 14) (undo-tree-id2 . -1) (undo-tree-id3 . 1) (undo-tree-id4 . -14) (undo-tree-id5 . -1) (undo-tree-id6 . -13) (undo-tree-id7 . -13) (undo-tree-id8 . -13) (undo-tree-id9 . -13) (undo-tree-id10 . -13) (undo-tree-id11 . -13) (undo-tree-id12 . -13) (undo-tree-id13 . -13) (undo-tree-id14 . -13) (undo-tree-id15 . -13) (undo-tree-id16 . -13) (undo-tree-id17 . -13) (undo-tree-id18 . -13) (undo-tree-id19 . -13) (undo-tree-id20 . -13) (undo-tree-id21 . -13) (undo-tree-id22 . -13) (undo-tree-id23 . -13) (undo-tree-id24 . -13) (undo-tree-id25 . -13) (undo-tree-id26 . -13) (undo-tree-id27 . -13) (undo-tree-id28 . -13) (undo-tree-id29 . -13) (undo-tree-id30 . -13) (undo-tree-id31 . -13) (undo-tree-id32 . -13) (undo-tree-id33 . -13) (undo-tree-id34 . -13) (undo-tree-id35 . -13) (undo-tree-id36 . -13) (undo-tree-id37 . -13) (undo-tree-id38 . -13) (undo-tree-id39 . -13) (undo-tree-id40 . -13) (undo-tree-id41 . -13) (undo-tree-id42 . -13) (undo-tree-id43 . -13) (undo-tree-id44 . -13) (undo-tree-id45 . -13) (undo-tree-id46 . -13) (undo-tree-id47 . -13) (undo-tree-id48 . -13) (undo-tree-id49 . -13) (undo-tree-id50 . -13) (undo-tree-id51 . -13) (undo-tree-id52 . -13) (undo-tree-id53 . -13) (undo-tree-id54 . -13) (undo-tree-id55 . -13) (undo-tree-id56 . -13) (undo-tree-id57 . -13) (undo-tree-id58 . -13) (undo-tree-id59 . -13) (undo-tree-id60 . -13) (undo-tree-id61 . -13) (undo-tree-id62 . -13) (undo-tree-id63 . -13) (undo-tree-id64 . -13) (undo-tree-id65 . -13) (undo-tree-id66 . -13) (undo-tree-id67 . -13) (undo-tree-id68 . -13) (undo-tree-id69 . -13) (undo-tree-id70 . -13) (undo-tree-id71 . -13) (undo-tree-id72 . -13) (undo-tree-id73 . -13) (undo-tree-id74 . -13) (undo-tree-id75 . -13) (undo-tree-id76 . -13) (undo-tree-id77 . -13) (undo-tree-id78 . -13) (undo-tree-id79 . -13) (undo-tree-id80 . -13) (undo-tree-id81 . -13) (undo-tree-id82 . -13) (undo-tree-id83 . -13) (undo-tree-id84 . -13) (undo-tree-id85 . -13) (undo-tree-id86 . -13) (undo-tree-id87 . -13) (undo-tree-id88 . -13) (undo-tree-id89 . -13) (undo-tree-id90 . -13) (undo-tree-id91 . -13) (undo-tree-id92 . -13) (undo-tree-id93 . -13) (undo-tree-id94 . -13) (undo-tree-id95 . -13) (undo-tree-id96 . -13) (undo-tree-id97 . -13) (undo-tree-id98 . -13) (undo-tree-id99 . -13) (undo-tree-id100 . -13) (undo-tree-id101 . -13) (undo-tree-id102 . -13) (undo-tree-id103 . -13) (undo-tree-id104 . -13) (undo-tree-id105 . -13) (undo-tree-id106 . -13) (undo-tree-id107 . -13) (undo-tree-id108 . -13) (undo-tree-id109 . -13) (undo-tree-id110 . -13) (undo-tree-id111 . -13) (undo-tree-id112 . -13) (undo-tree-id113 . -13) (undo-tree-id114 . -13) (undo-tree-id115 . -13) (undo-tree-id116 . -13) (undo-tree-id117 . -14)) nil (25301 1726 587842 0) 0 nil])
([nil nil ((201 . 202) (t 25301 1726 595466 684000)) nil (25301 1851 646970 0) 0 nil])
([nil nil ((203 . 206) (202 . 204)) nil (25301 1851 646969 0) 0 nil])
([nil nil ((206 . 207)) nil (25301 1851 646968 0) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . -206) (undo-tree-id781 . -1) 207) nil (25301 1851 646967 0) 0 nil])
([nil nil ((206 . 209)) nil (25301 1851 646965 0) 0 nil])
([nil nil ((209 . 214)) nil (25301 1851 646964 0) 0 nil])
([nil nil ((214 . 218)) nil (25301 1851 646963 0) 0 nil])
([nil nil ((218 . 223)) nil (25301 1851 646962 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 222) (undo-tree-id780 . -1) 223) nil (25301 1851 646961 0) 0 nil])
([nil nil ((222 . 223)) nil (25301 1851 646959 0) 0 nil])
([nil nil ((223 . 227)) nil (25301 1851 646959 0) 0 nil])
([nil nil ((227 . 228)) nil (25301 1851 646957 0) 0 nil])
([nil nil ((228 . 231)) nil (25301 1851 646956 0) 0 nil])
([nil nil ((231 . 232)) nil (25301 1851 646955 0) 0 nil])
([nil nil ((232 . 235)) nil (25301 1851 646954 0) 0 nil])
([nil nil ((#("b" 0 1 (fontified t face font-lock-builtin-face)) . -233) (undo-tree-id778 . -1) (#("s" 0 1 (fontified t face font-lock-builtin-face)) . -234) (undo-tree-id779 . -1) 235) nil (25301 1851 646953 0) 0 nil])
([nil nil ((233 . 235)) nil (25301 1851 646950 0) 0 nil])
([nil nil ((235 . 238)) nil (25301 1851 646949 0) 0 nil])
([nil nil ((238 . 240)) nil (25301 1851 646948 0) 0 nil])
([nil nil ((241 . 242)) nil (25301 1851 646947 0) 0 nil])
([nil nil ((3082 . 3084) (3081 . 3083)) nil (25301 1851 646946 0) 0 nil])
([nil nil ((3084 . 3085)) nil (25301 1851 646945 0) 0 nil])
([nil nil ((#("(" 0 1 (fontified t)) . -3081) (undo-tree-id136 . -1) (undo-tree-id137 . 1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (#("s" 0 1 (fontified t)) . -3082) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (#("e" 0 1 (fontified t)) . -3083) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (#("n" 0 1 (fontified t)) . -3084) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (undo-tree-id768 . -1) (#(")" 0 1 (fontified t)) . -3085) (undo-tree-id769 . -1) (undo-tree-id770 . -1) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (undo-tree-id777 . -1) 3086) nil (25301 1851 646930 0) 0 nil])
([nil nil ((6222 . 6224) (#("  " 0 2 (fontified nil)) . 6221) (undo-tree-id804 . -2) (6220 . 6224) (t 25301 1851 654047 461000)) nil (25301 2239 499639 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 6448 . 6449) (nil fontified nil 6224 . 6449) (6224 . 6449)) nil (25301 2239 499637 0) 0 nil])
([nil nil ((6403 . 6407) (#("  " 0 2 (fontified nil)) . 6403) (6391 . 6395) (#("  " 0 2 (fontified nil)) . 6391) (6304 . 6308) (#("  " 0 2 (fontified nil)) . 6304) (6292 . 6296) (#("  " 0 2 (fontified nil)) . 6292) (6275 . 6279) (#("  " 0 2 (fontified nil)) . 6275) (6261 . 6265) (#("  " 0 2 (fontified nil)) . 6261) (5775 . 5787) (#("           " 0 11 (fontified nil)) . 5775) (5739 . 5751) (#("           " 0 11 (fontified nil)) . 5739) (5704 . 5716) (#("           " 0 11 (fontified nil)) . 5704) (5669 . 5681) (#("           " 0 11 (fontified nil)) . 5669) (5633 . 5645) (#("           " 0 11 (fontified nil)) . 5633) (5597 . 5609) (#("           " 0 11 (fontified nil)) . 5597) (5561 . 5573) (#("           " 0 11 (fontified nil)) . 5561) (5523 . 5535) (#("           " 0 11 (fontified nil)) . 5523) (5485 . 5497) (#("           " 0 11 (fontified nil)) . 5485) (5447 . 5459) (#("           " 0 11 (fontified nil)) . 5447) (5408 . 5420) (#("           " 0 11 (fontified nil)) . 5408) (5372 . 5384) (#("           " 0 11 (fontified nil)) . 5372) (5301 . 5313) (#("           " 0 11 (fontified nil)) . 5301) (5246 . 5258) (#("           " 0 11 (fontified nil)) . 5246) 6449) nil (25301 2239 499635 0) 0 nil])
([nil nil ((1881 . 1882)) nil (25301 2239 499628 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 2120 . 2121) (nil fontified nil 1882 . 2121) (1882 . 2121)) nil (25301 2239 499627 0) 0 nil])
([nil nil ((2123 . 2124) (2122 . 2124)) nil (25301 2239 499625 0) 0 nil])
([nil nil ((2124 . 2125)) nil (25301 2239 499624 0) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -2123) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (#("e" 0 1 (fontified t)) . -2124) (undo-tree-id802 . -1) (undo-tree-id803 . -1) 2125) nil (25301 2239 499623 0) 0 nil])
([nil nil ((2123 . 2128)) nil (25301 2239 499620 0) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -2123) (undo-tree-id795 . -1) (#("m" 0 1 (fontified t)) . -2124) (undo-tree-id796 . -1) (#("a" 0 1 (fontified t)) . -2125) (undo-tree-id797 . -1) (#("c" 0 1 (fontified t)) . -2126) (undo-tree-id798 . -1) (#("s" 0 1 (fontified t)) . -2127) (undo-tree-id799 . -1) 2128) nil (25301 2239 499619 0) 0 nil])
([nil nil ((2123 . 2125)) nil (25301 2239 499614 0) 0 nil])
([nil nil ((2127 . 2134) (2125 . 2127)) nil (25301 2239 499613 0) 0 nil])
([nil nil ((2134 . 2138)) nil (25301 2239 499612 0) 0 nil])
([nil nil ((#("c" 0 1 (fontified t face font-lock-constant-face)) . -2135) (undo-tree-id789 . -1) (undo-tree-id790 . -1) (#("o" 0 1 (fontified t face font-lock-constant-face)) . -2136) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (#("m" 0 1 (fontified t face font-lock-constant-face)) . -2137) (undo-tree-id793 . -1) (undo-tree-id794 . -1) 2138) nil (25301 2239 499611 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 2134) (undo-tree-id787 . -1) (undo-tree-id788 . -1) 2135) nil (25301 2239 499606 0) 0 nil])
([nil nil ((#("(use-package)" 0 1 (fontified t) 1 12 (fontified t face font-lock-keyword-face) 12 13 (fontified t)) . 2122) (undo-tree-id782 . -12) (undo-tree-id783 . 13) (undo-tree-id784 . -1) (undo-tree-id785 . 1) (undo-tree-id786 . -13)) nil (25301 2239 499601 0) 0 nil])
([nil nil ((1881 . 1882) (t 25301 2239 507626 59000)) nil (25301 3267 674350 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 2014 . 2015) (nil fontified nil 1882 . 2015) (1882 . 2015)) nil (25301 3267 674348 0) 0 nil])
([nil nil ((2015 . 2016)) nil (25301 3267 674344 0) 0 nil])
([nil nil ((#("(use-package kind-icon
    :ensure t
    :after corfu
    :custom
    (kind-icon-default-face 'corfu-default) ; to compute blended backgrounds correctly
    :config
    (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))
" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t) 1 12 (face font-lock-keyword-face fontified t) 12 13 (fontified t) 13 22 (face font-lock-constant-face fontified t) 22 27 (fontified t) 27 34 (face font-lock-builtin-face fontified t) 34 41 (fontified t) 41 47 (face font-lock-builtin-face fontified t) 47 58 (fontified t) 58 65 (face font-lock-builtin-face fontified t) 65 70 (fontified t) 70 71 (face (rainbow-delimiters-depth-3-face) fontified t) 71 108 (fontified t) 108 109 (face (rainbow-delimiters-depth-3-face) fontified t) 109 110 (fontified t) 110 112 (face font-lock-comment-delimiter-face fontified t) 112 153 (face font-lock-comment-face fontified t) 153 157 (fontified t) 157 164 (face font-lock-builtin-face fontified t) 164 169 (fontified t) 169 170 (face (rainbow-delimiters-depth-3-face) fontified t) 170 235 (fontified t) 235 236 (face (rainbow-delimiters-depth-3-face) fontified t) 236 237 (face (rainbow-delimiters-depth-2-face) fontified t) 237 238 (fontified t)) . 6613) (undo-tree-id3 . -237) (undo-tree-id4 . -165) (undo-tree-id5 . -238) (undo-tree-id6 . -237) (undo-tree-id7 . -237) (undo-tree-id8 . -237) 6850 (t 25301 3267 682718 286000)) nil (25301 3393 29258 0) 0 nil])
([nil nil ((#("  " 0 2 (fontified nil)) . -6603) (undo-tree-id2 . 2) (#("          " 0 10 (fontified nil)) . -2123) 6613) nil (25301 3393 29253 0) 0 nil])
([nil nil ((6601 . 6603) (#("  " 0 2 (fontified nil)) . 6600) (6600 . 6602) (6600 . 6601)) nil (25301 3393 29251 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 6724 . 6725) (nil fontified nil 6603 . 6725) (6603 . 6725)) nil (25301 3393 29249 0) 0 nil])
([nil nil ((#("           " 0 11 (fontified t)) . -6678) (6633 . 6635) 6725) nil (25301 3393 29248 0) 0 nil])
([nil nil ((#(" 
    " 0 2 (fontified t) 2 6 (fontified t)) . 6672) (undo-tree-id0 . -2) (undo-tree-id1 . -6) 6678) nil (25301 3393 29245 0) 0 nil])
([nil nil ((6672 . 6673)) nil (25301 3393 29225 0) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -328) (undo-tree-id0 . -1) (#("i" 0 1 (fontified t)) . -329) (undo-tree-id1 . -1) (#("l" 0 1 (fontified t)) . -330) (undo-tree-id2 . -1) 331 (t 25301 3393 36975 367000)) nil (25301 3959 170791 0) 0 nil])
([nil nil ((328 . 329)) nil (25301 3959 170771 0) 0 nil])
([nil nil ((6596 . 6601) (t 25301 3959 178781 151000)) nil (25301 4333 476395 0) 0 nil])
([nil nil ((6602 . 6603) (6601 . 6603)) nil (25301 4333 476394 0) 0 nil])
([nil nil ((6602 . 6613) (#("a" 0 1 (fontified t)) . -6602) (undo-tree-id12 . -1) (undo-tree-id13 . -1) 6603) nil (25301 4333 476394 0) 0 nil])
([nil nil ((6613 . 6618)) nil (25301 4333 476392 0) 0 nil])
([nil nil ((6615 . 6647) (#("com" 0 3 (fontified t)) . -6615) (undo-tree-id10 . -3) (undo-tree-id11 . -3) 6618) nil (25301 4333 476391 0) 0 nil])
([nil nil ((6647 . 6650)) nil (25301 4333 476389 0) 0 nil])
([nil nil ((6650 . 6655)) nil (25301 4333 476389 0) 0 nil])
([nil nil ((6647 . 6659) (#("cape-his" 0 8 (fontified t)) . -6647) (undo-tree-id8 . -8) (undo-tree-id9 . -8) 6655) nil (25301 4333 476388 0) 0 nil])
([nil nil ((6660 . 6665)) nil (25301 4333 476386 0) 0 nil])
([nil nil ((6666 . 6668) (6665 . 6667)) nil (25301 4333 476386 0) 0 nil])
([nil nil ((6666 . 6677) (#("ad" 0 2 (fontified t)) . -6666) (undo-tree-id6 . -2) (undo-tree-id7 . -2) 6668) nil (25301 4333 476385 0) 0 nil])
([nil nil ((6677 . 6679)) nil (25301 4333 476383 0) 0 nil])
([nil nil ((6679 . 6716)) nil (25301 4333 476382 0) 0 nil])
([nil nil ((6716 . 6718)) nil (25301 4333 476382 0) 0 nil])
([nil nil ((6711 . 6720) (#("cape-di" 0 7 (fontified t)) . -6711) (undo-tree-id4 . -7) (undo-tree-id5 . -7) 6718) nil (25301 4333 476381 0) 0 nil])
([nil nil ((6721 . 6726)) nil (25301 4333 476379 0) 0 nil])
([nil nil ((6727 . 6728) (6726 . 6728)) nil (25301 4333 476378 0) 0 nil])
([nil nil ((6727 . 6738) (#("a" 0 1 (fontified t)) . -6727) (undo-tree-id2 . -1) (undo-tree-id3 . -1) 6728) nil (25301 4333 476377 0) 0 nil])
([nil nil ((6738 . 6740)) nil (25301 4333 476375 0) 0 nil])
([nil nil ((6740 . 6769)) nil (25301 4333 476375 0) 0 nil])
([nil nil ((6769 . 6770)) nil (25301 4333 476374 0) 0 nil])
([nil nil ((6770 . 6771)) nil (25301 4333 476373 0) 0 nil])
([nil nil ((6771 . 6777)) nil (25301 4333 476373 0) 0 nil])
([nil nil ((6777 . 6778)) nil (25301 4333 476372 0) 0 nil])
([nil nil ((6772 . 6783) (#("cape-s" 0 6 (fontified t)) . -6772) (undo-tree-id0 . -6) (undo-tree-id1 . -6) 6778) nil (25301 4333 476369 0) 0 nil])
([nil nil ((#("(setq is-company t)" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t) 1 5 (face font-lock-keyword-face fontified t) 5 18 (fontified t) 18 19 (face (rainbow-delimiters-depth-1-face) fontified t)) . 311) (undo-tree-id21 . -18) (undo-tree-id22 . -18) (undo-tree-id23 . -18) (undo-tree-id24 . -18) (undo-tree-id25 . -18) (undo-tree-id26 . 19) (undo-tree-id27 . -1) (undo-tree-id28 . 1) (undo-tree-id29 . -19) (t 25301 4333 484885 663000)) nil (25301 4567 124892 0) 0 nil])
([nil nil ((#("

" 0 1 (face font-lock-comment-face fontified t) 1 2 (fontified t)) . 309) (undo-tree-id14 . -2) (undo-tree-id15 . -2) (undo-tree-id16 . -2) (undo-tree-id17 . -2) (undo-tree-id18 . -2) (undo-tree-id19 . -2) (undo-tree-id20 . -2) 311) nil (25301 4567 124885 0) 0 nil])
([nil nil ((242 . 243)) nil (25301 4567 124875 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 261 . 262) (nil fontified nil 261 . 262) (nil fontified nil 248 . 261) (nil fontified nil 244 . 248) (nil fontified nil 243 . 244) (243 . 262)) nil (25301 4567 124874 0) 0 nil])
([nil nil ((262 . 263)) nil (25301 4567 124869 0) 0 nil])
([nil nil ((#("
" 0 1 (face font-lock-comment-face fontified t)) . 330) (undo-tree-id30 . -1) (undo-tree-id31 . -1) 331 (t 25301 4567 132929 202000)) nil (25301 4572 258312 0) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -260) (undo-tree-id32 . -1) 261 (t 25301 4572 264760 127000)) nil (25301 4943 95401 0) 0 nil])
([nil nil ((260 . 263)) nil (25301 4943 95391 0) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -260) (undo-tree-id0 . -1) (#("i" 0 1 (fontified t)) . -261) (undo-tree-id1 . -1) (#("l" 0 1 (fontified t)) . -262) (undo-tree-id2 . -1) 263 (t 25301 4943 103067 857000)) nil (25301 4999 44426 0) 0 nil])
([nil nil ((260 . 261)) nil (25301 4999 44399 0) 0 nil])
([nil nil ((6783 . 6788) (t 25301 4999 53111 997000)) nil (25301 5112 115520 0) 0 nil])
([nil nil ((6789 . 6790) (6788 . 6790)) nil (25301 5112 115519 0) 0 nil])
([nil nil ((6795 . 6800) (6793 . 6795) (#("r" 0 1 (fontified t)) . -6793) (undo-tree-id15 . -1) (#("o" 0 1 (fontified t)) . -6794) (undo-tree-id16 . -1) 6795 (6790 . 6795) (#("f" 0 1 (fontified t)) . -6790) (undo-tree-id17 . -1) (#("f" 0 1 (fontified t)) . -6791) (undo-tree-id18 . -1) 6792 (6790 . 6792)) nil (25301 5112 115517 0) 0 nil])
([nil nil ((6800 . 6803)) nil (25301 5112 115512 0) 0 nil])
([nil nil ((#(";" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -6801) (undo-tree-id13 . -1) (#("'" 0 1 (fontified t face font-lock-comment-face)) . -6802) (undo-tree-id14 . -1) 6803) nil (25301 5112 115512 0) 0 nil])
([nil nil ((6801 . 6804)) nil (25301 5112 115509 0) 0 nil])
([nil nil ((#(";" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -6801) (undo-tree-id10 . -1) (#("c" 0 1 (fontified t face font-lock-comment-face)) . -6802) (undo-tree-id11 . -1) (#("o" 0 1 (fontified t face font-lock-comment-face)) . -6803) (undo-tree-id12 . -1) 6804) nil (25301 5112 115508 0) 0 nil])
([nil nil ((6801 . 6805)) nil (25301 5112 115505 0) 0 nil])
([nil nil ((6805 . 6807)) nil (25301 5112 115504 0) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -6806) (undo-tree-id9 . -1) 6807) nil (25301 5112 115503 0) 0 nil])
([nil nil ((6806 . 6812)) nil (25301 5112 115501 0) 0 nil])
([nil nil ((6812 . 6813)) nil (25301 5112 115500 0) 0 nil])
([nil nil ((6813 . 6815)) nil (25301 5112 115500 0) 0 nil])
([nil nil ((6816 . 6821) (6815 . 6816)) nil (25301 5112 115499 0) 0 nil])
([nil nil ((6821 . 6822)) nil (25301 5112 115498 0) 0 nil])
([nil nil ((6825 . 6831) (6822 . 6825)) nil (25301 5112 115497 0) 0 nil])
([nil nil ((6831 . 6836)) nil (25301 5112 115496 0) 0 nil])
([nil nil ((6837 . 6842) (6836 . 6837)) nil (25301 5112 115495 0) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -6839) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (#("e" 0 1 (fontified t)) . -6840) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (#("x" 0 1 (fontified t)) . -6841) (undo-tree-id7 . -1) (undo-tree-id8 . -1) 6842) nil (25301 5112 115493 0) 0 nil])
([nil nil ((6839 . 6841)) nil (25301 5112 115482 0) 0 nil])
([nil nil ((6842 . 6845) (6841 . 6842)) nil (25301 5112 115478 0) 0 nil])
([nil nil ((4552 . 4557) (t 25301 5112 123787 725000) 4551) nil (25301 5170 83802 0) 0 nil])
([nil nil ((#("
    " 0 5 (fontified t)) . 4552) (undo-tree-id13 . -5) (undo-tree-id14 . -1) 4557) nil (25301 5170 83801 0) 0 nil])
([nil nil ((4502 . 4504) (4501 . 4503)) nil (25301 5170 83799 0) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -4502) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (#("e" 0 1 (fontified t)) . -4503) (undo-tree-id11 . -1) (undo-tree-id12 . -1) 4504) nil (25301 5170 83798 0) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . -4501) (undo-tree-id2 . 1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . 4502) (undo-tree-id7 . 1) (undo-tree-id8 . -1)) nil (25301 5177 918821 0) 0 nil])
([nil nil ((6846 . 6851)) nil (25301 5204 465583 0) 0 nil] [nil nil ((#("t" 0 1 (fontified t)) . -260) (undo-tree-id0 . -1) (undo-tree-id1 . -1) 261) ((260 . 261)) (25301 5177 318020 0) 0 nil])
([nil nil ((#("
    " 0 1 (fontified t) 1 5 (fontified t)) . 6846) (undo-tree-id707 . -5) (undo-tree-id708 . -5) (undo-tree-id709 . -1) (undo-tree-id710 . -5) (undo-tree-id711 . -5) (undo-tree-id712 . -5) (undo-tree-id713 . -5) (undo-tree-id714 . -5) (undo-tree-id715 . -5) (undo-tree-id716 . -5) (undo-tree-id717 . -1) (undo-tree-id718 . -5) (undo-tree-id719 . -5) (undo-tree-id720 . -5) (undo-tree-id721 . -5) (undo-tree-id722 . -5) (undo-tree-id723 . -5) (undo-tree-id724 . -5) (undo-tree-id725 . -5) (undo-tree-id726 . -5) (undo-tree-id727 . -5) (undo-tree-id728 . -5) (undo-tree-id729 . -5) (undo-tree-id730 . -5) (undo-tree-id731 . -5) (undo-tree-id732 . -5) (undo-tree-id733 . -5) (undo-tree-id734 . -5) (undo-tree-id735 . -5) (undo-tree-id736 . -5) (undo-tree-id737 . -5) (undo-tree-id738 . -5) (undo-tree-id739 . -5) (undo-tree-id740 . -5) (undo-tree-id741 . -5) (undo-tree-id742 . -5) (undo-tree-id743 . -5) (undo-tree-id744 . -5) (undo-tree-id745 . -5) (undo-tree-id746 . -5) (undo-tree-id747 . -5) (undo-tree-id748 . -5) (undo-tree-id749 . -5) (undo-tree-id750 . -5) (undo-tree-id751 . -5) (undo-tree-id752 . -5) (undo-tree-id753 . -5) (undo-tree-id754 . -5) (undo-tree-id755 . -5) (undo-tree-id756 . -5) (undo-tree-id757 . -5) (undo-tree-id758 . -5) (undo-tree-id759 . -5) (undo-tree-id760 . -5) (undo-tree-id761 . -5) (undo-tree-id762 . -5) (undo-tree-id763 . -5) (undo-tree-id764 . -5) (undo-tree-id765 . -5) (undo-tree-id766 . -5) (undo-tree-id767 . -5) (undo-tree-id768 . -5) (undo-tree-id769 . -5) (undo-tree-id770 . -5) (undo-tree-id771 . -5) (undo-tree-id772 . -5) (undo-tree-id773 . -5) (undo-tree-id774 . -5) (undo-tree-id775 . -5) (undo-tree-id776 . -5) (undo-tree-id777 . -5) (undo-tree-id778 . -5) (undo-tree-id779 . -5) (undo-tree-id780 . -5) (undo-tree-id781 . -5) (undo-tree-id782 . -5) (undo-tree-id783 . -5) (undo-tree-id784 . -5) (undo-tree-id785 . -5) (undo-tree-id786 . -5) (undo-tree-id787 . -5) (undo-tree-id788 . -5) (undo-tree-id789 . -5) (undo-tree-id790 . -5) (undo-tree-id791 . -5) (undo-tree-id792 . -5) (undo-tree-id793 . -5) (undo-tree-id794 . -5) (undo-tree-id795 . -5) (undo-tree-id796 . -5) (undo-tree-id797 . -5) (undo-tree-id798 . -5) (undo-tree-id799 . -5) (undo-tree-id800 . -5) (undo-tree-id801 . -5) (undo-tree-id802 . -5) (undo-tree-id803 . -5) (undo-tree-id804 . -5) (undo-tree-id805 . -5) (undo-tree-id806 . -5) (undo-tree-id807 . -5) (undo-tree-id808 . -5) (undo-tree-id809 . -5) (undo-tree-id810 . -5) (undo-tree-id811 . -5) (undo-tree-id812 . -5) (undo-tree-id813 . -5) (undo-tree-id814 . -5) (undo-tree-id815 . -5) (undo-tree-id816 . -5) (undo-tree-id817 . -5) (undo-tree-id818 . -5) (undo-tree-id819 . -5) (undo-tree-id820 . -5) (undo-tree-id821 . -5) (undo-tree-id822 . -5) (undo-tree-id823 . -5) (undo-tree-id824 . -5) (undo-tree-id825 . -5) (undo-tree-id826 . -5) (undo-tree-id827 . -5) (undo-tree-id828 . -5) (undo-tree-id829 . -5) (undo-tree-id830 . -5) (undo-tree-id831 . -5) (undo-tree-id832 . -5) (undo-tree-id833 . -5) (undo-tree-id834 . -5) (undo-tree-id835 . -5) (undo-tree-id836 . -5) (undo-tree-id837 . -5) (undo-tree-id838 . -5) (undo-tree-id839 . -5) (undo-tree-id840 . -5) (undo-tree-id841 . -5) (undo-tree-id842 . -5) (undo-tree-id843 . -5) (undo-tree-id844 . -5) (undo-tree-id845 . -5) (undo-tree-id846 . -5) (undo-tree-id847 . -5) (undo-tree-id848 . -5) (undo-tree-id849 . -5) (undo-tree-id850 . -5) (undo-tree-id851 . -5) (undo-tree-id852 . -5) (undo-tree-id853 . -5) (undo-tree-id854 . -5) (undo-tree-id855 . -5) (undo-tree-id856 . -5) (undo-tree-id857 . -5) (undo-tree-id858 . -5) (undo-tree-id859 . -5) (undo-tree-id860 . -5) (undo-tree-id861 . -5) (undo-tree-id862 . -5) (undo-tree-id863 . -5) (undo-tree-id864 . -5) (undo-tree-id865 . -5) (undo-tree-id866 . -5) (undo-tree-id867 . -5) (undo-tree-id868 . -5) (undo-tree-id869 . -5) (undo-tree-id870 . -5) (undo-tree-id871 . -5) (undo-tree-id872 . -5) (undo-tree-id873 . -5) (undo-tree-id874 . -5) (undo-tree-id875 . -5) (undo-tree-id876 . -5) (undo-tree-id877 . -5) (undo-tree-id878 . -5) (undo-tree-id879 . -5) (undo-tree-id880 . -5) (undo-tree-id881 . -5) (undo-tree-id882 . -5) (undo-tree-id883 . -5) (undo-tree-id884 . -5) (undo-tree-id885 . -5) (undo-tree-id886 . -5) (undo-tree-id887 . -5) (undo-tree-id888 . -5) (undo-tree-id889 . -5) (undo-tree-id890 . -5) (undo-tree-id891 . -5) (undo-tree-id892 . -5) (undo-tree-id893 . -5) (undo-tree-id894 . -5) (undo-tree-id895 . -5) (undo-tree-id896 . -5) (undo-tree-id897 . -5) (undo-tree-id898 . -5) (undo-tree-id899 . -5) (undo-tree-id900 . -5) (undo-tree-id901 . -5) (undo-tree-id902 . -5) (undo-tree-id903 . -5) (undo-tree-id904 . -5) (undo-tree-id905 . -5) (undo-tree-id906 . -5) (undo-tree-id907 . -5) (undo-tree-id908 . -5) (undo-tree-id909 . -5) (undo-tree-id910 . -5) (undo-tree-id911 . -5) (undo-tree-id912 . -5) (undo-tree-id913 . -5) (undo-tree-id914 . -5) (undo-tree-id915 . -5) (undo-tree-id916 . -5) (undo-tree-id917 . -5) (undo-tree-id918 . -5) (undo-tree-id919 . -5) (undo-tree-id920 . -5) (undo-tree-id921 . -5) (undo-tree-id922 . -5) (undo-tree-id923 . -5) (undo-tree-id924 . -5) (undo-tree-id925 . -5) (undo-tree-id926 . -5) (undo-tree-id927 . -5) (undo-tree-id928 . -5) (undo-tree-id929 . -5) (undo-tree-id930 . -5) (undo-tree-id931 . -5) (undo-tree-id932 . -5) (undo-tree-id933 . -5) (undo-tree-id934 . -5) (undo-tree-id935 . -5) (undo-tree-id936 . -5) (undo-tree-id937 . -5) (undo-tree-id938 . -5) (undo-tree-id939 . -5) (undo-tree-id940 . -5) (undo-tree-id941 . -5) (undo-tree-id942 . -5) (undo-tree-id943 . -5) (undo-tree-id944 . -5) (undo-tree-id945 . -5) (undo-tree-id946 . -5) (undo-tree-id947 . -5) (undo-tree-id948 . -5) (undo-tree-id949 . -5) (undo-tree-id950 . -5) (undo-tree-id951 . -5) (undo-tree-id952 . -5) (undo-tree-id953 . -5) (undo-tree-id954 . -5) (undo-tree-id955 . -5) (undo-tree-id956 . -5) (undo-tree-id957 . -5) (undo-tree-id958 . -5) (undo-tree-id959 . -5) (undo-tree-id960 . -5) (undo-tree-id961 . -5) (undo-tree-id962 . -5) (undo-tree-id963 . -5) (undo-tree-id964 . -5) (undo-tree-id965 . -5) (undo-tree-id966 . -5) (undo-tree-id967 . -5) (undo-tree-id968 . -5) (undo-tree-id969 . -5) (undo-tree-id970 . -5) (undo-tree-id971 . -5) (undo-tree-id972 . -5) (undo-tree-id973 . -5) (undo-tree-id974 . -5) (undo-tree-id975 . -5) (undo-tree-id976 . -5) (undo-tree-id977 . -5) (undo-tree-id978 . -5) (undo-tree-id979 . -5) (undo-tree-id980 . -5) (undo-tree-id981 . -5) (undo-tree-id982 . -5) (undo-tree-id983 . -5) (undo-tree-id984 . -5) (undo-tree-id985 . -5) (undo-tree-id986 . -5) (undo-tree-id987 . -5) (undo-tree-id988 . -5) (undo-tree-id989 . -5) (undo-tree-id990 . -5) (undo-tree-id991 . -5) (undo-tree-id992 . -5) (undo-tree-id993 . -5) (undo-tree-id994 . -5) (undo-tree-id995 . -5) (undo-tree-id996 . -5) (undo-tree-id997 . -5) (undo-tree-id998 . -5) (undo-tree-id999 . -5) (undo-tree-id1000 . -5) (undo-tree-id1001 . -5) (undo-tree-id1002 . -5) (undo-tree-id1003 . -5) (undo-tree-id1004 . -5) (undo-tree-id1005 . -5) (undo-tree-id1006 . -5) (undo-tree-id1007 . -5) (undo-tree-id1008 . -5) (undo-tree-id1009 . -5) (undo-tree-id1010 . -5) (undo-tree-id1011 . -5) (undo-tree-id1012 . -5) (undo-tree-id1013 . -5) (undo-tree-id1014 . -5) (undo-tree-id1015 . -5) (undo-tree-id1016 . -5) (undo-tree-id1017 . -5) (undo-tree-id1018 . -5) (undo-tree-id1019 . -5) (undo-tree-id1020 . -5) (undo-tree-id1021 . -5) (undo-tree-id1022 . -5) (undo-tree-id1023 . -5) (undo-tree-id1024 . -5) (undo-tree-id1025 . -5) (undo-tree-id1026 . -5) (undo-tree-id1027 . -5) (undo-tree-id1028 . -5) (undo-tree-id1029 . -5) (undo-tree-id1030 . -5) (undo-tree-id1031 . -5) (undo-tree-id1032 . -5) (undo-tree-id1033 . -5) 6851) nil (25301 5206 761358 0) 0 nil] [nil nil ((6852 . 6855) (6851 . 6853)) ((#("()" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-3-face) fontified nil)) . 6851) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . 2) (undo-tree-id686 . -1) (undo-tree-id687 . 1) (undo-tree-id688 . -2) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (#("add" 0 3 (fontified t)) . 6852) (undo-tree-id697 . -3) (undo-tree-id698 . -3) (undo-tree-id699 . -3) (undo-tree-id700 . -3) (undo-tree-id701 . -3) (undo-tree-id702 . -3) (undo-tree-id703 . -3) (undo-tree-id704 . -3) (undo-tree-id705 . -3) (undo-tree-id706 . -3)) (25301 5204 53849 0) 0 nil])
([nil nil ((260 . 263)) ((#("nil" 0 3 (fontified t)) . 260) (undo-tree-id15 . -3) (undo-tree-id16 . -3) (undo-tree-id17 . -3) (undo-tree-id18 . -3) (undo-tree-id19 . -3) (undo-tree-id20 . -3) (undo-tree-id21 . -3) (undo-tree-id22 . -3) (undo-tree-id23 . -3) (undo-tree-id24 . -3) (undo-tree-id25 . -3) (undo-tree-id26 . -3) (undo-tree-id27 . -3) (undo-tree-id28 . -3) (undo-tree-id29 . -3) (undo-tree-id30 . -3) (undo-tree-id31 . -3) (undo-tree-id32 . -3) (undo-tree-id33 . -3) (undo-tree-id34 . -3) (undo-tree-id35 . -3) (undo-tree-id36 . -3) (undo-tree-id37 . -3) (undo-tree-id38 . -3) (undo-tree-id39 . -3) (undo-tree-id40 . -3) (undo-tree-id41 . -3) (undo-tree-id42 . -3) (undo-tree-id43 . -3) (undo-tree-id44 . -3) (undo-tree-id45 . -3) (undo-tree-id46 . -3) (undo-tree-id47 . -3) (undo-tree-id48 . -3) (undo-tree-id49 . -3) (undo-tree-id50 . -3) (undo-tree-id51 . -3) (undo-tree-id52 . -3) (undo-tree-id53 . -3) (undo-tree-id54 . -3) (undo-tree-id55 . -3) (undo-tree-id56 . -3) (undo-tree-id57 . -3) (undo-tree-id58 . -3) (undo-tree-id59 . -3) (undo-tree-id60 . -3) (undo-tree-id61 . -3) (undo-tree-id62 . -3) (undo-tree-id63 . -3) (undo-tree-id64 . -3) (undo-tree-id65 . -3) (undo-tree-id66 . -3) (undo-tree-id67 . -3) (undo-tree-id68 . -3) (undo-tree-id69 . -3) (undo-tree-id70 . -3) (undo-tree-id71 . -3) (undo-tree-id72 . -3) (undo-tree-id73 . -3) (undo-tree-id74 . -3) (undo-tree-id75 . -3) (undo-tree-id76 . -2) (undo-tree-id77 . -2) (undo-tree-id78 . -2) (undo-tree-id79 . -2) (undo-tree-id80 . -2) (undo-tree-id81 . -2) (undo-tree-id82 . -2) (undo-tree-id83 . -2) (undo-tree-id84 . -2) (undo-tree-id85 . -2) (undo-tree-id86 . -2) (undo-tree-id87 . -2) (undo-tree-id88 . -2) (undo-tree-id89 . -2) (undo-tree-id90 . -2) (undo-tree-id91 . -2) (undo-tree-id92 . -2) (undo-tree-id93 . -2) (undo-tree-id94 . -2) (undo-tree-id95 . -2) (undo-tree-id96 . -2) (undo-tree-id97 . -2) (undo-tree-id98 . -2) (undo-tree-id99 . -2) (undo-tree-id100 . -2) (undo-tree-id101 . -2) (undo-tree-id102 . -2) (undo-tree-id103 . -2) (undo-tree-id104 . -2) (undo-tree-id105 . -2) (undo-tree-id106 . -2) (undo-tree-id107 . -2) (undo-tree-id108 . -2) (undo-tree-id109 . -2) (undo-tree-id110 . -2) (undo-tree-id111 . -2) (undo-tree-id112 . -2) (undo-tree-id113 . -2) (undo-tree-id114 . -2) (undo-tree-id115 . -2) (undo-tree-id116 . -2) (undo-tree-id117 . -2) (undo-tree-id118 . -2) (undo-tree-id119 . -2) (undo-tree-id120 . -2) (undo-tree-id121 . -2) (undo-tree-id122 . -2) (undo-tree-id123 . -2) (undo-tree-id124 . -2) (undo-tree-id125 . -2) (undo-tree-id126 . -2) (undo-tree-id127 . -2) (undo-tree-id128 . -2) (undo-tree-id129 . -2) (undo-tree-id130 . -2) (undo-tree-id131 . -2) (undo-tree-id132 . -2) (undo-tree-id133 . -2) (undo-tree-id134 . -2) (undo-tree-id135 . -2) (undo-tree-id136 . -2) (undo-tree-id137 . -2) (undo-tree-id138 . -2) (undo-tree-id139 . -2) (undo-tree-id140 . -2) (undo-tree-id141 . -2) (undo-tree-id142 . -2) (undo-tree-id143 . -2) (undo-tree-id144 . -2) (undo-tree-id145 . -2) (undo-tree-id146 . -2) (undo-tree-id147 . -2) (undo-tree-id148 . -2) (undo-tree-id149 . -2) (undo-tree-id150 . -2) (undo-tree-id151 . -2) (undo-tree-id152 . -2) (undo-tree-id153 . -2) (undo-tree-id154 . -2) (undo-tree-id155 . -2) (undo-tree-id156 . -2) (undo-tree-id157 . -2) (undo-tree-id158 . -2) (undo-tree-id159 . -2) (undo-tree-id160 . -2) (undo-tree-id161 . -2) (undo-tree-id162 . -2) (undo-tree-id163 . -2) (undo-tree-id164 . -2) (undo-tree-id165 . -2) (undo-tree-id166 . -2) (undo-tree-id167 . -2) (undo-tree-id168 . -2) (undo-tree-id169 . -2) (undo-tree-id170 . -2) (undo-tree-id171 . -2) (undo-tree-id172 . -2) (undo-tree-id173 . -2) (undo-tree-id174 . -2) (undo-tree-id175 . -2) (undo-tree-id176 . -2) (undo-tree-id177 . -2) (undo-tree-id178 . -2) (undo-tree-id179 . -2) (undo-tree-id180 . -2) (undo-tree-id181 . -2) (undo-tree-id182 . -2) (undo-tree-id183 . -2) (undo-tree-id184 . -2) (undo-tree-id185 . -2) (undo-tree-id186 . -2) (undo-tree-id187 . -2) (undo-tree-id188 . -2) (undo-tree-id189 . -2) (undo-tree-id190 . -2) (undo-tree-id191 . -2) (undo-tree-id192 . -2) (undo-tree-id193 . -2) (undo-tree-id194 . -2) (undo-tree-id195 . -2) (undo-tree-id196 . -2) (undo-tree-id197 . -2) (undo-tree-id198 . -2) (undo-tree-id199 . -2) (undo-tree-id200 . -2) (undo-tree-id201 . -2) (undo-tree-id202 . -2) (undo-tree-id203 . -2) (undo-tree-id204 . -2) (undo-tree-id205 . -2) (undo-tree-id206 . -2) (undo-tree-id207 . -2) (undo-tree-id208 . -2) (undo-tree-id209 . -2) (undo-tree-id210 . -2) (undo-tree-id211 . -2) (undo-tree-id212 . -2) (undo-tree-id213 . -2) (undo-tree-id214 . -2) (undo-tree-id215 . -2) (undo-tree-id216 . -3) (undo-tree-id217 . -3) (undo-tree-id218 . -3) (undo-tree-id219 . -3) (undo-tree-id220 . -3) (undo-tree-id221 . -3) (undo-tree-id222 . -3) (undo-tree-id223 . -3) (undo-tree-id224 . -3) (undo-tree-id225 . -3) (undo-tree-id226 . -3) (undo-tree-id227 . -3) (undo-tree-id228 . -3) (undo-tree-id229 . -3) (undo-tree-id230 . -3) (undo-tree-id231 . -3) (undo-tree-id232 . -3) (undo-tree-id233 . -3) (undo-tree-id234 . -3) (undo-tree-id235 . -3) (undo-tree-id236 . -3) (undo-tree-id237 . -3) (undo-tree-id238 . -3) (undo-tree-id239 . -3) (undo-tree-id240 . -3) (undo-tree-id241 . -3) (undo-tree-id242 . -3) (undo-tree-id243 . -3) (undo-tree-id244 . -3) (undo-tree-id245 . -3) (undo-tree-id246 . -3) (undo-tree-id247 . -3) (undo-tree-id248 . -3) (undo-tree-id249 . -3) (undo-tree-id250 . -3) (undo-tree-id251 . -3) (undo-tree-id252 . -3) (undo-tree-id253 . -3) (undo-tree-id254 . -3) (undo-tree-id255 . -3) (undo-tree-id256 . -3) (undo-tree-id257 . -3) (undo-tree-id258 . -3) (undo-tree-id259 . -3) (undo-tree-id260 . -3) (undo-tree-id261 . -3) (undo-tree-id262 . -3) (undo-tree-id263 . -3) (undo-tree-id264 . -3) (undo-tree-id265 . -3) (undo-tree-id266 . -3) (undo-tree-id267 . -3) (undo-tree-id268 . -3) (undo-tree-id269 . -3) (undo-tree-id270 . -3) (undo-tree-id271 . -3) (undo-tree-id272 . -3) (undo-tree-id273 . -3) (undo-tree-id274 . -3) (undo-tree-id275 . -3) (undo-tree-id276 . -3) (undo-tree-id277 . -3) (undo-tree-id278 . -3) (undo-tree-id279 . -3) (undo-tree-id280 . -3) (undo-tree-id281 . -3) (undo-tree-id282 . -3) (undo-tree-id283 . -3) (undo-tree-id284 . -3) (undo-tree-id285 . -3) (undo-tree-id286 . -3) (undo-tree-id287 . -3) (undo-tree-id288 . -3) (undo-tree-id289 . -3) (undo-tree-id290 . -3) (undo-tree-id291 . -3) (undo-tree-id292 . -3) (undo-tree-id293 . -3) (undo-tree-id294 . -3) (undo-tree-id295 . -3) (undo-tree-id296 . -3) (undo-tree-id297 . -3) (undo-tree-id298 . -3) (undo-tree-id299 . -3) (undo-tree-id300 . -3) (undo-tree-id301 . -3) (undo-tree-id302 . -3) (undo-tree-id303 . -3) (undo-tree-id304 . -3) (undo-tree-id305 . -3) (undo-tree-id306 . -3) (undo-tree-id307 . -3) (undo-tree-id308 . -3) (undo-tree-id309 . -3) (undo-tree-id310 . -3) (undo-tree-id311 . -3) (undo-tree-id312 . -3) (undo-tree-id313 . -3) (undo-tree-id314 . -3) (undo-tree-id315 . -3) (undo-tree-id316 . -3) (undo-tree-id317 . -3) (undo-tree-id318 . -3) (undo-tree-id319 . -3) (undo-tree-id320 . -3) (undo-tree-id321 . -3) (undo-tree-id322 . -3) (undo-tree-id323 . -3) (undo-tree-id324 . -3) (undo-tree-id325 . -3) (undo-tree-id326 . -3) (undo-tree-id327 . -3) (undo-tree-id328 . -3) (undo-tree-id329 . -3) (undo-tree-id330 . -3) (undo-tree-id331 . -3) (undo-tree-id332 . -3) (undo-tree-id333 . -3) (undo-tree-id334 . -3) (undo-tree-id335 . -3) (undo-tree-id336 . -3) (undo-tree-id337 . -3) (undo-tree-id338 . -3) (undo-tree-id339 . -3) (undo-tree-id340 . -3) (undo-tree-id341 . -3) (undo-tree-id342 . -3) (undo-tree-id343 . -3) (undo-tree-id344 . -3) (undo-tree-id345 . -3) (undo-tree-id346 . -3) (undo-tree-id347 . -3) (undo-tree-id348 . -3) (undo-tree-id349 . -3) (undo-tree-id350 . -3) (undo-tree-id351 . -3) (undo-tree-id352 . -3) (undo-tree-id353 . -3) (undo-tree-id354 . -3) (undo-tree-id355 . -3) (undo-tree-id356 . -3) (undo-tree-id357 . -3) (undo-tree-id358 . -3) (undo-tree-id359 . -3) (undo-tree-id360 . -3) (undo-tree-id361 . -3) (undo-tree-id362 . -3) (undo-tree-id363 . -3) (undo-tree-id364 . -3) (undo-tree-id365 . -3) (undo-tree-id366 . -3) (undo-tree-id367 . -3) (undo-tree-id368 . -3) (undo-tree-id369 . -3) (undo-tree-id370 . -3) (undo-tree-id371 . -3) (undo-tree-id372 . -3) (undo-tree-id373 . -3) (undo-tree-id374 . -3) (undo-tree-id375 . -3) (undo-tree-id376 . -3) (undo-tree-id377 . -3) (undo-tree-id378 . -3) (undo-tree-id379 . -3) (undo-tree-id380 . -3) (undo-tree-id381 . -3) (undo-tree-id382 . -3) (undo-tree-id383 . -3) (undo-tree-id384 . -3) (undo-tree-id385 . -3) (undo-tree-id386 . -3) (undo-tree-id387 . -3) (undo-tree-id388 . -3) (undo-tree-id389 . -3) (undo-tree-id390 . -3) (undo-tree-id391 . -3) (undo-tree-id392 . -3) (undo-tree-id393 . -3) (undo-tree-id394 . -3) (undo-tree-id395 . -3) (undo-tree-id396 . -3) (undo-tree-id397 . -3) (undo-tree-id398 . -3) (undo-tree-id399 . -3) (undo-tree-id400 . -3) (undo-tree-id401 . -3) (undo-tree-id402 . -3) (undo-tree-id403 . -3) (undo-tree-id404 . -3) (undo-tree-id405 . -3) (undo-tree-id406 . -3) (undo-tree-id407 . -3) (undo-tree-id408 . -3) (undo-tree-id409 . -3) (undo-tree-id410 . -3) (undo-tree-id411 . -3) (undo-tree-id412 . -3) (undo-tree-id413 . -3) (undo-tree-id414 . -3) (undo-tree-id415 . -3) (undo-tree-id416 . -3) (undo-tree-id417 . -3) (undo-tree-id418 . -3) (undo-tree-id419 . -3) (undo-tree-id420 . -3) (undo-tree-id421 . -3) (undo-tree-id422 . -3) (undo-tree-id423 . -3) (undo-tree-id424 . -3) (undo-tree-id425 . -3) (undo-tree-id426 . -3) (undo-tree-id427 . -3) (undo-tree-id428 . -3) (undo-tree-id429 . -3) (undo-tree-id430 . -3) (undo-tree-id431 . -3) (undo-tree-id432 . -3) (undo-tree-id433 . -3) (undo-tree-id434 . -3) (undo-tree-id435 . -3) (undo-tree-id436 . -3) (t 25301 5170 91995 811000)) (25301 5170 83764 0) 0 nil])
([nil nil ((2244 . 2245) (t 25301 5206 769993 787000)) nil (25301 5240 236409 0) 0 nil])
([nil nil ((6852 . 6863) (#("add" 0 3 (fontified t)) . -6852) (undo-tree-id437 . -3) (undo-tree-id438 . -3) 6855) ((6852 . 6855) (#("add-to-list" 0 11 (fontified t)) . 6852) (undo-tree-id442 . -11) (undo-tree-id443 . -11) (undo-tree-id444 . -11) (undo-tree-id445 . -11) (undo-tree-id446 . -11) (undo-tree-id447 . -11) (undo-tree-id448 . -11) (undo-tree-id449 . -11) (undo-tree-id450 . -11) (undo-tree-id451 . -11) (undo-tree-id452 . -11) (undo-tree-id453 . -11) (undo-tree-id454 . -11) (undo-tree-id455 . -11) (undo-tree-id456 . -11) (undo-tree-id457 . -11) (undo-tree-id458 . -11) (undo-tree-id459 . -11) (undo-tree-id460 . -11) (undo-tree-id461 . -11) (undo-tree-id462 . -11) (undo-tree-id463 . -11) (undo-tree-id464 . -11) (undo-tree-id465 . -11) (undo-tree-id466 . -11) (undo-tree-id467 . -11) (undo-tree-id468 . -11) (undo-tree-id469 . -11) (undo-tree-id470 . -11) (undo-tree-id471 . -11) (undo-tree-id472 . -11) (undo-tree-id473 . -11) (undo-tree-id474 . -11) (undo-tree-id475 . -11) (undo-tree-id476 . -11) (undo-tree-id477 . -11) (undo-tree-id478 . -11) (undo-tree-id479 . -11) (undo-tree-id480 . -11) (undo-tree-id481 . -11) (undo-tree-id482 . -11) (undo-tree-id483 . -11) (undo-tree-id484 . -11) (undo-tree-id485 . -11) (undo-tree-id486 . -11) (undo-tree-id487 . -11) (undo-tree-id488 . -11) (undo-tree-id489 . -11) (undo-tree-id490 . -11) (undo-tree-id491 . -11) (undo-tree-id492 . -11) (undo-tree-id493 . -11) (undo-tree-id494 . -11) (undo-tree-id495 . -11) (undo-tree-id496 . -11) (undo-tree-id497 . -11) (undo-tree-id498 . -11) (undo-tree-id499 . -11) (undo-tree-id500 . -11) (undo-tree-id501 . -11) (undo-tree-id502 . -11) (undo-tree-id503 . -11) (undo-tree-id504 . -11) (undo-tree-id505 . -11) (undo-tree-id506 . -11) (undo-tree-id507 . -11) (undo-tree-id508 . -11) (undo-tree-id509 . -11) (undo-tree-id510 . -11) (undo-tree-id511 . -11) (undo-tree-id512 . -11) (undo-tree-id513 . -11) (undo-tree-id514 . -11) (undo-tree-id515 . -11) (undo-tree-id516 . -11) (undo-tree-id517 . -11) (undo-tree-id518 . -11) (undo-tree-id519 . -11) (undo-tree-id520 . -11) (undo-tree-id521 . -11) (undo-tree-id522 . -11) (undo-tree-id523 . -11) (undo-tree-id524 . -11) (undo-tree-id525 . -11) (undo-tree-id526 . -11) (undo-tree-id527 . -11) (undo-tree-id528 . -11) (undo-tree-id529 . -11) (undo-tree-id530 . -11) (undo-tree-id531 . -11) (undo-tree-id532 . -11) (undo-tree-id533 . -11) (undo-tree-id534 . -11) (undo-tree-id535 . -11) (undo-tree-id536 . -11) (undo-tree-id537 . -11) (undo-tree-id538 . -11) (undo-tree-id539 . -11) (undo-tree-id540 . -11) (undo-tree-id541 . -11) (undo-tree-id542 . -11) (undo-tree-id543 . -11) (undo-tree-id544 . -11) (undo-tree-id545 . -11) (undo-tree-id546 . -11) (undo-tree-id547 . -11) (undo-tree-id548 . -11) (undo-tree-id549 . -11) (undo-tree-id550 . -11) (undo-tree-id551 . -11) (undo-tree-id552 . -11) (undo-tree-id553 . -11) (undo-tree-id554 . -11) (undo-tree-id555 . -11) (undo-tree-id556 . -11) (undo-tree-id557 . -11) (undo-tree-id558 . -11) (undo-tree-id559 . -11) (undo-tree-id560 . -11) (undo-tree-id561 . -11) (undo-tree-id562 . -11) (undo-tree-id563 . -11) (undo-tree-id564 . -11) (undo-tree-id565 . -11) (undo-tree-id566 . -11) (undo-tree-id567 . -11) (undo-tree-id568 . -11) (undo-tree-id569 . -11) (undo-tree-id570 . -11) (undo-tree-id571 . -11) (undo-tree-id572 . -11) (undo-tree-id573 . -11) (undo-tree-id574 . -11) (undo-tree-id575 . -11) (undo-tree-id576 . -11) (undo-tree-id577 . -11) (undo-tree-id578 . -11) (undo-tree-id579 . -11) (undo-tree-id580 . -11) (undo-tree-id581 . -11) (undo-tree-id582 . -11) (undo-tree-id583 . -11) (undo-tree-id584 . -11) (undo-tree-id585 . -11) (undo-tree-id586 . -11) (undo-tree-id587 . -11) (undo-tree-id588 . -11) (undo-tree-id589 . -11) (undo-tree-id590 . -11) (undo-tree-id591 . -11) (undo-tree-id592 . -11) (undo-tree-id593 . -11) (undo-tree-id594 . -11) (undo-tree-id595 . -11) (undo-tree-id596 . -11) (undo-tree-id597 . -11) (undo-tree-id598 . -11) (undo-tree-id599 . -11) (undo-tree-id600 . -11) (undo-tree-id601 . -11) (undo-tree-id602 . -11) (undo-tree-id603 . -11) (undo-tree-id604 . -11) (undo-tree-id605 . -11) (undo-tree-id606 . -11) (undo-tree-id607 . -11) (undo-tree-id608 . -11) (undo-tree-id609 . -11) (undo-tree-id610 . -11) (undo-tree-id611 . -11) (undo-tree-id612 . -11) (undo-tree-id613 . -11) (undo-tree-id614 . -11) (undo-tree-id615 . -11) (undo-tree-id616 . -11) (undo-tree-id617 . -11) (undo-tree-id618 . -11) (undo-tree-id619 . -11) (undo-tree-id620 . -11) (undo-tree-id621 . -11) (undo-tree-id622 . -11) (undo-tree-id623 . -11) (undo-tree-id624 . -11) (undo-tree-id625 . -11) (undo-tree-id626 . -11) (undo-tree-id627 . -11) (undo-tree-id628 . -11) (undo-tree-id629 . -11) (undo-tree-id630 . -11) (undo-tree-id631 . -11) (undo-tree-id632 . -11) (undo-tree-id633 . -11) (undo-tree-id634 . -11) (undo-tree-id635 . -11) (undo-tree-id636 . -11) (undo-tree-id637 . -11) (undo-tree-id638 . -11) (undo-tree-id639 . -11) (undo-tree-id640 . -11) (undo-tree-id641 . -11) (undo-tree-id642 . -11) (undo-tree-id643 . -11) (undo-tree-id644 . -11) (undo-tree-id645 . -11) (undo-tree-id646 . -11) (undo-tree-id647 . -11) (undo-tree-id648 . -11) (undo-tree-id649 . -11) (undo-tree-id650 . -11) (undo-tree-id651 . -11) (undo-tree-id652 . -11) (undo-tree-id653 . -11) (undo-tree-id654 . -11) (undo-tree-id655 . -11) (undo-tree-id656 . -11) (undo-tree-id657 . -11) (undo-tree-id658 . -11) (undo-tree-id659 . -11) (undo-tree-id660 . -11) (undo-tree-id661 . -11) (undo-tree-id662 . -11) (undo-tree-id663 . -11) (undo-tree-id664 . -11) (undo-tree-id665 . -11) (undo-tree-id666 . -11) (undo-tree-id667 . -11) (undo-tree-id668 . -11) (undo-tree-id669 . -11) (undo-tree-id670 . -11) (undo-tree-id671 . -11) (undo-tree-id672 . -11) (undo-tree-id673 . -11) (undo-tree-id674 . -11) (undo-tree-id675 . -11) (undo-tree-id676 . -11) (undo-tree-id677 . -11) (undo-tree-id678 . -11) (undo-tree-id679 . -11) (undo-tree-id680 . -11) (undo-tree-id681 . -11) (undo-tree-id682 . -11)) (25301 5201 423778 0) 0 nil])
nil
([nil nil ((2245 . 2248)) nil (25301 5240 236408 0) 0 nil])
([nil nil ((6863 . 6868)) ((#(" 'com" 0 5 (fontified t)) . 6863) (undo-tree-id439 . -5) (undo-tree-id440 . -5) (undo-tree-id441 . -5)) (25301 5201 423668 0) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-comment-delimiter-face fontified t)) . 2247) (undo-tree-id1044 . -1) (undo-tree-id1045 . -1) 2248) nil (25301 5240 236407 0) 0 nil])
nil
([nil nil ((2247 . 2251)) nil (25301 5240 236405 0) 0 nil])
([nil nil ((#("z" 0 1 (face font-lock-comment-face fontified t)) . -2248) (undo-tree-id1038 . -1) (undo-tree-id1039 . -1) (#("a" 0 1 (face font-lock-comment-face fontified t)) . -2249) (undo-tree-id1040 . -1) (undo-tree-id1041 . -1) (#("n" 0 1 (face font-lock-comment-face fontified t)) . -2250) (undo-tree-id1042 . -1) (undo-tree-id1043 . -1) 2251) nil (25301 5240 236404 0) 0 nil])
([nil nil ((2248 . 2253)) nil (25301 5240 236399 0) 0 nil])
([nil nil ((2253 . 2256)) nil (25301 5240 236398 0) 0 nil])
([nil nil ((2256 . 2258)) ((#("pa" 0 2 (face font-lock-comment-face fontified nil)) . 2256)) (25302 48585 54873 0) 0 nil])
([nil nil ((2253 . 2265) (#("compa" 0 3 (fontified nil face font-lock-comment-face) 3 5 (fontified nil face font-lock-comment-face)) . 2253)) ((2253 . 2258) (#("company-mode" 0 12 (fontified nil face font-lock-comment-face)) . 2253) (undo-tree-id40 . -12) (undo-tree-id41 . -12)) (25302 48585 526619 0) 0 nil])
([nil nil ((2265 . 2267)) ((#(", " 0 1 (fontified nil face font-lock-comment-face) 1 2 (fontified nil face font-lock-comment-face)) . 2265) (undo-tree-id42 . -1)) (25302 48585 797880 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified nil face font-lock-comment-face)) . 2266)) ((2266 . 2267)) (25302 48586 91414 0) 0 nil])
([nil nil ((#("," 0 1 (fontified nil face font-lock-comment-face)) . 2265) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1)) ((2265 . 2266) (t 25301 5240 245045 574000)) (25302 48586 450926 0) 0 nil])
([nil nil ((337 . 338) (347 . 348) (#("(" 0 1 (fontified nil)) . 347) (347 . 348) (t 25301 5240 245045 574000)) ((#("(" 0 1 (fontified nil)) . 347) (347 . 348) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . 347) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . 337)) (25302 48586 902532 0) 0 nil])
([nil nil ((#("is-company" 0 10 (fontified t)) . -338) (undo-tree-id71 . -10) (undo-tree-id72 . -10) 348) nil (25302 48645 343826 0) 0 nil])
([nil nil ((338 . 341)) nil (25302 48645 343825 0) 0 nil])
([nil nil ((338 . 344) (#("str" 0 3 (fontified t)) . -338) (undo-tree-id69 . -3) (undo-tree-id70 . -3) 341) nil (25302 48645 343824 0) 0 nil])
([nil nil ((344 . 349)) nil (25302 48645 343822 0) 0 nil])
([nil nil ((349 . 354)) nil (25302 48645 343821 0) 0 nil])
([nil nil ((#("[" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -352) (undo-tree-id63 . -1) (undo-tree-id64 . 1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (#("]" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . 353) (undo-tree-id67 . 1) (undo-tree-id68 . -1)) nil (25302 48645 343821 0) 0 nil])
([nil nil ((352 . 360)) nil (25302 48645 343817 0) 0 nil])
([nil nil ((349 . 366) (#("completion-" 0 11 (fontified t)) . -349) (undo-tree-id61 . -11) (undo-tree-id62 . -11) 360) nil (25302 48645 343816 0) 0 nil])
([nil nil ((368 . 371) (367 . 369) (#("\"" 0 1 (fontified nil)) . -367) (366 . 368)) nil (25302 48645 343814 0) 0 nil])
([nil nil ((371 . 373)) nil (25302 48645 343812 0) 0 nil])
([nil nil ((368 . 375) (#("compa" 0 5 (fontified t face font-lock-string-face)) . -368) (undo-tree-id59 . -5) (undo-tree-id60 . -5) 373) nil (25302 48645 343809 0) 0 nil])
([nil nil ((#("not is-company" 0 14 (fontified t)) . -2303) (undo-tree-id54 . -14) (undo-tree-id55 . -14) 2317 (t 25302 48645 352436 462000)) nil (25302 48796 70242 0) 0 nil])
([nil nil ((2303 . 2309)) nil (25302 48796 70239 0) 0 nil])
([nil nil ((#("g" 0 1 (fontified t)) . -2308) (undo-tree-id52 . -1) (undo-tree-id53 . -1) 2309) nil (25302 48796 70238 0) 0 nil])
([nil nil ((2308 . 2309)) nil (25302 48796 70235 0) 0 nil])
([nil nil ((#("q" 0 1 (fontified t)) . -2308) (undo-tree-id50 . -1) (undo-tree-id51 . -1) 2309) nil (25302 48796 70234 0) 0 nil])
([nil nil ((2308 . 2312)) nil (25302 48796 70231 0) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . -2310) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (#("y" 0 1 (fontified t)) . -2311) (undo-tree-id48 . -1) (undo-tree-id49 . -1) 2312) nil (25302 48796 70230 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 2309) (undo-tree-id44 . -1) (undo-tree-id45 . -1) 2310) nil (25302 48796 70225 0) 0 nil])
([nil nil ((#("=" 0 1 (fontified t)) . -2308) (undo-tree-id42 . -1) (undo-tree-id43 . -1) 2309) nil (25302 48796 70222 0) 0 nil])
([nil nil ((2308 . 2309)) nil (25302 48796 70219 0) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -2303) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (#("t" 0 1 (fontified t)) . -2304) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (#("r" 0 1 (fontified t)) . -2305) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (#("i" 0 1 (fontified t)) . -2306) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (#("n" 0 1 (fontified t)) . -2307) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (#("g" 0 1 (fontified t)) . -2308) (undo-tree-id40 . -1) (undo-tree-id41 . -1) 2309) nil (25302 48796 70217 0) 0 nil])
([nil nil ((2303 . 2308)) nil (25302 48796 70205 0) 0 nil])
([nil nil ((#("\\" 0 1 (fontified nil)) . -2308) (2308 . 2309)) nil (25302 48796 70204 0) 0 nil])
([nil nil ((2303 . 2309) (#("sting" 0 5 (fontified t)) . -2303) (undo-tree-id28 . -5) (undo-tree-id29 . -5) 2308) nil (25302 48796 70203 0) 0 nil])
([nil nil ((2309 . 2311)) nil (25302 48796 70200 0) 0 nil])
([nil nil ((2311 . 2319)) nil (25302 48796 70199 0) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -2318) (undo-tree-id26 . -1) (undo-tree-id27 . -1) 2319) nil (25302 48796 70198 0) 0 nil])
([nil nil ((2318 . 2325)) nil (25302 48796 70195 0) 0 nil])
([nil nil ((2314 . 2331) (#("completion-" 0 11 (fontified t)) . -2314) (undo-tree-id24 . -11) (undo-tree-id25 . -11) 2325) nil (25302 48796 70194 0) 0 nil])
([nil nil ((2332 . 2334) (#("\"" 0 1 (fontified nil)) . -2332) (2331 . 2333)) nil (25302 48796 70191 0) 0 nil])
([nil nil ((2333 . 2336)) nil (25302 48796 70189 0) 0 nil])
([nil nil ((2333 . 2338) (#("cor" 0 3 (fontified t face font-lock-string-face)) . -2333) (undo-tree-id22 . -3) (undo-tree-id23 . -3) 2336) nil (25302 48796 70188 0) 0 nil])
([nil nil ((#("is-company t" 0 12 (fontified t)) . -249) (undo-tree-id20 . -12) (undo-tree-id21 . -12) 261) nil (25302 48796 70185 0) 0 nil])
([nil nil ((249 . 255)) nil (25302 48796 70182 0) 0 nil])
([nil nil ((252 . 262) (#("com" 0 3 (fontified t)) . -252) (undo-tree-id18 . -3) (undo-tree-id19 . -3) 255) nil (25302 48796 70181 0) 0 nil])
([nil nil ((262 . 263)) nil (25302 48796 70178 0) 0 nil])
([nil nil ((252 . 269) (#("completion-" 0 11 (fontified t)) . -252) (undo-tree-id16 . -11) (undo-tree-id17 . -11) 263) nil (25302 48796 70176 0) 0 nil])
([nil nil ((269 . 270)) nil (25302 48796 70173 0) 0 nil])
([nil nil ((271 . 276) (270 . 272) (#("\"" 0 1 (fontified nil)) . -270) (270 . 271)) nil (25302 48796 70172 0) 0 nil])
([nil nil ((271 . 278) (#("compa" 0 5 (fontified t face font-lock-string-face)) . -271) (undo-tree-id14 . -5) (undo-tree-id15 . -5) 276) nil (25302 48796 70170 0) 0 nil])
([nil nil ((281 . 282)) nil (25302 48796 70167 0) 0 nil])
([nil nil ((289 . 291) (283 . 290) (282 . 284)) nil (25302 48796 70166 0) 0 nil])
([nil nil ((289 . 309) (#("my" 0 2 (fontified t)) . -289) (undo-tree-id12 . -2) (undo-tree-id13 . -2) 291) nil (25302 48796 70164 0) 0 nil])
([nil nil ((310 . 312) (#("\"" 0 1 (fontified nil)) . -310) (309 . 311)) nil (25302 48796 70161 0) 0 nil])
([nil nil ((311 . 314)) nil (25302 48796 70159 0) 0 nil])
([nil nil ((311 . 321) (#("lsp" 0 3 (fontified t face font-lock-string-face)) . -311) (undo-tree-id10 . -3) (undo-tree-id11 . -3) 314) nil (25302 48796 70158 0) 0 nil])
([nil nil ((323 . 326)) nil (25302 48796 70155 0) 0 nil])
([nil nil ((327 . 328) (326 . 328)) nil (25302 48796 70154 0) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -327) (undo-tree-id8 . -1) (undo-tree-id9 . -1) 328) nil (25302 48796 70153 0) 0 nil])
([nil nil ((327 . 333)) nil (25302 48796 70150 0) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -330) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (#("s" 0 1 (fontified t)) . -331) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (#("p" 0 1 (fontified t)) . -332) (undo-tree-id6 . -1) (undo-tree-id7 . -1) 333) nil (25302 48796 70148 0) 0 nil])
([nil nil ((330 . 333)) nil (25302 48796 70141 0) 0 nil])
([nil nil ((330 . 347) (#("enb" 0 3 (fontified t)) . -330) (undo-tree-id0 . -3) (undo-tree-id1 . -3) 333) nil (25302 48796 70139 0) 0 nil])
([nil nil ((349 . 350)) nil (25302 48796 70112 0) 0 nil])
([nil nil ((#("company" 0 7 (fontified t face font-lock-string-face)) . -271) (undo-tree-id58 . -7) (undo-tree-id59 . -7) 278 (t 25302 48796 80209 215000)) nil (25302 48802 659543 0) 0 nil])
([nil nil ((271 . 274)) nil (25302 48802 659541 0) 0 nil])
([nil nil ((271 . 281) (#("lsp" 0 3 (fontified t face font-lock-string-face)) . -271) (undo-tree-id56 . -3) (undo-tree-id57 . -3) 274) nil (25302 48802 659537 0) 0 nil])
([nil nil ((292 . 293) (t 25302 48802 666896 108000)) nil (25302 48865 927828 0) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -292) (undo-tree-id1 . -1) 293) nil (25302 48865 927826 0) 0 nil])
([nil nil ((292 . 299)) nil (25302 48865 927823 0) 0 nil])
([nil nil ((#("-" 0 1 (fontified t)) . -298) (undo-tree-id0 . -1) 299) nil (25302 48865 927820 0) 0 nil])
([nil nil ((298 . 300)) nil (25302 48865 927798 0) 0 nil])
([nil nil ((#("(when (string= my/completion-styles \"lsp-bridge\")
  (my/enable-lsp-bridge))
" 0 1 (fontified t face (rainbow-delimiters-depth-1-face)) 1 5 (fontified t face font-lock-keyword-face) 5 6 (fontified t) 6 7 (fontified t face (rainbow-delimiters-depth-2-face)) 7 36 (fontified t) 36 48 (fontified t face font-lock-string-face) 48 49 (fontified t face (rainbow-delimiters-depth-2-face)) 49 50 (fontified t) 50 52 (fontified t) 52 53 (fontified t face (rainbow-delimiters-depth-2-face)) 53 73 (fontified t) 73 74 (fontified t face (rainbow-delimiters-depth-2-face)) 74 75 (fontified t face (rainbow-delimiters-depth-1-face)) 75 76 (fontified t)) . 285) (undo-tree-id0 . -75) (undo-tree-id1 . -75) (undo-tree-id2 . 76) (undo-tree-id3 . -1) (undo-tree-id4 . 2) (undo-tree-id5 . -75) (undo-tree-id6 . 76) (undo-tree-id7 . -75) (t 25302 48865 939390 459000)) nil (25302 49173 393505 0) 0 nil])
([nil nil ((#("l" 0 1 (face font-lock-string-face fontified t)) . -271) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (#("s" 0 1 (face font-lock-string-face fontified t)) . -272) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (#("p" 0 1 (face font-lock-string-face fontified t)) . -273) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (#("-" 0 1 (face font-lock-string-face fontified t)) . -274) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (#("b" 0 1 (face font-lock-string-face fontified t)) . -275) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (#("r" 0 1 (face font-lock-string-face fontified t)) . -276) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (#("i" 0 1 (face font-lock-string-face fontified t)) . -277) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (#("d" 0 1 (face font-lock-string-face fontified t)) . -278) (undo-tree-id14 . -1) (#("g" 0 1 (face font-lock-string-face fontified t)) . -279) (undo-tree-id15 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -280) (undo-tree-id16 . -1) 281 (t 25302 49173 404016 296000)) nil (25302 49606 523741 0) 0 nil])
([nil nil ((271 . 278)) nil (25302 49606 523708 0) 0 nil])
([nil current ((#("
" 0 1 (fontified t)) . 280) (undo-tree-id17 . -1) (undo-tree-id18 . -1) 281 (t 25302 49606 531963 113000)) nil (25302 49609 945033 0) 0 nil])
nil
