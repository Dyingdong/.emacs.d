(undo-tree-save-format-version . 1)
"ff5c01fce8678febc96af624edcfd977a3e62c3c"
[nil nil nil nil (25292 16514 217111 0) 0 nil]
([nil nil ((2744 . 2745) (t 25284 21935 327057 735000)) nil (25292 16522 974429 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 2919 . 2920) (nil fontified nil 2745 . 2920) (2745 . 2920)) nil (25292 16522 974427 0) 0 nil])
([nil nil ((2920 . 2921)) nil (25292 16656 131654 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified nil)) . -2879) (#("  " 0 2 (fontified nil)) . -2858) (#("    " 0 4 (fontified nil)) . -2840) (#("    " 0 4 (fontified nil)) . -2819) (2920 . 2922) (#("	" 0 1 (fontified nil)) . -2920) (2793 . 2797) (#("		" 0 2 (fontified nil)) . -2793) (2775 . 2777) (#("	" 0 1 (fontified nil)) . -2775) 2747 (t 25292 16522 978141 446000)) nil (25292 16769 816787 0) 0 nil] [nil nil ((nil rear-nonsticky nil 2810 . 2811) (nil fontified nil 2752 . 2811) (2752 . 2811) 2775 (t 25292 16522 978141 446000)) ((#("(setf (alist-get ?e avy-dispatch-alist) 'avy-action-embark)" 0 1 (fontified nil) 1 5 (fontified nil face font-lock-keyword-face) 5 58 (fontified nil) 58 59 (fontified nil rear-nonsticky nil)) . 2752) (nil rear-nonsticky t 2810 . 2811)) (25292 16656 131393 0) 0 nil])
([nil nil ((2914 . 2915) (t 25292 16780 608521 994000)) nil (25293 29646 338526 0) 0 nil] [nil nil ((#("
  " 0 3 (fontified t)) . 2908) (undo-tree-id0 . -3) (undo-tree-id1 . -1) 2911) ((2908 . 2911)) (25292 16769 816731 0) 0 nil])
nil
([nil nil ((nil rear-nonsticky nil 3131 . 3132) (nil fontified nil 2915 . 3132) (2915 . 3132)) nil (25293 29646 338524 0) 0 nil])
nil
([nil nil ((#("  " 0 2 (fontified nil)) . -3097) (3132 . 3133)) nil (25293 29646 338520 0) 0 nil])
([nil nil ((3131 . 3132) (t 25293 29646 341941 237000)) nil (25294 5131 479158 0) 0 nil])
([nil nil ((2914 . 2915)) nil (25294 5131 479157 0) 0 nil])
([nil nil ((2915 . 2917)) nil (25294 5131 479156 0) 0 nil])
([nil nil ((#("R" 0 1 (fontified t)) . -2915) (undo-tree-id0 . -1) (#("f" 0 1 (fontified t)) . -2916) (undo-tree-id1 . -1) 2917) nil (25294 5131 479197 0) 0 nil])
([nil nil ((2915 . 2926)) nil (25294 5169 985837 0) 0 nil] [nil nil ((apply -3 2916 2948 undo--wrap-and-run-primitive-undo 2916 2948 ((2916 . 2919)))) ((apply 3 2916 2945 undo--wrap-and-run-primitive-undo 2916 2945 ((#(";; " 0 3 (fontified t face font-lock-comment-delimiter-face)) . 2916) 2950))) (25294 5131 479129 0) 0 nil])
([nil nil ((3143 . 3144)) nil (25294 5169 985836 0) 0 nil])
nil
([nil nil ((nil rear-nonsticky nil 5347 . 5348) (nil fontified nil 3144 . 5348) (3144 . 5348)) nil (25294 5169 985836 0) 0 nil])
([nil nil ((2926 . 2927)) nil (25294 5169 985835 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 2995 . 2996) (nil fontified nil 2927 . 2996) (2927 . 2996)) nil (25294 5169 985834 0) 0 nil])
([nil nil ((3213 . 3214)) nil (25294 5169 985832 0) 0 nil])
([nil nil ((nil fontified nil 3294 . 3295) (nil fontified nil 3226 . 3294) (nil fontified nil 3217 . 3226) (nil fontified nil 3214 . 3217) (3214 . 3295)) nil (25294 5169 985828 0) 0 nil])
([nil nil ((5331 . 5339) (#("       " 0 7 (fontified nil)) . 5331) (5316 . 5324) (#("       " 0 7 (fontified nil)) . 5316) (5233 . 5241) (#("       " 0 7 (fontified nil)) . 5233) (5191 . 5199) (#("       " 0 7 (fontified nil)) . 5191) (5171 . 5179) (#("       " 0 7 (fontified nil)) . 5171) (#("   " 0 3 (fontified nil)) . -5124) (#("   " 0 3 (fontified nil)) . -5089) (#("  " 0 2 (fontified nil)) . -4987) (4884 . 4894) (#("         " 0 9 (fontified nil)) . 4884) (4829 . 4851) (#("                     " 0 21 (fontified nil)) . 4829) (4751 . 4777) (#("                         " 0 25 (fontified nil)) . 4751) (4688 . 4716) (#("                           " 0 27 (fontified nil)) . 4688) (4647 . 4673) (#("                         " 0 25 (fontified nil)) . 4647) (4590 . 4616) (#("                         " 0 25 (fontified nil)) . 4590) (4535 . 4566) (#("                             " 0 28 (fontified nil) 28 29 (fontified nil)) . 4535) (#("     " 0 5 (fontified nil)) . -4514) (4409 . 4433) (#("                       " 0 23 (fontified nil)) . 4409) (4372 . 4394) (#("                     " 0 21 (fontified nil)) . 4372) (#("     " 0 5 (fontified nil)) . -3735) (#("     " 0 5 (fontified nil)) . -3679) (3623 . 3631) (#("     " 0 5 (fontified nil)) . 3623) (3609 . 3615) (#("    " 0 4 (fontified nil)) . 3609) (3599 . 3603) (#("   " 0 3 (fontified nil)) . 3599) (#("   " 0 3 (fontified nil)) . -3170) (#("   " 0 3 (fontified nil)) . -3134) (#("   " 0 3 (fontified nil)) . -3095) 3887 (t 25294 5169 988807 618000)) nil (25294 5531 530227 0) 0 nil])
([nil nil ((4990 . 4998) (#("centaur" 0 7 (fontified t)) . 4990) (4853 . 4861) (#("centaur" 0 7 (fontified t)) . 4853) (4120 . 4128) (#("centaur" 0 7 (fontified t face font-lock-function-name-face)) . 4120) (4009 . 4017) (#("centaur" 0 7 (fontified t face font-lock-function-name-face)) . 4009) (undo-tree-id131 . -7) (undo-tree-id132 . -7) (undo-tree-id133 . -7)) nil (25294 5531 530219 0) 0 nil])
([nil nil ((3834 . 3842) (#("centaur" 0 7 (fontified t)) . 3834) (3811 . 3819) (#("centaur" 0 7 (fontified t)) . 3811) (3761 . 3769) (#("centaur" 0 7 (fontified t)) . 3761) (3694 . 3702) (#("centaur" 0 7 (fontified t)) . 3694) (3078 . 3086) (#("centaur" 0 7 (fontified t)) . 3078) (5288 . 5296) (#("centaur" 0 7 (fontified t)) . 5288)) nil (25294 5531 530214 0) 0 nil])
([nil nil ((3842 . 3843)) nil (25294 5531 530211 0) 0 nil])
([nil nil ((#("y" 0 1 (fontified t)) . 3842)) nil (25294 5531 530210 0) 0 nil])
([nil nil ((123 . 124)) nil (25294 5531 530210 0) 0 nil])
([nil nil ((125 . 131) (124 . 126)) nil (25294 5531 530209 0) 0 nil])
([nil nil ((125 . 132) (#("requir" 0 6 (fontified t)) . -125) (undo-tree-id130 . -6) 131) nil (25294 5531 530207 0) 0 nil])
([nil nil ((132 . 141)) nil (25294 5531 530205 0) 0 nil])
([nil nil ((134 . 145) (#("init-cu" 0 7 (fontified t face font-lock-constant-face)) . -134) (undo-tree-id2 . -7) (undo-tree-id3 . -7) (undo-tree-id4 . -7) (undo-tree-id5 . -7) (undo-tree-id6 . -7) (undo-tree-id7 . -7) (undo-tree-id8 . -7) (undo-tree-id9 . -7) (undo-tree-id10 . -7) (undo-tree-id11 . -7) (undo-tree-id12 . -7) (undo-tree-id13 . -7) (undo-tree-id14 . -7) (undo-tree-id15 . -7) (undo-tree-id16 . -7) (undo-tree-id17 . -7) (undo-tree-id18 . -7) (undo-tree-id19 . -7) (undo-tree-id20 . -7) (undo-tree-id21 . -7) (undo-tree-id22 . -7) (undo-tree-id23 . -7) (undo-tree-id24 . -7) (undo-tree-id25 . -7) (undo-tree-id26 . -7) (undo-tree-id27 . -7) (undo-tree-id28 . -7) (undo-tree-id29 . -7) (undo-tree-id30 . -7) (undo-tree-id31 . -7) (undo-tree-id32 . -7) (undo-tree-id33 . -7) (undo-tree-id34 . -7) (undo-tree-id35 . -7) (undo-tree-id36 . -7) (undo-tree-id37 . -7) (undo-tree-id38 . -7) (undo-tree-id39 . -7) (undo-tree-id40 . -7) (undo-tree-id41 . -7) (undo-tree-id42 . -7) (undo-tree-id43 . -7) (undo-tree-id44 . -7) (undo-tree-id45 . -7) (undo-tree-id46 . -7) (undo-tree-id47 . -7) (undo-tree-id48 . -7) (undo-tree-id49 . -7) (undo-tree-id50 . -7) (undo-tree-id51 . -7) (undo-tree-id52 . -7) (undo-tree-id53 . -7) (undo-tree-id54 . -7) (undo-tree-id55 . -7) (undo-tree-id56 . -7) (undo-tree-id57 . -7) (undo-tree-id58 . -7) (undo-tree-id59 . -7) (undo-tree-id60 . -7) (undo-tree-id61 . -7) (undo-tree-id62 . -7) (undo-tree-id63 . -7) (undo-tree-id64 . -7) (undo-tree-id65 . -7) (undo-tree-id66 . -7) (undo-tree-id67 . -7) (undo-tree-id68 . -7) (undo-tree-id69 . -7) (undo-tree-id70 . -7) (undo-tree-id71 . -7) (undo-tree-id72 . -7) (undo-tree-id73 . -7) (undo-tree-id74 . -7) (undo-tree-id75 . -7) (undo-tree-id76 . -7) (undo-tree-id77 . -7) (undo-tree-id78 . -7) (undo-tree-id79 . -7) (undo-tree-id80 . -7) (undo-tree-id81 . -7) (undo-tree-id82 . -7) (undo-tree-id83 . -7) (undo-tree-id84 . -7) (undo-tree-id85 . -7) (undo-tree-id86 . -7) (undo-tree-id87 . -7) (undo-tree-id88 . -7) (undo-tree-id89 . -7) (undo-tree-id90 . -7) (undo-tree-id91 . -7) (undo-tree-id92 . -7) (undo-tree-id93 . -7) (undo-tree-id94 . -7) (undo-tree-id95 . -7) (undo-tree-id96 . -7) (undo-tree-id97 . -7) (undo-tree-id98 . -7) (undo-tree-id99 . -7) (undo-tree-id100 . -7) (undo-tree-id101 . -7) (undo-tree-id102 . -7) (undo-tree-id103 . -7) (undo-tree-id104 . -7) (undo-tree-id105 . -7) (undo-tree-id106 . -7) (undo-tree-id107 . -7) (undo-tree-id108 . -7) (undo-tree-id109 . -7) (undo-tree-id110 . -7) (undo-tree-id111 . -7) (undo-tree-id112 . -7) (undo-tree-id113 . -7) (undo-tree-id114 . -7) (undo-tree-id115 . -7) (undo-tree-id116 . -7) (undo-tree-id117 . -7) (undo-tree-id118 . -7) (undo-tree-id119 . -7) (undo-tree-id120 . -7) (undo-tree-id121 . -7) (undo-tree-id122 . -7) (undo-tree-id123 . -7) (undo-tree-id124 . -7) (undo-tree-id125 . -7) (undo-tree-id126 . -7) (undo-tree-id127 . -7) (undo-tree-id128 . -7) (undo-tree-id129 . -7) 141) nil (25294 5531 530201 0) 0 nil])
([nil nil ((146 . 147)) nil (25294 5531 530104 0) 0 nil])
([nil nil ((2938 . 2939) (t 25294 5531 535902 737000)) nil (25294 5651 476412 0) 0 nil])
([nil nil ((2939 . 2940)) nil (25294 5651 476411 0) 0 nil])
([nil nil ((5526 . 5527)) nil (25294 5651 476410 0) 0 nil])
([nil nil ((5527 . 5528)) nil (25294 5651 476481 0) 0 nil])
([nil nil ((#(";; Refer to https://github.com/seagle0128/.emacs.d/blob/master/lisp/init-funcs.el" 0 3 (fontified t face font-lock-comment-delimiter-face) 3 12 (fontified t face font-lock-comment-face) 12 80 (fontified t face font-lock-comment-face) 80 81 (rear-nonsticky t fontified t face font-lock-comment-face)) . 3232)) nil (25294 5752 38322 0) 0 nil] [nil nil ((3753 . 3754)) ((#("" 0 1 (fontified t)) . 3753) (undo-tree-id134 . -1) (undo-tree-id135 . -1)) (25294 5651 476405 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 3232) (undo-tree-id167 . -1)) nil (25294 5752 38322 0) 0 nil])
nil
([nil nil ((3231 . 3232)) nil (25294 5752 38321 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 4363 . 4364) (nil fontified nil 3232 . 4364) (3232 . 4364)) nil (25294 5752 38320 0) 0 nil])
([nil nil ((4364 . 4365)) nil (25294 5752 38319 0) 0 nil])
([nil nil ((#("centaur" 0 7 (fontified t face font-lock-function-name-face)) . -3239) (undo-tree-id165 . -7) (undo-tree-id166 . -7) 3246) nil (25294 5752 38318 0) 0 nil])
([nil nil ((3239 . 3246)) nil (25294 5752 38317 0) 0 nil])
([nil nil ((#("p" 0 1 (fontified t face font-lock-function-name-face)) . -3244) (undo-tree-id163 . -1) (#("n" 0 1 (fontified t face font-lock-function-name-face)) . -3245) (undo-tree-id164 . -1) 3246) nil (25294 5752 38316 0) 0 nil])
([nil nil ((3244 . 3247)) nil (25294 5752 38314 0) 0 nil])
([nil nil ((#("(defun dragonli-set-variable (variable value &optional no-save)
  \"Set the VARIABLE to VALUE, and return VALUE.
  Save to `custom-file' if NO-SAVE is nil.\"
  (customize-set-variable variable value)
  (when (and (not no-save)
             (file-writable-p custom-file))
    (with-temp-buffer
      (insert-file-contents custom-file)
      (goto-char (point-min))
      (while (re-search-forward
              (format \"^[\\t ]*[;]*[\\t ]*(setq %s .*)\" variable)
                               nil t)
  (replace-match (format \"(setq %s '%s)\" variable value) nil nil))
      (write-region nil nil custom-file)
      (message \"Saved %s (%s) to %s\" variable value custom-file))))

(define-minor-mode centaur-read-mode
  \"Minor Mode for better reading experience.\"
  :init-value nil
  :group centaur
  (if centaur-read-mode
      (progn
        (and (fboundp 'olivetti-mode) (olivetti-mode 1))
        (and (fboundp 'mixed-pitch-mode) (mixed-pitch-mode 1))
        (text-scale-set +2))
    (progn
      (and (fboundp 'olivetti-mode) (olivetti-mode -1))
      (and (fboundp 'mixed-pitch-mode) (mixed-pitch-mode -1))
      (text-scale-set 0))))

;; Pakcage repository (ELPA)
(defun set-package-archives (archives &optional refresh async no-save)
  \"Set the package archives (ELPA).
REFRESH is non-nil, will refresh archive contents.
ASYNC specifies whether to perform the downloads in the background.
Save to `custom-file' if NO-SAVE is nil.\"
  (interactive
    (list
      (intern
        (ivy-read \"Select package archives: \"
          (mapcar #'car dragonli-package-archives-alist)
          :preselect (symbol-name dragonli-package-archives)))))
  ;; Set option
  (dragonli-set-variable 'dragonli-package-archives archives no-save)

  ;; Refresh if need
  (and refresh (package-refresh-contents async))

  (message \"Set package archives to `%s'\" archives))
(defalias 'dragonli-set-package-archives #'set-package-archives)

;; Refer to https://emacs-china.org/t/elpa/11192
(defun dragonli-test-package-archives (&optional no-chart)
  \"Test connection speed of all package archives and display on chart.
Not displaying the chart if NO-CHART is non-nil.
Return the fastest package archive.\"
  (interactive)

  (let* ((durations (mapcar
                      (lambda (pair)
                        (let ((url (concat (cdr (nth 2 (cdr pair)))
                                     \"archive-contents\"))
                               (start (current-time)))
                          (message \"Fetching %s...\" url)
                          (ignore-errors
                            (url-copy-file url null-device t))
                          (float-time (time-subtract (current-time) start))))
                      dragonli-package-archives-alist))
          (fastest (car (nth (cl-position (apply #'min durations) durations)
                          dragonli-package-archives-alist))))

    ;; Display on chart
    (when (and (not no-chart)
            (require 'chart nil t)
            (require 'url nil t))
      (chart-bar-quickie
        'horizontal
        \"Speed test for the ELPA mirrors\"
        (mapcar (lambda (p) (symbol-name (car p))) dragonli-package-archives-alist)
        \"ELPA\"
        (mapcar (lambda (d) (* 1e3 d)) durations) \"ms\"))

    (message \"`%s' is the fastest package archive\" fastest)

    ;; Return the fastest
    fastest))" 0 1 (fontified t) 1 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t) 7 15 (fontified t face font-lock-function-name-face) 15 28 (fontified t face font-lock-function-name-face) 28 45 (fontified t) 45 54 (fontified t face font-lock-type-face) 54 64 (fontified t) 64 66 (fontified t) 66 123 (fontified t face font-lock-doc-face) 123 134 (fontified t face (font-lock-constant-face font-lock-doc-face)) 134 155 (fontified t face font-lock-doc-face) 155 201 (fontified t) 201 205 (fontified t face font-lock-keyword-face) 205 207 (fontified t) 207 210 (fontified t face font-lock-keyword-face) 210 274 (fontified t) 274 290 (fontified t face font-lock-keyword-face) 290 369 (fontified t) 369 374 (fontified t face font-lock-keyword-face) 374 416 (fontified t) 416 447 (fontified t face font-lock-string-face) 447 521 (fontified t) 521 536 (fontified t face font-lock-string-face) 536 619 (fontified t) 619 640 (fontified t face font-lock-string-face) 640 674 (fontified t) 674 691 (fontified t face font-lock-keyword-face) 691 692 (fontified t) 692 709 (fontified t face font-lock-function-name-face) 709 712 (fontified t) 712 755 (fontified t face font-lock-doc-face) 755 758 (fontified t) 758 769 (fontified t face font-lock-builtin-face) 769 776 (fontified t) 776 782 (fontified t face font-lock-builtin-face) 782 794 (fontified t) 794 796 (fontified t face font-lock-keyword-face) 796 822 (fontified t) 822 827 (fontified t face font-lock-keyword-face) 827 837 (fontified t) 837 840 (fontified t face font-lock-keyword-face) 840 894 (fontified t) 894 897 (fontified t face font-lock-keyword-face) 897 982 (fontified t) 982 987 (fontified t face font-lock-keyword-face) 987 995 (fontified t) 995 998 (fontified t face font-lock-keyword-face) 998 1051 (fontified t) 1051 1054 (fontified t face font-lock-keyword-face) 1054 1106 (fontified t) 1106 1132 (fontified t) 1132 1133 (rear-nonsticky t fontified t) 1133 1134 (fontified t) 1134 1135 (fontified t) 1135 1138 (fontified t face font-lock-comment-delimiter-face) 1138 1164 (fontified t face font-lock-comment-face) 1164 1165 (fontified t) 1165 1170 (fontified t face font-lock-keyword-face) 1170 1171 (fontified t) 1171 1191 (fontified t face font-lock-function-name-face) 1191 1202 (fontified t) 1202 1211 (fontified t face font-lock-type-face) 1211 1235 (fontified t) 1235 1237 (fontified t) 1237 1271 (fontified t face font-lock-doc-face) 1271 1322 (fontified t face font-lock-doc-face) 1322 1390 (fontified t face font-lock-doc-face) 1390 1399 (fontified t face font-lock-doc-face) 1399 1410 (fontified t face (font-lock-constant-face font-lock-doc-face)) 1410 1431 (fontified t face font-lock-doc-face) 1431 1432 (fontified t) 1432 1435 (fontified t) 1435 1446 (fontified t face font-lock-keyword-face) 1446 1447 (fontified t) 1447 1457 (fontified t) 1457 1471 (fontified t) 1471 1489 (fontified t) 1489 1516 (fontified t face font-lock-string-face) 1516 1517 (fontified t) 1517 1541 (fontified t) 1541 1549 (fontified t) 1549 1564 (fontified t) 1564 1574 (fontified t) 1574 1584 (fontified t) 1584 1594 (fontified t face font-lock-builtin-face) 1594 1608 (fontified t) 1608 1616 (fontified t) 1616 1639 (fontified t) 1639 1641 (fontified t) 1641 1644 (fontified t face font-lock-comment-delimiter-face) 1644 1655 (fontified t face font-lock-comment-face) 1655 1658 (fontified t) 1658 1666 (fontified t) 1666 1681 (fontified t) 1681 1689 (fontified t) 1689 1725 (fontified t) 1725 1728 (fontified t) 1728 1731 (fontified t face font-lock-comment-delimiter-face) 1731 1747 (fontified t face font-lock-comment-face) 1747 1750 (fontified t) 1750 1753 (fontified t face font-lock-keyword-face) 1753 1808 (fontified t) 1808 1834 (fontified t face font-lock-string-face) 1834 1836 (fontified t face (font-lock-constant-face font-lock-string-face)) 1836 1838 (fontified t face font-lock-string-face) 1838 1851 (fontified t) 1851 1859 (fontified t face font-lock-keyword-face) 1859 1861 (fontified t) 1861 1869 (fontified t face font-lock-function-name-face) 1869 1890 (fontified t face font-lock-function-name-face) 1890 1916 (fontified t) 1916 1919 (fontified t face font-lock-comment-delimiter-face) 1919 1965 (fontified t face font-lock-comment-face) 1965 1966 (fontified t) 1966 1971 (fontified t face font-lock-keyword-face) 1971 1972 (fontified t) 1972 1980 (fontified t face font-lock-function-name-face) 1980 2002 (fontified t face font-lock-function-name-face) 2002 2004 (fontified t) 2004 2013 (fontified t face font-lock-type-face) 2013 2026 (fontified t) 2026 2180 (fontified t face font-lock-doc-face) 2180 2184 (fontified t) 2184 2195 (fontified t face font-lock-keyword-face) 2195 2201 (fontified t) 2201 2205 (fontified t face font-lock-keyword-face) 2205 2249 (fontified t) 2249 2255 (fontified t face font-lock-keyword-face) 2255 2262 (fontified t) 2262 2263 (fontified t) 2263 2288 (fontified t) 2288 2291 (fontified t face font-lock-keyword-face) 2291 2368 (fontified t) 2368 2386 (fontified t face font-lock-string-face) 2386 2420 (fontified t) 2420 2470 (fontified t) 2470 2479 (fontified t) 2479 2495 (fontified t face font-lock-string-face) 2495 2512 (fontified t) 2512 2528 (fontified t) 2528 2541 (fontified t face font-lock-keyword-face) 2541 2542 (fontified t) 2542 2635 (fontified t) 2635 2638 (fontified t) 2638 2640 (fontified t) 2640 2664 (fontified t) 2664 2683 (fontified t) 2683 2705 (fontified t) 2705 2713 (fontified t) 2713 2749 (fontified t) 2749 2816 (fontified t) 2816 2842 (fontified t) 2842 2850 (fontified t) 2850 2878 (fontified t) 2878 2879 (fontified t) 2879 2883 (fontified t) 2883 2886 (fontified t face font-lock-comment-delimiter-face) 2886 2903 (fontified t face font-lock-comment-face) 2903 2908 (fontified t) 2908 2912 (fontified t face font-lock-keyword-face) 2912 2914 (fontified t) 2914 2917 (fontified t face font-lock-keyword-face) 2917 2933 (fontified t) 2933 2946 (fontified t) 2946 2953 (fontified t face font-lock-keyword-face) 2953 2955 (fontified t) 2955 2960 (fontified t face font-lock-constant-face) 2960 2968 (fontified t) 2968 2981 (fontified t) 2981 2988 (fontified t face font-lock-keyword-face) 2988 2990 (fontified t) 2990 2993 (fontified t face font-lock-constant-face) 2993 3002 (fontified t) 3002 3055 (fontified t) 3055 3074 (fontified t face font-lock-string-face) 3074 3081 (face font-lock-string-face fontified t) 3081 3088 (face font-lock-string-face fontified t) 3088 3089 (fontified t) 3089 3106 (fontified t) 3106 3112 (fontified t face font-lock-keyword-face) 3112 3139 (fontified t) 3139 3140 (fontified t) 3140 3148 (fontified t) 3148 3162 (fontified t) 3162 3173 (fontified t) 3173 3181 (fontified t) 3181 3187 (fontified t face font-lock-string-face) 3187 3205 (fontified t) 3205 3211 (fontified t face font-lock-keyword-face) 3211 3230 (fontified t) 3230 3238 (fontified t) 3238 3242 (fontified t face font-lock-string-face) 3242 3245 (fontified t) 3245 3259 (fontified t) 3259 3261 (fontified t face font-lock-string-face) 3261 3263 (fontified t face (font-lock-constant-face font-lock-string-face)) 3263 3296 (fontified t face font-lock-string-face) 3296 3311 (fontified t) 3311 3314 (fontified t face font-lock-comment-delimiter-face) 3314 3333 (fontified t face font-lock-comment-face) 3333 3345 (fontified t) 3345 3346 (rear-nonsticky t fontified t)) . 3232) (undo-tree-id136 . -3346) (undo-tree-id137 . -1919) (undo-tree-id138 . -1135) (undo-tree-id139 . -1796) (undo-tree-id140 . -1861) (undo-tree-id141 . -1861) (undo-tree-id142 . -1861) (undo-tree-id143 . -1850) (undo-tree-id144 . -1965) (undo-tree-id145 . -2683) (undo-tree-id146 . -2816) (undo-tree-id147 . -3089) (undo-tree-id148 . -1517) (undo-tree-id149 . -1574) (undo-tree-id150 . -1655) (undo-tree-id151 . -64) (undo-tree-id152 . -1654) (undo-tree-id153 . -1861) (undo-tree-id154 . -1678) (undo-tree-id155 . -1574) (undo-tree-id156 . -1541) (undo-tree-id157 . 3346) (undo-tree-id158 . -1) (undo-tree-id159 . 2676) (undo-tree-id160 . -671) (undo-tree-id161 . -7) (undo-tree-id162 . -3346)) nil (25294 5752 38312 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 6569 . 6570) (nil fontified nil 3232 . 6570) (3232 . 6570)) nil (25294 5752 38293 0) 0 nil])
([nil nil ((6390 . 6398) (#("       " 0 7 (fontified t)) . 6390) (6375 . 6383) (#("       " 0 7 (fontified t)) . 6375) (6292 . 6300) (#("       " 0 7 (fontified t)) . 6292) (6250 . 6258) (#("       " 0 7 (fontified t)) . 6250) (6230 . 6238) (#("       " 0 7 (fontified t)) . 6230) (#("   " 0 3 (fontified t)) . -6183) ("   " . -6148) ("  " . -6046) (5943 . 5953) ("         " . 5943) (5888 . 5910) ("                     " . 5888) (5810 . 5836) ("                         " . 5810) (5747 . 5775) ("                           " . 5747) (5706 . 5732) ("                         " . 5706) (5649 . 5675) ("                         " . 5649) (5594 . 5625) ("                             " . 5594) ("     " . -5573) (5468 . 5492) ("                       " . 5468) (5431 . 5453) ("                     " . 5431) ("     " . -4794) ("     " . -4738) (4682 . 4690) (#("     " 0 5 (fontified t)) . 4682) (4668 . 4674) (#("    " 0 4 (fontified t)) . 4668) (4658 . 4662) (#("   " 0 3 (fontified t)) . 4658) (#("  " 0 2 (fontified t)) . -4167) (#("  " 0 2 (fontified t)) . -4106) (#("  " 0 2 (fontified t)) . -4051) (#("  " 0 2 (fontified t)) . -4038) (3709 . 3717) (#("  " 0 2 (fontified t)) . 3709) (#("                " 0 16 (fontified t)) . -3702) (3636 . 3637) (#("   " 0 3 (fontified t)) . -3466) 6570) nil (25294 6346 683691 0) 0 nil])
([nil nil ((#("dragonli" 0 8 (fontified t)) . -3104) (undo-tree-id171 . -8) (undo-tree-id172 . -8) (undo-tree-id173 . -8) 3112 (t 25294 5752 42059 845000)) nil (25294 6349 829439 0) 0 nil] [nil nil ((nil rear-nonsticky nil 3110 . 3111) (nil fontified nil 3104 . 3111) (3104 . 3111) (t 25294 5752 42059 845000)) ((#("centaur" 0 6 (fontified nil) 6 7 (fontified nil rear-nonsticky nil)) . 3104) (undo-tree-id168 . -7) (undo-tree-id169 . -7) (undo-tree-id170 . -7) (nil rear-nonsticky t 3110 . 3111)) (25294 6346 683433 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 3110 . 3111) (nil fontified nil 3104 . 3111) (3104 . 3111)) nil (25294 6349 829427 0) 0 nil])
nil
([nil nil ((#("
(define-minor-mode centaur-read-mode
  \"Minor Mode for better reading experience.\"
  :init-value nil
  :group centaur
  (if centaur-read-mode
    (progn
      (and (fboundp 'olivetti-mode) (olivetti-mode 1))
      (and (fboundp 'mixed-pitch-mode) (mixed-pitch-mode 1))
      (text-scale-set +2))
    (progn
      (and (fboundp 'olivetti-mode) (olivetti-mode -1))
      (and (fboundp 'mixed-pitch-mode) (mixed-pitch-mode -1))
      (text-scale-set 0))))
" 0 2 (fontified t) 2 19 (face font-lock-keyword-face fontified t) 19 20 (fontified t) 20 37 (face font-lock-function-name-face fontified t) 37 40 (fontified t) 40 83 (face font-lock-doc-face fontified t) 83 86 (fontified t) 86 97 (face font-lock-builtin-face fontified t) 97 104 (fontified t) 104 110 (face font-lock-builtin-face fontified t) 110 122 (fontified t) 122 124 (face font-lock-keyword-face fontified t) 124 148 (fontified t) 148 153 (face font-lock-keyword-face fontified t) 153 161 (fontified t) 161 164 (face font-lock-keyword-face fontified t) 164 216 (fontified t) 216 219 (face font-lock-keyword-face fontified t) 219 270 (fontified t) 270 302 (fontified t) 302 307 (face font-lock-keyword-face fontified t) 307 315 (fontified t) 315 318 (face font-lock-keyword-face fontified t) 318 371 (fontified t) 371 374 (face font-lock-keyword-face fontified t) 374 454 (fontified t)) . 3890) (undo-tree-id0 . -1) (undo-tree-id1 . -270) (undo-tree-id2 . -453) (undo-tree-id3 . -453) (undo-tree-id4 . -453) (t 25294 6349 832919 140000)) nil (25294 8466 661567 0) 0 nil])
([nil nil ((apply -27 5651 6019 undo--wrap-and-run-primitive-undo 5651 6019 ((5963 . 5966) (5945 . 5948) (5859 . 5862) (5814 . 5817) (5791 . 5794) (5763 . 5766) (5726 . 5729) (5688 . 5691) (5655 . 5658))) (t 25294 8466 665156 180000)) nil (25294 8776 692142 0) 0 nil])
([nil nil ((apply 30 5627 5988 undo--wrap-and-run-primitive-undo 5627 5988 ((#(";; " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -5936) (#(";; " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -5921) (#(";; " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -5838) (#(";; " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -5796) (#(";; " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -5776) (#(";; " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -5751) (#(";; " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -5717) (#(";; " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -5682) (#(";; " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -5652) (#(";; " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -5631) 5627)) (t 25294 8776 695580 760000)) nil (25294 9346 545799 0) 0 nil])
([nil nil ((6094 . 6095) (t 25294 9346 548373 381000)) nil (25294 51860 153005 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 6292 . 6293) (nil fontified nil 6205 . 6293) (nil fontified nil 6202 . 6205) (nil fontified nil 6178 . 6202) (nil fontified nil 6135 . 6178) (nil fontified nil 6129 . 6135) (nil fontified nil 6101 . 6129) (nil fontified nil 6100 . 6101) (nil fontified nil 6095 . 6100) (nil fontified nil 6094 . 6095) (6094 . 6293)) nil (25294 51860 153003 0) 0 nil])
([nil nil ((6293 . 6294)) nil (25294 51860 153000 0) 0 nil])
([nil nil ((6094 . 6095)) nil (25294 51860 152999 0) 0 nil])
([nil nil ((6094 . 6100)) nil (25294 51860 152998 0) 0 nil])
([nil nil ((6100 . 6106)) nil (25294 51860 152998 0) 0 nil])
([nil nil ((6106 . 6114)) nil (25294 51860 152997 0) 0 nil])
([nil nil ((6114 . 6120)) nil (25294 51860 152996 0) 0 nil])
([nil nil ((#("f" 0 1 (face font-lock-comment-face fontified t)) . -6097) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) 6098) nil (25294 51860 152992 0) 0 nil])
([nil nil ((6097 . 6098)) nil (25294 51860 152914 0) 0 nil])
([nil nil ((6321 . 6322) (t 25294 51860 156776 994000)) nil (25295 24438 661362 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 6540 . 6541) (nil fontified nil 6427 . 6541) (nil fontified nil 6422 . 6427) (nil fontified nil 6404 . 6422) (nil fontified nil 6396 . 6404) (nil fontified nil 6390 . 6396) (nil fontified nil 6383 . 6390) (nil fontified nil 6353 . 6383) (nil fontified nil 6329 . 6353) (nil fontified nil 6328 . 6329) (nil fontified nil 6323 . 6328) (nil fontified nil 6322 . 6323) (6322 . 6541)) nil (25295 24438 661361 0) 0 nil])
([nil nil ((#("                 " 0 17 (fontified nil)) . -6505) (6541 . 6542)) nil (25295 24438 661358 0) 0 nil])
([nil nil ((6525 . 6526)) nil (25295 24438 661357 0) 0 nil])
([nil nil ((6504 . 6518) (#("           " 0 11 (fontified nil)) . 6504) (6439 . 6451) (#("         " 0 9 (fontified nil)) . 6439) (6418 . 6428) (#("       " 0 7 (fontified nil)) . 6418) (6407 . 6415) (#("      " 0 6 (fontified nil)) . 6407) (6391 . 6395) (#("   " 0 3 (fontified nil)) . 6391) (6383 . 6387) (#("   " 0 3 (fontified nil)) . 6383) 6526) nil (25295 24438 661356 0) 0 nil])
([nil nil ((6321 . 6322)) nil (25295 24438 661353 0) 0 nil])
([nil nil ((6322 . 6327)) nil (25295 24438 661353 0) 0 nil])
([nil nil ((#("q" 0 1 (face font-lock-comment-face fontified t)) . -6325) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (#("u" 0 1 (face font-lock-comment-face fontified t)) . -6326) (undo-tree-id3 . -1) (undo-tree-id4 . -1) 6327) nil (25295 24438 661351 0) 0 nil])
([nil nil ((6325 . 6327)) nil (25295 24438 661333 0) 0 nil])
([nil nil ((6327 . 6336)) nil (25295 24438 661328 0) 0 nil])
([nil nil ((6336 . 6337) (t 25295 24438 664723 420000)) nil (25295 24753 643234 0) 0 nil])
([nil nil ((6337 . 6344)) nil (25295 24753 643233 0) 0 nil])
([nil nil ((#("y" 0 1 (face font-lock-comment-face fontified t)) . -6340) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (#("o" 0 1 (face font-lock-comment-face fontified t)) . -6341) (undo-tree-id51 . -1) (#("n" 0 1 (face font-lock-comment-face fontified t)) . -6342) (undo-tree-id52 . -1) (#("g" 0 1 (face font-lock-comment-face fontified t)) . -6343) (undo-tree-id53 . -1) 6344) nil (25295 24753 643232 0) 0 nil])
([nil nil ((6340 . 6345)) nil (25295 24753 643228 0) 0 nil])
([nil nil ((#("（" 0 1 (face font-lock-comment-face fontified nil)) . -6343) (undo-tree-id43 . -1) (undo-tree-id44 . 1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (#("）" 0 1 (face font-lock-comment-face fontified t)) . 6344) (undo-tree-id47 . 1) (undo-tree-id48 . -1)) nil (25295 24753 643228 0) 0 nil])
([nil nil ((6343 . 6344) (#(")" 0 1 (face font-lock-comment-face fontified nil)) . -6343) (6343 . 6344)) nil (25295 24753 643224 0) 0 nil])
([nil nil ((#(")" 0 1 (face font-lock-comment-face fontified t)) . -6343) (undo-tree-id40 . -1) (undo-tree-id41 . 1) (undo-tree-id42 . -1) 6344) nil (25295 24753 643223 0) 0 nil])
([nil nil ((6344 . 6351) (6343 . 6345)) nil (25295 24753 643220 0) 0 nil])
([nil nil ((6351 . 6355)) nil (25295 24753 643220 0) 0 nil])
([nil nil ((6355 . 6356)) nil (25295 24753 643219 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 6398 . 6399) (nil fontified nil 6398 . 6399) (nil fontified nil 6374 . 6398) (nil fontified nil 6363 . 6374) (nil fontified nil 6362 . 6363) (nil fontified nil 6361 . 6362) (nil fontified nil 6356 . 6361) (6356 . 6399)) nil (25295 24753 643218 0) 0 nil])
([nil nil ((6120 . 6121)) nil (25295 24753 643217 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 6183 . 6184) (nil fontified nil 6183 . 6184) (nil fontified nil 6182 . 6183) (nil fontified nil 6158 . 6182) (nil fontified nil 6147 . 6158) (nil fontified nil 6146 . 6147) (nil fontified nil 6145 . 6146) (nil fontified nil 6140 . 6145) (nil fontified nil 6135 . 6140) (nil fontified nil 6127 . 6135) (nil fontified nil 6124 . 6127) (nil fontified nil 6121 . 6124) (6121 . 6184)) nil (25295 24753 643216 0) 0 nil])
([nil nil ((6120 . 6121)) nil (25295 24753 643213 0) 0 nil])
([nil nil ((#("me-org-mode-remove-stars" 0 24 (face font-lock-comment-face fontified t)) . -6159) (undo-tree-id5 . -24) (undo-tree-id6 . -24) (undo-tree-id7 . -24) (undo-tree-id8 . -24) (undo-tree-id9 . -24) (undo-tree-id10 . -24) (undo-tree-id11 . -24) (undo-tree-id12 . -24) (undo-tree-id13 . -24) (undo-tree-id14 . -24) (undo-tree-id15 . -24) (undo-tree-id16 . -24) (undo-tree-id17 . -24) (undo-tree-id18 . -24) (undo-tree-id19 . -24) (undo-tree-id20 . -24) (undo-tree-id21 . -24) (undo-tree-id22 . -24) (undo-tree-id23 . -24) (undo-tree-id24 . -24) (undo-tree-id25 . -24) (undo-tree-id26 . -24) (undo-tree-id27 . -24) (undo-tree-id28 . -24) (undo-tree-id29 . -24) (undo-tree-id30 . -24) (undo-tree-id31 . -24) (undo-tree-id32 . -24) (undo-tree-id33 . -24) (undo-tree-id34 . -24) (undo-tree-id35 . -24) (undo-tree-id36 . -24) (undo-tree-id37 . -24) (undo-tree-id38 . -24) (undo-tree-id39 . -24) 6183) nil (25295 24753 643211 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 6186 . 6187) (nil fontified nil 6159 . 6187) (6159 . 6187)) nil (25295 24753 643182 0) 0 nil])
([nil nil ((6189 . 6190) (t 25295 24753 646782 413000)) nil (25295 24789 798656 0) 0 nil])
([nil nil ((#("
" 0 1 (face font-lock-comment-face fontified t)) . 6189) (undo-tree-id59 . -1) (undo-tree-id60 . -1) 6190) nil (25295 24789 798655 0) 0 nil])
([nil nil ((6121 . 6122)) nil (25295 24789 798653 0) 0 nil])
([nil nil ((6122 . 6127)) nil (25295 24789 798652 0) 0 nil])
([nil nil ((#("q" 0 1 (face font-lock-comment-face fontified t)) . -6125) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (#("u" 0 1 (face font-lock-comment-face fontified t)) . -6126) (undo-tree-id58 . -1) 6127) nil (25295 24789 798651 0) 0 nil])
([nil nil ((6125 . 6127)) nil (25295 24789 798649 0) 0 nil])
([nil nil ((6127 . 6130)) nil (25295 24789 798649 0) 0 nil])
([nil nil ((#("的" 0 1 (face font-lock-comment-face fontified t)) . -6129) (undo-tree-id55 . -1) 6130) nil (25295 24789 798648 0) 0 nil])
([nil nil ((6129 . 6133)) nil (25295 24789 798646 0) 0 nil])
([nil nil ((#("啊" 0 1 (face font-lock-comment-face fontified t)) . -6132) (undo-tree-id54 . -1) 6133) nil (25297 33737 360463 0) 0 nil])
([nil nil ((6132 . 6137)) ((#("后的省略号" 0 5 (face font-lock-comment-face fontified t)) . 6132) (undo-tree-id2 . -5) (undo-tree-id3 . -5)) (25297 33742 771543 0) 0 nil])
([nil nil ((6137 . 6149)) ((#("，来自 org-bars" 0 12 (face font-lock-comment-face fontified t)) . 6137) (undo-tree-id0 . -12) (undo-tree-id1 . -12)) (25297 33744 782199 0) 0 nil])
([nil nil ((6149 . 6154)) ((#(" 的文档。" 0 5 (face font-lock-comment-face fontified t)) . 6149)) (25297 33747 413937 0) 0 nil])
([nil nil ((6718 . 6719)) ((#("
" 0 1 (fontified t)) . 6718) (t 25295 25334 619620 634000)) (25297 33755 400436 0) 0 nil])
([nil nil ((6743 . 6744) (t 25295 25334 619620 634000)) nil (25297 33775 752306 0) 0 nil] [nil nil ((6744 . 6745) (t 25295 25334 619620 634000)) ((#("
" 0 1 (fontified t)) . 6744)) (25297 33725 458218 0) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -6743) (undo-tree-id12 . -1) (undo-tree-id13 . -1) 6744) nil (25297 33775 752305 0) 0 nil])
nil
([nil nil ((6743 . 6744)) nil (25297 33775 752302 0) 0 nil])
([nil nil ((6722 . 6723)) nil (25297 33775 752301 0) 0 nil])
([nil nil ((6722 . 6723)) nil (25297 33775 752300 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 7383 . 7384) (nil fontified nil 7338 . 7384) (nil fontified nil 7335 . 7338) (nil fontified nil 7307 . 7335) (nil fontified nil 7298 . 7307) (nil fontified nil 7290 . 7298) (nil fontified nil 7283 . 7290) (nil fontified nil 7277 . 7283) (nil fontified nil 7272 . 7277) (nil fontified nil 7196 . 7272) (nil fontified nil 7192 . 7196) (nil fontified nil 7164 . 7192) (nil fontified nil 7146 . 7164) (nil fontified nil 7125 . 7146) (nil fontified nil 7122 . 7125) (nil fontified nil 7068 . 7122) (nil fontified nil 7065 . 7068) (nil fontified nil 7063 . 7065) (nil fontified nil 7059 . 7063) (nil fontified nil 7019 . 7059) (nil fontified nil 7017 . 7019) (nil fontified nil 6981 . 7017) (nil fontified nil 6979 . 6981) (nil fontified nil 6925 . 6979) (nil fontified nil 6914 . 6925) (nil fontified nil 6906 . 6914) (nil fontified nil 6904 . 6906) (nil fontified nil 6895 . 6904) (nil fontified nil 6892 . 6895) (nil fontified nil 6886 . 6892) (nil fontified nil 6853 . 6886) (nil fontified nil 6826 . 6853) (nil fontified nil 6822 . 6826) (nil fontified nil 6768 . 6822) (nil fontified nil 6759 . 6768) (nil fontified nil 6751 . 6759) (nil fontified nil 6733 . 6751) (nil fontified nil 6732 . 6733) (nil fontified nil 6724 . 6732) (nil fontified nil 6723 . 6724) (6723 . 7384)) nil (25297 33775 752297 0) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . -6724) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (#("l" 0 1 (fontified t)) . -6725) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (#("-" 0 1 (face font-lock-keyword-face fontified t)) . -6726) (undo-tree-id10 . -1) (undo-tree-id11 . -1) 6727) nil (25297 33775 752283 0) 0 nil])
([nil nil ((#("(defun pretty-hydra-title (title &optional icon-type icon-name
                                 &key face height v-adjust)
    \"Add an icon in the hydra title.\"
    (let ((face (or face `(:foreground ,(face-background 'highlight))))
           (height (or height 1.0))
           (v-adjust (or v-adjust 0.0)))
      (concat
        (when (and (icon-displayable-p) icon-type icon-name)
          (let ((f (intern (format \"all-the-icons-%s\" icon-type))))
            (when (fboundp f)
              (concat
                (apply f (list icon-name :face face :height height :v-adjust v-adjust))
                \" \"))))
        (propertize title 'face face))))
" 0 1 (fontified t) 1 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t) 7 25 (face font-lock-function-name-face fontified t) 25 33 (fontified t) 33 42 (face font-lock-type-face fontified t) 42 96 (fontified t) 96 100 (face font-lock-type-face fontified t) 100 127 (fontified t) 127 160 (face font-lock-doc-face fontified t) 160 166 (fontified t) 166 169 (face font-lock-keyword-face fontified t) 169 178 (fontified t) 178 180 (face font-lock-keyword-face fontified t) 180 188 (fontified t) 188 199 (face font-lock-builtin-face fontified t) 199 253 (fontified t) 253 255 (face font-lock-keyword-face fontified t) 255 291 (fontified t) 291 293 (face font-lock-keyword-face fontified t) 293 333 (fontified t) 333 337 (face font-lock-keyword-face fontified t) 337 339 (fontified t) 339 342 (face font-lock-keyword-face fontified t) 342 396 (fontified t) 396 399 (face font-lock-keyword-face fontified t) 399 420 (fontified t) 420 438 (face font-lock-string-face fontified t) 438 466 (fontified t) 466 470 (face font-lock-keyword-face fontified t) 470 546 (fontified t) 546 551 (face font-lock-builtin-face fontified t) 551 557 (fontified t) 557 564 (face font-lock-builtin-face fontified t) 564 572 (fontified t) 572 581 (face font-lock-builtin-face fontified t) 581 609 (fontified t) 609 612 (face font-lock-string-face fontified t) 612 658 (fontified t)) . 6723) (undo-tree-id0 . -1) (undo-tree-id1 . -63) (undo-tree-id2 . -658) (undo-tree-id3 . -657) (undo-tree-id4 . -657) (undo-tree-id5 . 658) (undo-tree-id6 . -1) (undo-tree-id7 . 2) (undo-tree-id8 . -657) (t 25297 33775 757586 932000)) nil (25297 34641 844834 0) 0 nil])
([nil nil ((6719 . 6720) (t 25297 34641 849107 244000)) nil (25300 4812 255323 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 10916 . 10917) (nil fontified nil 6720 . 10917) (6720 . 10917)) nil (25300 4812 255321 0) 0 nil])
([nil nil ((10917 . 10918)) nil (25300 4812 255316 0) 0 nil])
([nil nil ((#(";; Update
(defun update-config ()
  \"Update Centaur Emacs configurations to the latest version.\"
  (interactive)
  (let ((dir (expand-file-name user-emacs-directory)))
    (unless (file-exists-p dir)
      (user-error \"\\\"%s\\\" doesn't exist\" dir))

    (message \"Updating configurations...\")
    (cd dir)
    (shell-command \"git pull\")
    (message \"Updating configurations...done\")))
(defalias 'centaur-update-config #'update-config)

(defvar centaur--updating-packages nil)
(defun update-packages (&optional force sync)
  \"Refresh package contents and update all packages.
If FORCE is non-nil, the updating process will be restarted by force.
If SYNC is non-nil, the updating process is synchronous.\"
  (interactive)

  (if (process-live-p centaur--updating-packages)
      (when force
        (kill-process centaur--updating-packages)
        (setq centaur--updating-packages nil))
    (setq centaur--updating-packages nil))

  (message \"Updating packages...\")
  (unless centaur--updating-packages
    (if (and (not sync)
             (require 'async nil t))
        (setq centaur--updating-packages
              (async-start
               `(lambda ()
                  ,(async-inject-variables \"\\\\`\\\\(load-path\\\\)\\\\'\")
                  (require 'init-funcs)
                  (require 'init-package)
                  (upgrade-packages)
                  (with-current-buffer auto-package-update-buffer-name
                    (buffer-string)))
               (lambda (result)
                 (setq centaur--updating-packages nil)
                 (message \"%s\" result)
                 (message \"Updating packages...done\"))))
      (upgrade-packages)
      (message \"Updating packages...done\"))))
(defalias 'centaur-update-packages #'update-packages)

(defvar centaur--updating nil)
(defun update-config-and-packages(&optional force sync)
  \"Update confgiurations and packages.
If FORCE is non-nil, the updating process will be restarted by force.
If SYNC is non-nil, the updating process is synchronous.\"
  (interactive \"P\")

  (if (process-live-p centaur--updating)
      (when force
        (kill-process centaur--updating)
        (setq centaur--updating nil))
    (setq centaur--updating nil))

  (message \"Updating Centaur Emacs...\")
  (unless centaur--updating
    (if (and (not sync)
             (require 'async nil t))
        (setq centaur--updating
              (async-start
               `(lambda ()
                  ,(async-inject-variables \"\\\\`\\\\(load-path\\\\)\\\\'\")
                  (require 'init-funcs)
                  (require 'init-package)
                  (update-config)
                  (update-packages nil t)
                  (with-current-buffer auto-package-update-buffer-name
                    (buffer-string)))
               (lambda (result)
                 (setq centaur--updating nil)
                 (message \"%s\" result)
                 (message \"Updating Centaur Emacs...done\"))))
      (update-config)
      (update-packages nil t)
      (message \"Updating Centaur Emacs...done\"))))
(defalias 'centaur-update #'update-config-and-packages)

(defun update-all()
  \"Update dotfiles, org files, configurations and packages to the latest.\"
  (interactive)
  (update-org)
  (update-dotfiles)
  (update-config-and-packages))
(defalias 'centaur-update-all #'update-all)

(defun update-dotfiles ()
  \"Update the dotfiles to the latest version.\"
  (interactive)
  (let ((dir (or (getenv \"DOTFILES\")
                 (expand-file-name \"~/.dotfiles/\"))))
    (if (file-exists-p dir)
        (progn
          (message \"Updating dotfiles...\")
          (cd dir)
          (shell-command \"git pull\")
          (message \"Updating dotfiles...done\"))
      (message \"\\\"%s\\\" doesn't exist\" dir))))
(defalias 'centaur-update-dotfiles #'update-dotfiles)

(defun update-org ()
  \"Update Org files to the latest version.\"
  (interactive)
  (let ((dir (expand-file-name \"~/org/\")))
    (if (file-exists-p dir)
        (progn
          (message \"Updating org files...\")
          (cd dir)
          (shell-command \"git pull\")
          (message \"Updating org files...done\"))
      (message \"\\\"%s\\\" doesn't exist\" dir))))
(defalias 'centaur-update-org #'update-org)
" 0 3 (fontified t face font-lock-comment-delimiter-face) 3 10 (fontified t face font-lock-comment-face) 10 11 (fontified t) 11 16 (fontified t face font-lock-keyword-face) 16 17 (fontified t) 17 30 (fontified t face font-lock-function-name-face) 30 34 (fontified t) 34 36 (fontified t) 36 96 (fontified t face font-lock-doc-face) 96 97 (fontified t) 97 100 (fontified t) 100 111 (fontified t face font-lock-keyword-face) 111 113 (fontified t) 113 116 (fontified t) 116 119 (fontified t face font-lock-keyword-face) 119 168 (fontified t) 168 173 (fontified t) 173 179 (fontified t face font-lock-keyword-face) 179 200 (fontified t) 200 207 (fontified t) 207 217 (fontified t face font-lock-warning-face) 217 218 (fontified t) 218 240 (fontified t face font-lock-string-face) 240 247 (fontified t) 247 248 (fontified t) 248 261 (fontified t) 261 289 (fontified t face font-lock-string-face) 289 291 (fontified t) 291 304 (fontified t) 304 323 (fontified t) 323 333 (fontified t face font-lock-string-face) 333 335 (fontified t) 335 348 (fontified t) 348 380 (fontified t face font-lock-string-face) 380 384 (fontified t) 384 385 (fontified t) 385 393 (fontified t face font-lock-keyword-face) 393 395 (fontified t) 395 416 (fontified t face font-lock-function-name-face) 416 434 (fontified t) 434 435 (fontified t) 435 436 (fontified t) 436 442 (fontified t face font-lock-keyword-face) 442 443 (fontified t) 443 469 (fontified t face font-lock-variable-name-face) 469 475 (fontified t) 475 476 (fontified t) 476 481 (fontified t face font-lock-keyword-face) 481 482 (fontified t) 482 497 (fontified t face font-lock-function-name-face) 497 499 (fontified t) 499 508 (fontified t face font-lock-type-face) 508 521 (fontified t) 521 523 (fontified t) 523 574 (fontified t face font-lock-doc-face) 574 644 (fontified t face font-lock-doc-face) 644 701 (fontified t face font-lock-doc-face) 701 702 (fontified t) 702 705 (fontified t) 705 716 (fontified t face font-lock-keyword-face) 716 718 (fontified t) 718 719 (fontified t) 719 722 (fontified t) 722 724 (fontified t face font-lock-keyword-face) 724 769 (fontified t) 769 776 (fontified t) 776 780 (fontified t face font-lock-keyword-face) 780 787 (fontified t) 787 837 (fontified t) 837 846 (fontified t) 846 850 (fontified t face font-lock-keyword-face) 850 884 (fontified t) 884 889 (fontified t) 889 893 (fontified t face font-lock-keyword-face) 893 927 (fontified t) 927 928 (fontified t) 928 939 (fontified t) 939 961 (fontified t face font-lock-string-face) 961 963 (fontified t) 963 966 (fontified t) 966 972 (fontified t face font-lock-keyword-face) 972 1000 (fontified t) 1000 1005 (fontified t) 1005 1007 (fontified t face font-lock-keyword-face) 1007 1009 (fontified t) 1009 1012 (fontified t face font-lock-keyword-face) 1012 1024 (fontified t) 1024 1038 (fontified t) 1038 1045 (fontified t face font-lock-keyword-face) 1045 1047 (fontified t) 1047 1052 (fontified t face font-lock-constant-face) 1052 1061 (fontified t) 1061 1070 (fontified t) 1070 1074 (fontified t face font-lock-keyword-face) 1074 1102 (fontified t) 1102 1129 (fontified t) 1129 1146 (fontified t) 1146 1152 (fontified t face font-lock-keyword-face) 1152 1156 (fontified t) 1156 1199 (fontified t) 1199 1203 (fontified t face font-lock-string-face) 1203 1205 (fontified t face (font-lock-regexp-grouping-backslash font-lock-string-face)) 1205 1206 (fontified t face (font-lock-regexp-grouping-construct font-lock-string-face)) 1206 1215 (fontified t face font-lock-string-face) 1215 1217 (fontified t face (font-lock-regexp-grouping-backslash font-lock-string-face)) 1217 1218 (fontified t face (font-lock-regexp-grouping-construct font-lock-string-face)) 1218 1222 (fontified t face font-lock-string-face) 1222 1224 (fontified t) 1224 1243 (fontified t) 1243 1250 (fontified t face font-lock-keyword-face) 1250 1252 (fontified t) 1252 1262 (fontified t face font-lock-constant-face) 1262 1264 (fontified t) 1264 1283 (fontified t) 1283 1290 (fontified t face font-lock-keyword-face) 1290 1292 (fontified t) 1292 1304 (fontified t face font-lock-constant-face) 1304 1306 (fontified t) 1306 1343 (fontified t) 1343 1352 (fontified t) 1352 1362 (fontified t) 1362 1381 (fontified t face font-lock-keyword-face) 1381 1414 (fontified t) 1414 1452 (fontified t) 1452 1468 (fontified t) 1468 1474 (fontified t face font-lock-keyword-face) 1474 1484 (fontified t) 1484 1502 (fontified t) 1502 1506 (fontified t face font-lock-keyword-face) 1506 1539 (fontified t) 1539 1565 (fontified t) 1565 1569 (fontified t face font-lock-string-face) 1569 1578 (fontified t) 1578 1604 (fontified t) 1604 1630 (fontified t face font-lock-string-face) 1630 1635 (fontified t) 1635 1660 (fontified t) 1660 1675 (fontified t) 1675 1701 (fontified t face font-lock-string-face) 1701 1706 (fontified t) 1706 1707 (fontified t) 1707 1715 (fontified t face font-lock-keyword-face) 1715 1717 (fontified t) 1717 1740 (fontified t face font-lock-function-name-face) 1740 1760 (fontified t) 1760 1761 (fontified t) 1761 1762 (fontified t) 1762 1768 (fontified t face font-lock-keyword-face) 1768 1769 (fontified t) 1769 1786 (fontified t face font-lock-variable-name-face) 1786 1792 (fontified t) 1792 1793 (fontified t) 1793 1798 (fontified t face font-lock-keyword-face) 1798 1799 (fontified t) 1799 1825 (fontified t face font-lock-function-name-face) 1825 1826 (fontified t) 1826 1835 (fontified t face font-lock-type-face) 1835 1848 (fontified t) 1848 1850 (fontified t) 1850 1887 (fontified t face font-lock-doc-face) 1887 1957 (fontified t face font-lock-doc-face) 1957 2014 (fontified t face font-lock-doc-face) 2014 2015 (fontified t) 2015 2018 (fontified t) 2018 2029 (fontified t face font-lock-keyword-face) 2029 2030 (fontified t) 2030 2033 (fontified t face font-lock-string-face) 2033 2035 (fontified t) 2035 2036 (fontified t) 2036 2039 (fontified t) 2039 2041 (fontified t face font-lock-keyword-face) 2041 2077 (fontified t) 2077 2084 (fontified t) 2084 2088 (fontified t face font-lock-keyword-face) 2088 2095 (fontified t) 2095 2136 (fontified t) 2136 2145 (fontified t) 2145 2149 (fontified t face font-lock-keyword-face) 2149 2174 (fontified t) 2174 2179 (fontified t) 2179 2183 (fontified t face font-lock-keyword-face) 2183 2208 (fontified t) 2208 2220 (fontified t) 2220 2247 (fontified t face font-lock-string-face) 2247 2252 (fontified t) 2252 2258 (fontified t face font-lock-keyword-face) 2258 2282 (fontified t) 2282 2284 (fontified t face font-lock-keyword-face) 2284 2286 (fontified t) 2286 2289 (fontified t face font-lock-keyword-face) 2289 2315 (fontified t) 2315 2322 (fontified t face font-lock-keyword-face) 2322 2324 (fontified t) 2324 2329 (fontified t face font-lock-constant-face) 2329 2347 (fontified t) 2347 2351 (fontified t face font-lock-keyword-face) 2351 2414 (fontified t) 2414 2420 (fontified t face font-lock-keyword-face) 2420 2467 (fontified t) 2467 2471 (fontified t face font-lock-string-face) 2471 2473 (fontified t face (font-lock-regexp-grouping-backslash font-lock-string-face)) 2473 2474 (fontified t face (font-lock-regexp-grouping-construct font-lock-string-face)) 2474 2483 (fontified t face font-lock-string-face) 2483 2485 (fontified t face (font-lock-regexp-grouping-backslash font-lock-string-face)) 2485 2486 (fontified t face (font-lock-regexp-grouping-construct font-lock-string-face)) 2486 2490 (fontified t face font-lock-string-face) 2490 2511 (fontified t) 2511 2518 (fontified t face font-lock-keyword-face) 2518 2520 (fontified t) 2520 2530 (fontified t face font-lock-constant-face) 2530 2551 (fontified t) 2551 2558 (fontified t face font-lock-keyword-face) 2558 2560 (fontified t) 2560 2572 (fontified t face font-lock-constant-face) 2572 2669 (fontified t) 2669 2688 (fontified t face font-lock-keyword-face) 2688 2775 (fontified t) 2775 2781 (fontified t face font-lock-keyword-face) 2781 2809 (fontified t) 2809 2813 (fontified t face font-lock-keyword-face) 2813 2863 (fontified t) 2863 2867 (fontified t face font-lock-string-face) 2867 2902 (fontified t) 2902 2914 (fontified t face font-lock-string-face) 2914 2933 (fontified t face font-lock-string-face) 2933 2938 (fontified t) 2938 3005 (fontified t) 3005 3036 (fontified t face font-lock-string-face) 3036 3042 (fontified t) 3042 3050 (fontified t face font-lock-keyword-face) 3050 3052 (fontified t) 3052 3066 (fontified t face font-lock-function-name-face) 3066 3099 (fontified t) 3099 3104 (fontified t face font-lock-keyword-face) 3104 3105 (fontified t) 3105 3115 (fontified t face font-lock-function-name-face) 3115 3120 (fontified t) 3120 3192 (fontified t face font-lock-doc-face) 3192 3196 (fontified t) 3196 3207 (fontified t face font-lock-keyword-face) 3207 3277 (fontified t) 3277 3285 (fontified t face font-lock-keyword-face) 3285 3287 (fontified t) 3287 3305 (fontified t face font-lock-function-name-face) 3305 3322 (fontified t) 3322 3327 (fontified t face font-lock-keyword-face) 3327 3328 (fontified t) 3328 3343 (fontified t face font-lock-function-name-face) 3343 3349 (fontified t) 3349 3393 (fontified t face font-lock-doc-face) 3393 3397 (fontified t) 3397 3408 (fontified t face font-lock-keyword-face) 3408 3413 (fontified t) 3413 3416 (fontified t face font-lock-keyword-face) 3416 3424 (fontified t) 3424 3426 (fontified t face font-lock-keyword-face) 3426 3435 (fontified t) 3435 3445 (fontified t face font-lock-string-face) 3445 3482 (fontified t) 3482 3496 (fontified t face font-lock-string-face) 3496 3506 (fontified t) 3506 3508 (fontified t face font-lock-keyword-face) 3508 3538 (fontified t) 3538 3543 (fontified t face font-lock-keyword-face) 3543 3563 (fontified t) 3563 3585 (fontified t face font-lock-string-face) 3585 3631 (fontified t) 3631 3641 (fontified t face font-lock-string-face) 3641 3662 (fontified t) 3662 3688 (fontified t face font-lock-string-face) 3688 3706 (fontified t) 3706 3708 (fontified t face font-lock-string-face) 3708 3728 (fontified t face font-lock-string-face) 3728 3737 (fontified t) 3737 3738 (fontified t) 3738 3746 (fontified t face font-lock-keyword-face) 3746 3748 (fontified t) 3748 3771 (fontified t face font-lock-function-name-face) 3771 3793 (fontified t) 3793 3798 (fontified t face font-lock-keyword-face) 3798 3799 (fontified t) 3799 3809 (fontified t face font-lock-function-name-face) 3809 3815 (fontified t) 3815 3856 (fontified t face font-lock-doc-face) 3856 3860 (fontified t) 3860 3871 (fontified t face font-lock-keyword-face) 3871 3876 (fontified t) 3876 3879 (fontified t face font-lock-keyword-face) 3879 3904 (fontified t) 3904 3912 (fontified t face font-lock-string-face) 3912 3921 (fontified t) 3921 3923 (fontified t face font-lock-keyword-face) 3923 3953 (fontified t) 3953 3958 (fontified t face font-lock-keyword-face) 3958 3978 (fontified t) 3978 4001 (fontified t face font-lock-string-face) 4001 4047 (fontified t) 4047 4057 (fontified t face font-lock-string-face) 4057 4078 (fontified t) 4078 4105 (fontified t face font-lock-string-face) 4105 4123 (fontified t) 4123 4145 (fontified t face font-lock-string-face) 4145 4155 (fontified t) 4155 4163 (fontified t face font-lock-keyword-face) 4163 4165 (fontified t) 4165 4183 (fontified t face font-lock-function-name-face) 4183 4198 (fontified t)) . -6720) (undo-tree-id22 . -2443) (undo-tree-id23 . 1754) (undo-tree-id24 . -2443) (undo-tree-id25 . -2443) (undo-tree-id26 . -2649) (undo-tree-id27 . -2649) (undo-tree-id28 . -2466) (undo-tree-id29 . -2649) (undo-tree-id30 . -2607) (undo-tree-id31 . -2698) (undo-tree-id32 . -2758) (undo-tree-id33 . -2466) (undo-tree-id34 . -2338) (undo-tree-id35 . -2466) (undo-tree-id36 . -4198) (undo-tree-id37 . -3916) (undo-tree-id38 . -2466) (undo-tree-id39 . -4198) (undo-tree-id40 . -2573) (undo-tree-id41 . -2573) (undo-tree-id42 . -2443) (undo-tree-id43 . -4198) 10918 (t 25300 4812 260144 879000)) nil (25300 5412 560890 0) 0 nil])
([nil nil ((#("

" 0 1 (fontified t) 1 2 (fontified t)) . 6718) (undo-tree-id0 . -2) (undo-tree-id1 . -2) (undo-tree-id2 . -2) (undo-tree-id3 . -2) (undo-tree-id4 . -2) (undo-tree-id5 . -2) (undo-tree-id6 . -2) (undo-tree-id7 . -2) (undo-tree-id8 . -2) (undo-tree-id9 . -2) (undo-tree-id10 . -2) (undo-tree-id11 . -2) (undo-tree-id12 . -2) (undo-tree-id13 . -2) (undo-tree-id14 . -2) (undo-tree-id15 . -2) (undo-tree-id16 . -2) (undo-tree-id17 . -2) (undo-tree-id18 . -2) (undo-tree-id19 . -2) (undo-tree-id20 . -2) (undo-tree-id21 . -2) 6720) nil (25300 5412 560873 0) 0 nil])
([nil nil ((6721 . 6722) (t 25300 5412 565681 97000)) nil (25300 52724 852061 0) 0 nil])
([nil nil ((6722 . 6727)) nil (25300 52724 852060 0) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -6722) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (#("e" 0 1 (fontified t)) . -6723) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (#("f" 0 1 (fontified t)) . -6724) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (#("u" 0 1 (fontified t)) . -6725) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (#("n" 0 1 (fontified t)) . -6726) (undo-tree-id60 . -1) (undo-tree-id61 . -1) 6727) nil (25300 52724 852059 0) 0 nil])
([nil nil ((6723 . 6729) (6722 . 6724)) nil (25300 52724 852052 0) 0 nil])
([nil nil ((6729 . 6732)) nil (25300 52724 852051 0) 0 nil])
([nil nil ((6729 . 6739) (#("is-" 0 3 (fontified t face font-lock-function-name-face)) . -6729) (undo-tree-id50 . -3) (undo-tree-id51 . -3) 6732) nil (25300 52724 852050 0) 0 nil])
([nil nil ((6739 . 6742)) nil (25300 52724 852048 0) 0 nil])
([nil nil ((6742 . 6745)) nil (25300 52724 852047 0) 0 nil])
([nil nil ((6746 . 6751) (6745 . 6747)) nil (25300 52724 852047 0) 0 nil])
([nil nil ((6746 . 6757) (#("inter" 0 5 (fontified t)) . -6746) (undo-tree-id48 . -5) (undo-tree-id49 . -5) 6751) nil (25300 52724 852046 0) 0 nil])
([nil nil ((6758 . 6761)) nil (25300 52724 852044 0) 0 nil])
([nil nil ((6762 . 6764) (6761 . 6763)) nil (25300 52724 852043 0) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -6762) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (#("f" 0 1 (fontified t face font-lock-keyword-face)) . -6763) (undo-tree-id46 . -1) (undo-tree-id47 . -1) 6764) nil (25300 52724 852042 0) 0 nil])
([nil nil ((#("(" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -6761) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . 1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . 6762) (undo-tree-id42 . 1) (undo-tree-id43 . -1)) nil (25300 52724 852038 0) 0 nil])
([nil nil ((6741 . 6744)) nil (25300 52724 852033 0) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -6742) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (#("p" 0 1 (fontified t)) . -6743) (undo-tree-id35 . -1) (undo-tree-id36 . -1) 6744) nil (25300 52724 852032 0) 0 nil])
([nil nil ((6742 . 6744)) nil (25300 52724 852029 0) 0 nil])
([nil nil ((6741 . 6748) (#("boo" 0 3 (fontified t)) . -6741) (undo-tree-id31 . -3) (undo-tree-id32 . -3) 6744) nil (25300 52724 852028 0) 0 nil])
([nil nil ((6769 . 6772) (6768 . 6770)) nil (25300 52724 852025 0) 0 nil])
([nil nil ((6772 . 6773)) nil (25300 52724 852024 0) 0 nil])
([nil nil ((6772 . 6779) (#("b" 0 1 (fontified t)) . -6772) (undo-tree-id29 . -1) (undo-tree-id30 . -1) 6773) nil (25300 52724 852024 0) 0 nil])
([nil nil ((6779 . 6784)) nil (25300 52724 852022 0) 0 nil])
([nil nil ((6784 . 6787)) nil (25300 52724 852021 0) 0 nil])
([nil nil ((6784 . 6790) (#("ret" 0 3 (fontified t)) . -6784) (undo-tree-id27 . -3) (undo-tree-id28 . -3) 6787) nil (25300 52724 852020 0) 0 nil])
([nil nil ((6790 . 6792)) nil (25300 52724 852018 0) 0 nil])
([nil nil ((6791 . 6795) (#("t" 0 1 (fontified t)) . -6791) (undo-tree-id25 . -1) (undo-tree-id26 . -1) 6792) nil (25300 52724 852016 0) 0 nil])
([nil nil ((6795 . 6800)) nil (25300 52724 852014 0) 0 nil])
([nil nil ((6800 . 6802)) nil (25300 52724 852013 0) 0 nil])
([nil nil ((6800 . 6806) (#("re" 0 2 (fontified t)) . -6800) (undo-tree-id23 . -2) (undo-tree-id24 . -2) 6802) nil (25300 52724 852012 0) 0 nil])
([nil nil ((6806 . 6809)) nil (25300 52724 852010 0) 0 nil])
([nil nil ((6807 . 6810) (#("ni" 0 2 (fontified t)) . -6807) (undo-tree-id21 . -2) (undo-tree-id22 . -2) 6809) nil (25300 52724 852009 0) 0 nil])
([nil nil ((#("
(defun is-company (boolean)
  (interactive)
  (if boolean
    return true
    return nil))" 0 1 (fontified t) 1 2 (fontified t face (rainbow-delimiters-depth-1-face)) 2 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 18 (fontified t face font-lock-function-name-face) 18 19 (fontified t) 19 20 (fontified t face (rainbow-delimiters-depth-2-face)) 20 27 (fontified t) 27 28 (fontified t face (rainbow-delimiters-depth-2-face)) 28 29 (fontified t) 29 31 (fontified t) 31 32 (fontified t face (rainbow-delimiters-depth-2-face)) 32 43 (fontified t face font-lock-keyword-face) 43 44 (fontified t face (rainbow-delimiters-depth-2-face)) 44 45 (fontified t) 45 47 (fontified t) 47 48 (fontified t face (rainbow-delimiters-depth-2-face)) 48 50 (fontified t face font-lock-keyword-face) 50 51 (fontified t) 51 59 (fontified t) 59 63 (fontified t) 63 70 (fontified t) 70 75 (fontified t) 75 79 (fontified t) 79 86 (fontified t) 86 89 (fontified t) 89 90 (fontified t face (rainbow-delimiters-depth-2-face)) 90 91 (fontified t face (rainbow-delimiters-depth-1-face))) . 6721) (undo-tree-id0 . -91) (undo-tree-id1 . -20) (undo-tree-id2 . -50) (undo-tree-id3 . -58) (undo-tree-id4 . -57) (undo-tree-id5 . -50) (undo-tree-id6 . -58) (undo-tree-id7 . -91) (undo-tree-id8 . -57) (undo-tree-id9 . -91) (undo-tree-id10 . -91) (undo-tree-id11 . -1) (undo-tree-id12 . -91) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -91) (undo-tree-id19 . -91) (undo-tree-id20 . -91)) nil (25300 52724 852003 0) 0 nil])
([nil nil ((6722 . 6725) (6721 . 6723) (t 25300 52724 857759 839000)) nil (25301 3870 681827 0) 0 nil])
([nil nil ((6725 . 6729)) nil (25301 3870 681826 0) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -6722) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (#("s" 0 1 (fontified t)) . -6723) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (#("e" 0 1 (fontified t)) . -6724) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (#("-" 0 1 (fontified t)) . -6725) (undo-tree-id17 . -1) (#("p" 0 1 (fontified t)) . -6726) (undo-tree-id18 . -1) (#("a" 0 1 (fontified t)) . -6727) (undo-tree-id19 . -1) (#("c" 0 1 (fontified t)) . -6728) (undo-tree-id20 . -1) 6729) nil (25301 3870 681824 0) 0 nil])
([nil nil ((#("(" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -6721) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . 1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . 6722) (undo-tree-id6 . 1) (undo-tree-id7 . -1)) nil (25301 3870 681812 0) 0 nil])
([nil nil ((343 . 344) (t 25301 3870 687125 822000)) nil (25302 19875 587822 0) 0 nil])
([nil nil ((344 . 346)) nil (25302 19875 587821 0) 0 nil])
([nil nil ((345 . 350)) nil (25302 19875 587821 0) 0 nil])
([nil nil ((350 . 362)) nil (25302 19875 587820 0) 0 nil])
([nil nil ((#("e" 0 1 (face font-lock-function-name-face fontified t)) . -356) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (#("m" 0 1 (face font-lock-function-name-face fontified t)) . -357) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (#("a" 0 1 (face font-lock-function-name-face fontified t)) . -358) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (#("c" 0 1 (face font-lock-function-name-face fontified t)) . -359) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (#("s" 0 1 (face font-lock-function-name-face fontified t)) . -360) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (#("-" 0 1 (face font-lock-function-name-face fontified t)) . -361) (undo-tree-id46 . -1) (undo-tree-id47 . -1) 362) nil (25302 19875 587819 0) 0 nil])
([nil nil ((356 . 366)) nil (25302 19875 587811 0) 0 nil])
([nil nil ((351 . 370) (#("open-emacs-lear" 0 15 (face font-lock-function-name-face fontified t)) . -351) (undo-tree-id34 . -15) (undo-tree-id35 . -15) 366) nil (25302 19875 587811 0) 0 nil])
([nil nil ((370 . 372)) nil (25302 19875 587809 0) 0 nil])
([nil nil ((372 . 375)) nil (25302 19875 587808 0) 0 nil])
([nil nil ((375 . 378)) nil (25302 19875 587808 0) 0 nil])
([nil nil ((378 . 381)) nil (25302 19875 587807 0) 0 nil])
([nil nil ((382 . 385) (381 . 383)) nil (25302 19875 587806 0) 0 nil])
([nil nil ((385 . 386)) nil (25302 19875 587805 0) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -384) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (#("t" 0 1 (fontified t)) . -385) (undo-tree-id32 . -1) (undo-tree-id33 . -1) 386) nil (25302 19875 587805 0) 0 nil])
([nil nil ((384 . 385)) nil (25302 19875 587802 0) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 394) (undo-tree-id26 . 1) (undo-tree-id27 . -1) (382 . 394) (#("int" 0 3 (fontified t)) . -382) (undo-tree-id28 . -3) (undo-tree-id29 . -3) 385) nil (25302 19875 587801 0) 0 nil])
([nil nil ((394 . 397)) nil (25302 19875 587797 0) 0 nil])
([nil nil ((398 . 401) (397 . 399)) nil (25302 19875 587797 0) 0 nil])
([nil nil ((398 . 421) (#("fin" 0 3 (fontified t)) . -398) (undo-tree-id24 . -3) (undo-tree-id25 . -3) 401) nil (25302 19875 587796 0) 0 nil])
([nil nil ((#("." 0 1 (face font-lock-string-face fontified t)) . -411) (undo-tree-id15 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -412) (undo-tree-id16 . -1) (#("m" 0 1 (face font-lock-string-face fontified t)) . -413) (undo-tree-id17 . -1) (#("a" 0 1 (face font-lock-string-face fontified t)) . -414) (undo-tree-id18 . -1) (#("c" 0 1 (face font-lock-string-face fontified t)) . -415) (undo-tree-id19 . -1) (#("s" 0 1 (face font-lock-string-face fontified t)) . -416) (undo-tree-id20 . -1) (#("." 0 1 (face font-lock-string-face fontified t)) . -417) (undo-tree-id21 . -1) (#("d" 0 1 (face font-lock-string-face fontified t)) . -418) (undo-tree-id22 . -1) (#("/" 0 1 (face font-lock-string-face fontified t)) . -419) (undo-tree-id23 . -1) 420) nil (25302 19875 587793 0) 0 nil])
([nil nil ((411 . 413)) nil (25302 19875 587787 0) 0 nil])
([nil nil ((411 . 420) (#("Do" 0 2 (face font-lock-string-face fontified t)) . -411) (undo-tree-id13 . -2) (undo-tree-id14 . -2) 413) nil (25302 19875 587786 0) 0 nil])
([nil nil ((420 . 421)) nil (25302 19875 587784 0) 0 nil])
([nil nil ((#("." 0 1 (face font-lock-string-face fontified t)) . -420) (undo-tree-id12 . -1) 421) nil (25302 19875 587783 0) 0 nil])
([nil nil ((420 . 421)) nil (25302 19875 587782 0) 0 nil])
([nil nil ((421 . 424)) nil (25302 19875 587781 0) 0 nil])
([nil nil ((424 . 425)) nil (25302 19875 587781 0) 0 nil])
([nil nil ((425 . 443)) nil (25302 19875 587780 0) 0 nil])
([nil nil ((443 . 444)) nil (25302 19875 587779 0) 0 nil])
([nil nil ((444 . 445)) nil (25302 19875 587779 0) 0 nil])
([nil nil ((#("d" 0 1 (face font-lock-string-face fontified t)) . -444) (undo-tree-id10 . -1) (undo-tree-id11 . -1) 445) nil (25302 19875 587778 0) 0 nil])
([nil nil ((444 . 449)) nil (25302 19875 587776 0) 0 nil])
([nil nil ((#("e" 0 1 (face font-lock-string-face fontified t)) . -444) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (#("m" 0 1 (face font-lock-string-face fontified t)) . -445) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (#("a" 0 1 (face font-lock-string-face fontified t)) . -446) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (#("c" 0 1 (face font-lock-string-face fontified t)) . -447) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (#("s" 0 1 (face font-lock-string-face fontified t)) . -448) (undo-tree-id8 . -1) (undo-tree-id9 . -1) 449) nil (25302 19875 587774 0) 0 nil])
([nil nil ((#("2022021709_emacs_learning_note.org" 0 33 (fontified nil) 33 34 (rear-nonsticky t fontified nil)) . -444) (nil rear-nonsticky nil 477 . 478) (nil fontified nil 444 . 478) (444 . 478)) nil (25302 19875 587747 0) 0 nil])
([nil nil ((#("2022021709_emacs_learning_note.org" 0 33 (fontified nil) 33 34 (rear-nonsticky t fontified nil)) . -444) (nil rear-nonsticky nil 477 . 478) (nil fontified nil 444 . 478) (444 . 478)) nil (25302 19875 587746 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 477 . 478) (nil fontified nil 444 . 478) (444 . 478)) nil (25302 19875 587741 0) 0 nil])
([nil nil ((481 . 482) (t 25302 19875 593560 555000)) nil (25302 21504 428260 0) 0 nil])
([nil nil ((481 . 483)) nil (25302 21504 428259 0) 0 nil])
([nil nil ((484 . 487) (483 . 485)) nil (25302 21504 428258 0) 0 nil])
([nil nil ((484 . 495) (#("def" 0 3 (fontified t)) . -484) (undo-tree-id62 . -3) (undo-tree-id63 . -3) 487) nil (25302 21504 428257 0) 0 nil])
([nil nil ((495 . 497)) nil (25302 21504 428255 0) 0 nil])
([nil nil ((490 . 498) (#("open-or" 0 7 (face font-lock-function-name-face fontified t)) . -490) (undo-tree-id60 . -7) (undo-tree-id61 . -7) 497) nil (25302 21504 428254 0) 0 nil])
([nil nil ((498 . 504)) nil (25302 21504 428252 0) 0 nil])
([nil nil ((504 . 515)) nil (25302 21504 428251 0) 0 nil])
([nil nil ((515 . 518)) nil (25302 21504 428250 0) 0 nil])
([nil nil ((519 . 521) (518 . 520)) nil (25302 21504 428249 0) 0 nil])
([nil nil ((519 . 530) (#("in" 0 2 (fontified t)) . -519) (undo-tree-id58 . -2) (undo-tree-id59 . -2) 521) nil (25302 21504 428248 0) 0 nil])
([nil nil ((531 . 534)) nil (25302 21504 428246 0) 0 nil])
([nil nil ((535 . 538) (534 . 536)) nil (25302 21504 428245 0) 0 nil])
([nil nil ((535 . 544) (#("fin" 0 3 (fontified t)) . -535) (undo-tree-id56 . -3) (undo-tree-id57 . -3) 538) nil (25302 21504 428244 0) 0 nil])
([nil nil ((544 . 546)) nil (25302 21504 428241 0) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -545) (undo-tree-id54 . -1) (undo-tree-id55 . -1) 546) nil (25302 21504 428240 0) 0 nil])
([nil nil ((546 . 548) (545 . 547) (#("\"" 0 1 (fontified nil)) . -545) (545 . 546)) nil (25302 21504 428238 0) 0 nil])
([nil nil ((#("`" 0 1 (face font-lock-string-face fontified nil)) . -546) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (#("'" 0 1 (face font-lock-string-face fontified t)) . 547)) nil (25302 21504 428236 0) 0 nil])
([nil nil ((546 . 547)) nil (25302 21504 428234 0) 0 nil])
([nil nil ((#("·" 0 1 (face font-lock-string-face fontified t)) . -546) (undo-tree-id51 . -1) 547) nil (25302 21504 428233 0) 0 nil])
([nil nil ((546 . 547)) nil (25302 21504 428232 0) 0 nil])
([nil nil ((#("·" 0 1 (face font-lock-string-face fontified t)) . -546) (undo-tree-id50 . -1) 547) nil (25302 21504 428231 0) 0 nil])
([nil nil ((546 . 547)) nil (25302 21504 428229 0) 0 nil])
([nil nil ((#("·" 0 1 (face font-lock-string-face fontified t)) . -546) (undo-tree-id49 . -1) 547) nil (25302 21504 428228 0) 0 nil])
([nil nil ((546 . 547)) nil (25302 21504 428227 0) 0 nil])
([nil nil ((#("～" 0 1 (face font-lock-string-face fontified t)) . -546) (undo-tree-id48 . -1) 547) nil (25302 21504 428225 0) 0 nil])
([nil nil ((546 . 547)) nil (25302 21504 428220 0) 0 nil])
([nil nil ((547 . 548)) nil (25302 21504 428219 0) 0 nil])
([nil nil ((548 . 557)) nil (25302 21504 428218 0) 0 nil])
([nil nil ((557 . 558)) nil (25302 21504 428218 0) 0 nil])
([nil nil ((558 . 561)) nil (25302 21504 428217 0) 0 nil])
([nil nil ((561 . 562)) nil (25302 21504 428216 0) 0 nil])
([nil nil ((562 . 580)) nil (25302 21504 428215 0) 0 nil])
([nil nil ((580 . 581)) nil (25302 21504 428214 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 612 . 613) (nil fontified nil 581 . 613) (581 . 613)) nil (25302 21504 428210 0) 0 nil])
([nil nil ((6995 . 6996) (t 25302 21504 434921 319000)) nil (25302 47171 986122 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 7219 . 7220) (nil fontified nil 7219 . 7220) (nil fontified nil 7218 . 7219) (nil fontified nil 7217 . 7218) (nil fontified nil 7172 . 7217) (nil fontified nil 7168 . 7172) (nil fontified nil 7167 . 7168) (nil fontified nil 7162 . 7167) (nil fontified nil 7161 . 7162) (nil fontified nil 7160 . 7161) (nil fontified nil 7145 . 7160) (nil fontified nil 7144 . 7145) (nil fontified nil 7111 . 7144) (nil fontified nil 7101 . 7111) (nil fontified nil 7100 . 7101) (nil fontified nil 7095 . 7100) (nil fontified nil 7094 . 7095) (nil fontified nil 7079 . 7094) (nil fontified nil 7078 . 7079) (nil fontified nil 7073 . 7078) (nil fontified nil 7072 . 7073) (nil fontified nil 7057 . 7072) (nil fontified nil 7056 . 7057) (nil fontified nil 7051 . 7056) (nil fontified nil 7046 . 7051) (nil fontified nil 7045 . 7046) (nil fontified nil 7042 . 7045) (nil fontified nil 7041 . 7042) (nil fontified nil 7030 . 7041) (nil fontified nil 7029 . 7030) (nil fontified nil 7026 . 7029) (nil fontified nil 7025 . 7026) (nil fontified nil 7024 . 7025) (nil fontified nil 7023 . 7024) (nil fontified nil 7003 . 7023) (nil fontified nil 7002 . 7003) (nil fontified nil 6997 . 7002) (nil fontified nil 6996 . 6997) (6996 . 7220)) nil (25302 47171 986116 0) 0 nil])
([nil nil ((7263 . 7264) (7255 . 7263) (#("s" 0 1 (face font-lock-function-name-face fontified t)) . -7255) (undo-tree-id60 . -1) 7256 (7254 . 7256) (#("e" 0 1 (face font-lock-function-name-face fontified t)) . -7248) (undo-tree-id61 . -1) (undo-tree-id62 . -1) 7249 (7251 . 7255) (#("n" 0 1 (face font-lock-function-name-face fontified nil)) . -7251) (7251 . 7252) (#("o" 0 1 (face font-lock-function-name-face fontified nil)) . -7251) (7251 . 7252) (#("i" 0 1 (face font-lock-function-name-face fontified nil)) . -7251) (7251 . 7252) (#("t" 0 1 (face font-lock-function-name-face fontified nil)) . -7251) (7251 . 7252) (7250 . 7251) (7248 . 7250) (#("l" 0 1 (face font-lock-function-name-face fontified t)) . -7248) (undo-tree-id63 . -1) 7249 (7238 . 7249) (7237 . 7238) (7232 . 7237) (#("che" 0 3 (face font-lock-function-name-face fontified t)) . -7232) (undo-tree-id64 . -3) (undo-tree-id65 . -3) 7235 (7231 . 7235) (#("\\" 0 1 (face font-lock-function-name-face fontified t)) . -7231) (undo-tree-id66 . -1) 7232 (7231 . 7232) (#("." 0 1 (face font-lock-function-name-face fontified t)) . -7231) (undo-tree-id67 . -1) (undo-tree-id68 . -1) 7232 (7229 . 7232) (7228 . 7229) (7223 . 7228) (#("de" 0 2 (fontified t)) . -7223) (undo-tree-id69 . -2) (undo-tree-id70 . -2) 7225 (7223 . 7225) (#("f" 0 1 (fontified t)) . -7223) (undo-tree-id71 . -1) (undo-tree-id72 . -1) 7224 (7223 . 7224) (7222 . 7224) (7220 . 7222) (t 25302 47171 991821 219000)) nil (25302 48659 317021 0) 0 nil])
([nil nil ((7262 . 7265)) nil (25302 48659 317008 0) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -7264) (undo-tree-id58 . -1) (undo-tree-id59 . -1) 7265) nil (25302 48659 317007 0) 0 nil])
([nil nil ((7264 . 7266)) nil (25302 48659 317006 0) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . -7265) (undo-tree-id56 . -1) (undo-tree-id57 . -1) 7266) nil (25302 48659 317005 0) 0 nil])
([nil nil ((7265 . 7271)) nil (25302 48659 317003 0) 0 nil])
([nil nil ((7265 . 7275) (#("comple" 0 6 (fontified t)) . -7265) (undo-tree-id54 . -6) (undo-tree-id55 . -6) 7271) nil (25302 48659 317003 0) 0 nil])
([nil nil ((7275 . 7277)) nil (25302 48659 317001 0) 0 nil])
([nil nil ((7265 . 7282) (#("completion-s" 0 12 (fontified t)) . -7265) (undo-tree-id52 . -12) (undo-tree-id53 . -12) 7277) nil (25302 48659 317000 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 7283) (undo-tree-id51 . -1) 7284) nil (25302 48659 316998 0) 0 nil])
([nil nil ((7283 . 7286)) nil (25302 48659 316997 0) 0 nil])
([nil nil ((7287 . 7290) (7286 . 7288)) nil (25302 48659 316996 0) 0 nil])
([nil nil ((7290 . 7291)) nil (25302 48659 316996 0) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -7290) (undo-tree-id49 . -1) (undo-tree-id50 . -1) 7291) nil (25302 48659 316995 0) 0 nil])
([nil nil ((7291 . 7292) (7290 . 7292)) nil (25302 48659 316993 0) 0 nil])
([nil nil ((7292 . 7293)) nil (25302 48659 316993 0) 0 nil])
([nil nil ((7291 . 7297) (#("st" 0 2 (fontified t)) . -7291) (undo-tree-id47 . -2) (undo-tree-id48 . -2) 7293) nil (25302 48659 316992 0) 0 nil])
([nil nil ((7297 . 7300)) nil (25302 48659 316990 0) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -7299) (undo-tree-id45 . -1) (undo-tree-id46 . -1) 7300) nil (25302 48659 316989 0) 0 nil])
([nil nil ((7299 . 7302)) nil (25302 48659 316987 0) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -7301) (undo-tree-id43 . -1) (undo-tree-id44 . -1) 7302) nil (25302 48659 316987 0) 0 nil])
([nil nil ((7301 . 7302)) nil (25302 48659 316985 0) 0 nil])
([nil nil ((7302 . 7319)) nil (25302 48659 316984 0) 0 nil])
([nil nil ((7321 . 7324) (7320 . 7322) (#("\"" 0 1 (fontified nil)) . -7320) (7319 . 7321)) nil (25302 48659 316983 0) 0 nil])
([nil nil ((#("," 0 1 (face font-lock-string-face fontified t)) . -7323) (undo-tree-id42 . -1) 7324) nil (25302 48659 316982 0) 0 nil])
([nil nil ((7323 . 7325)) nil (25302 48659 316981 0) 0 nil])
([nil nil ((#("c" 0 1 (face font-lock-string-face fontified t)) . -7321) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (#("o" 0 1 (face font-lock-string-face fontified t)) . -7322) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (#("m" 0 1 (face font-lock-string-face fontified t)) . -7323) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (#("p" 0 1 (face font-lock-string-face fontified t)) . -7324) (undo-tree-id40 . -1) (undo-tree-id41 . -1) 7325) nil (25302 48659 316980 0) 0 nil])
([nil nil ((#("
(defun my/check-which-completion-style (my/completion-styles)
  (if (string= my/completion-styles \"\")))" 0 1 (fontified t) 1 2 (face (rainbow-delimiters-depth-1-face) fontified t) 2 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t) 8 11 (face font-lock-function-name-face fontified t) 11 39 (face font-lock-function-name-face fontified t) 39 40 (fontified t) 40 41 (face (rainbow-delimiters-depth-2-face) fontified t) 41 44 (fontified t) 44 61 (fontified t) 61 62 (face (rainbow-delimiters-depth-2-face) fontified t) 62 63 (fontified t) 63 65 (fontified t) 65 66 (face (rainbow-delimiters-depth-2-face) fontified t) 66 68 (face font-lock-keyword-face fontified t) 68 69 (fontified t) 69 70 (face (rainbow-delimiters-depth-3-face) fontified t) 70 81 (fontified t) 81 99 (fontified t) 99 101 (face font-lock-string-face fontified t) 101 102 (face (rainbow-delimiters-depth-3-face) fontified t) 102 103 (face (rainbow-delimiters-depth-2-face) fontified t) 103 104 (face (rainbow-delimiters-depth-1-face) fontified t)) . 7221) (undo-tree-id17 . -104) (undo-tree-id18 . -10) (undo-tree-id19 . -10) (undo-tree-id20 . -10) (undo-tree-id21 . -10) (undo-tree-id22 . -27) (undo-tree-id23 . -32) (undo-tree-id24 . -23) (undo-tree-id25 . -44) (undo-tree-id26 . -44) (undo-tree-id27 . -61) (undo-tree-id28 . -61) (undo-tree-id29 . -61) (undo-tree-id30 . -61) (undo-tree-id31 . -1) (undo-tree-id32 . -100) (undo-tree-id33 . -104)) nil (25302 48659 316974 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 7220) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) 7221) nil (25302 48659 316964 0) 0 nil])
([nil nil ((7051 . 7056) (t 25302 48659 321928 431000)) nil (25302 48979 585403 0) 0 nil])
([nil nil ((7057 . 7060) (7056 . 7058)) nil (25302 48979 585401 0) 0 nil])
([nil nil ((7060 . 7068)) nil (25302 48979 585400 0) 0 nil])
([nil nil ((#("j" 0 1 (face font-lock-constant-face fontified t)) . -7066) (undo-tree-id11 . -1) (#("i" 0 1 (face font-lock-constant-face fontified t)) . -7067) (undo-tree-id12 . -1) 7068) nil (25302 48979 585399 0) 0 nil])
([nil nil ((7066 . 7071)) nil (25302 48979 585396 0) 0 nil])
([nil nil ((7071 . 7074)) nil (25302 48979 585395 0) 0 nil])
([nil nil ((#("(require 'init-lsp)" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t) 1 8 (face font-lock-keyword-face fontified t) 8 10 (fontified t) 10 18 (face font-lock-constant-face fontified t) 18 19 (face (rainbow-delimiters-depth-3-face) fontified t)) . -7056) (undo-tree-id6 . -19) (undo-tree-id7 . -19) (undo-tree-id8 . -19) (undo-tree-id9 . -19) (undo-tree-id10 . -19) 7075) nil (25302 48979 585393 0) 0 nil])
([nil nil ((#("
    " 0 1 (fontified t) 1 5 (fontified t)) . 7051) (undo-tree-id0 . -5) (undo-tree-id1 . -5) (undo-tree-id2 . -5) (undo-tree-id3 . -5) (undo-tree-id4 . -5) (undo-tree-id5 . -5) 7056) nil (25302 48979 585385 0) 0 nil])
([nil nil ((#("(progn
    (company-mode -1)
    (lsp-bridge-mode)
    (setq-local evil-goto-definition-functions '(lsp-bridge-jump))
    (setq acm-candidate-match-function 'orderless-flex)))" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t) 1 6 (face font-lock-keyword-face fontified t) 6 11 (fontified t) 11 12 (face (rainbow-delimiters-depth-3-face) fontified t) 12 27 (fontified t) 27 28 (face (rainbow-delimiters-depth-3-face) fontified t) 28 33 (fontified t) 33 34 (face (rainbow-delimiters-depth-3-face) fontified t) 34 49 (fontified t) 49 50 (face (rainbow-delimiters-depth-3-face) fontified t) 50 55 (fontified t) 55 56 (face (rainbow-delimiters-depth-3-face) fontified t) 56 66 (face font-lock-keyword-face fontified t) 66 99 (fontified t) 99 100 (face (rainbow-delimiters-depth-4-face) fontified t) 100 115 (fontified t) 115 116 (face (rainbow-delimiters-depth-4-face) fontified t) 116 117 (face (rainbow-delimiters-depth-3-face) fontified t) 117 118 (fontified t) 118 122 (fontified t) 122 123 (face (rainbow-delimiters-depth-3-face) fontified t) 123 127 (face font-lock-keyword-face fontified t) 127 172 (fontified t) 172 173 (face (rainbow-delimiters-depth-3-face) fontified t) 173 174 (face (rainbow-delimiters-depth-2-face) fontified t) 174 175 (face (rainbow-delimiters-depth-1-face) fontified t)) . 7045) (undo-tree-id372 . -174) (undo-tree-id373 . -118) (undo-tree-id374 . 1) (undo-tree-id375 . -175) (undo-tree-id376 . -174) (undo-tree-id377 . -174) 7220 (t 25302 48979 592624 660000)) nil (25302 49205 94596 0) 0 nil])
([nil current ((#("
(defun my/enable-lsp-bridge ()
  (interactive)
  " 0 1 (fontified t) 1 2 (face (rainbow-delimiters-depth-1-face) fontified t) 2 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t) 8 28 (face font-lock-function-name-face fontified t) 28 29 (fontified t) 29 30 (face (rainbow-delimiters-depth-2-face) fontified t) 30 31 (face (rainbow-delimiters-depth-2-face) fontified t) 31 34 (fontified t) 34 35 (face (rainbow-delimiters-depth-2-face) fontified t) 35 46 (face font-lock-keyword-face fontified t) 46 47 (face (rainbow-delimiters-depth-2-face) fontified t) 47 48 (fontified t) 48 50 (fontified t)) . 6995) (undo-tree-id363 . -1) (undo-tree-id364 . -50) (undo-tree-id365 . -50) (undo-tree-id366 . -50) (undo-tree-id367 . -50) (undo-tree-id368 . -50) (undo-tree-id369 . -50) (undo-tree-id370 . -50) (undo-tree-id371 . -50)) nil (25302 49208 96101 0) 0 nil])
([nil nil ((#("


" 0 3 (fontified t) 3 4 (fontified t)) . 6992) (undo-tree-id378 . -4) (undo-tree-id379 . -4) (undo-tree-id380 . -3) (undo-tree-id381 . -3) (undo-tree-id382 . -3) (undo-tree-id383 . -3) (undo-tree-id384 . -3) (undo-tree-id385 . -3) (undo-tree-id386 . -3) 6996) ((6992 . 6996)) (25302 49208 96051 0) 0 nil] [nil nil ((#("

" 0 3 (fontified t)) . 6992) (undo-tree-id0 . -3) (undo-tree-id1 . -3) (undo-tree-id2 . -3) (undo-tree-id3 . -3) (undo-tree-id4 . -3) (undo-tree-id5 . -3) (undo-tree-id6 . -3) (undo-tree-id7 . -3) (undo-tree-id8 . -3) (undo-tree-id9 . -3) (undo-tree-id10 . -3) (undo-tree-id11 . -3) (undo-tree-id12 . -3) (undo-tree-id13 . -3) (undo-tree-id14 . -3) (undo-tree-id15 . -3) (undo-tree-id16 . -3) (undo-tree-id17 . -3) (undo-tree-id18 . -3) (undo-tree-id19 . -3) (undo-tree-id20 . -3) (undo-tree-id21 . -3) (undo-tree-id22 . -3) (undo-tree-id23 . -3) (undo-tree-id24 . -3) (undo-tree-id25 . -3) (undo-tree-id26 . -3) (undo-tree-id27 . -3) (undo-tree-id28 . -3) (undo-tree-id29 . -3) (undo-tree-id30 . -3) (undo-tree-id31 . -3) (undo-tree-id32 . -3) (undo-tree-id33 . -3) (undo-tree-id34 . -3) (undo-tree-id35 . -3) (undo-tree-id36 . -3) (undo-tree-id37 . -3) (undo-tree-id38 . -3) (undo-tree-id39 . -3) (undo-tree-id40 . -3) (undo-tree-id41 . -3) (undo-tree-id42 . -3) (undo-tree-id43 . -3) (undo-tree-id44 . -3) (undo-tree-id45 . -3) (undo-tree-id46 . -3) (undo-tree-id47 . -3) (undo-tree-id48 . -3) (undo-tree-id49 . -3) (undo-tree-id50 . -3) (undo-tree-id51 . -3) (undo-tree-id52 . -3) (undo-tree-id53 . -3) (undo-tree-id54 . -3) (undo-tree-id55 . -3) (undo-tree-id56 . -3) (undo-tree-id57 . -3) (undo-tree-id58 . -3) (undo-tree-id59 . -3) (undo-tree-id60 . -3) (undo-tree-id61 . -3) (undo-tree-id62 . -3) (undo-tree-id63 . -3) (undo-tree-id64 . -3) (undo-tree-id65 . -3) (undo-tree-id66 . -3) (undo-tree-id67 . -3) (undo-tree-id68 . -3) (undo-tree-id69 . -3) (undo-tree-id70 . -3) (undo-tree-id71 . -3) (undo-tree-id72 . -3) (undo-tree-id73 . -3) (undo-tree-id74 . -3) (undo-tree-id75 . -3) (undo-tree-id76 . -3) (undo-tree-id77 . -3) (undo-tree-id78 . -3) (undo-tree-id79 . -3) (undo-tree-id80 . -3) (undo-tree-id81 . -3) (undo-tree-id82 . -3) (undo-tree-id83 . -3) (undo-tree-id84 . -3) (undo-tree-id85 . -3) (undo-tree-id86 . -3) (undo-tree-id87 . -3) (undo-tree-id88 . -3) (undo-tree-id89 . -3) (undo-tree-id90 . -3) (undo-tree-id91 . -3) (undo-tree-id92 . -3) (undo-tree-id93 . -3) (undo-tree-id94 . -3) (undo-tree-id95 . -3) (undo-tree-id96 . -3) (undo-tree-id97 . -3) (undo-tree-id98 . -3) (undo-tree-id99 . -3) (undo-tree-id100 . -3) (undo-tree-id101 . -3) (undo-tree-id102 . -3) (undo-tree-id103 . -3) (undo-tree-id104 . -3) (undo-tree-id105 . -3) (undo-tree-id106 . -3) (undo-tree-id107 . -3) (undo-tree-id108 . -3) (undo-tree-id109 . -3) (undo-tree-id110 . -3) (undo-tree-id111 . -3) (undo-tree-id112 . -3) (undo-tree-id113 . -3) (undo-tree-id114 . -3) (undo-tree-id115 . -3) (undo-tree-id116 . -3) (undo-tree-id117 . -3) (undo-tree-id118 . -3) (undo-tree-id119 . -3) (undo-tree-id120 . -3) (undo-tree-id121 . -3) (undo-tree-id122 . -3) (undo-tree-id123 . -3) (undo-tree-id124 . -3) (undo-tree-id125 . -3) (undo-tree-id126 . -3) (undo-tree-id127 . -3) (undo-tree-id128 . -3) (undo-tree-id129 . -3) (undo-tree-id130 . -3) (undo-tree-id131 . -3) (undo-tree-id132 . -3) (undo-tree-id133 . -3) (undo-tree-id134 . -3) (undo-tree-id135 . -3) (undo-tree-id136 . -3) (undo-tree-id137 . -3) (undo-tree-id138 . -3) (undo-tree-id139 . -3) (undo-tree-id140 . -3) (undo-tree-id141 . -3) (undo-tree-id142 . -3) (undo-tree-id143 . -3) (undo-tree-id144 . -3) (undo-tree-id145 . -3) (undo-tree-id146 . -3) (undo-tree-id147 . -3) (undo-tree-id148 . -3) (undo-tree-id149 . -3) (undo-tree-id150 . -3) (undo-tree-id151 . -3) (undo-tree-id152 . -3) (undo-tree-id153 . -3) (undo-tree-id154 . -3) (undo-tree-id155 . -3) (undo-tree-id156 . -3) (undo-tree-id157 . -3) (undo-tree-id158 . -3) (undo-tree-id159 . -3) (undo-tree-id160 . -3) (undo-tree-id161 . -3) (undo-tree-id162 . -3) (undo-tree-id163 . -3) (undo-tree-id164 . -3) (undo-tree-id165 . -3) (undo-tree-id166 . -3) (undo-tree-id167 . -3) (undo-tree-id168 . -3) (undo-tree-id169 . -3) (undo-tree-id170 . -3) (undo-tree-id171 . -3) (undo-tree-id172 . -3) (undo-tree-id173 . -3) (undo-tree-id174 . -3) (undo-tree-id175 . -3) (undo-tree-id176 . -3) (undo-tree-id177 . -3) (undo-tree-id178 . -3) (undo-tree-id179 . -3) (undo-tree-id180 . -3) (undo-tree-id181 . -3) (undo-tree-id182 . -3) (undo-tree-id183 . -3) (undo-tree-id184 . -3) (undo-tree-id185 . -3) (undo-tree-id186 . -3) (undo-tree-id187 . -3) (undo-tree-id188 . -3) (undo-tree-id189 . -3) (undo-tree-id190 . -3) (undo-tree-id191 . -3) (undo-tree-id192 . -3) (undo-tree-id193 . -3) (undo-tree-id194 . -3) (undo-tree-id195 . -3) (undo-tree-id196 . -3) (undo-tree-id197 . -3) (undo-tree-id198 . -3) (undo-tree-id199 . -3) (undo-tree-id200 . -3) (undo-tree-id201 . -3) (undo-tree-id202 . -3) (undo-tree-id203 . -3) (undo-tree-id204 . -3) (undo-tree-id205 . -3) (undo-tree-id206 . -3) (undo-tree-id207 . -3) (undo-tree-id208 . -3) (undo-tree-id209 . -3) (undo-tree-id210 . -3) (undo-tree-id211 . -3) (undo-tree-id212 . -3) (undo-tree-id213 . -3) (undo-tree-id214 . -3) (undo-tree-id215 . -3) (undo-tree-id216 . -3) (undo-tree-id217 . -3) (undo-tree-id218 . -3) (undo-tree-id219 . -3) (undo-tree-id220 . -3) (undo-tree-id221 . -3) (undo-tree-id222 . -3) (undo-tree-id223 . -3) (undo-tree-id224 . -3) (undo-tree-id225 . -3) (undo-tree-id226 . -3) (undo-tree-id227 . -3) (undo-tree-id228 . -3) (undo-tree-id229 . -3) (undo-tree-id230 . -3) (undo-tree-id231 . -3) (undo-tree-id232 . -3) (undo-tree-id233 . -3) (undo-tree-id234 . -3) (undo-tree-id235 . -3) (undo-tree-id236 . -3) (undo-tree-id237 . -3) (undo-tree-id238 . -3) (undo-tree-id239 . -3) (undo-tree-id240 . -3) (undo-tree-id241 . -3) (undo-tree-id242 . -3) (undo-tree-id243 . -3) (undo-tree-id244 . -3) (undo-tree-id245 . -3) (undo-tree-id246 . -3) (undo-tree-id247 . -3) (undo-tree-id248 . -3) (undo-tree-id249 . -3) (undo-tree-id250 . -3) (undo-tree-id251 . -3) (undo-tree-id252 . -3) (undo-tree-id253 . -3) (undo-tree-id254 . -3) (undo-tree-id255 . -3) (undo-tree-id256 . -3) (undo-tree-id257 . -3) (undo-tree-id258 . -3) (undo-tree-id259 . -3) (undo-tree-id260 . -3) (undo-tree-id261 . -3) (undo-tree-id262 . -3) (undo-tree-id263 . -3) (undo-tree-id264 . -3) (undo-tree-id265 . -3) (undo-tree-id266 . -3) (undo-tree-id267 . -3) (undo-tree-id268 . -3) (undo-tree-id269 . -3) (undo-tree-id270 . -3) (undo-tree-id271 . -3) (undo-tree-id272 . -3) (undo-tree-id273 . -3) (undo-tree-id274 . -3) (undo-tree-id275 . -3) (undo-tree-id276 . -3) (undo-tree-id277 . -3) (undo-tree-id278 . -3) (undo-tree-id279 . -3) (undo-tree-id280 . -3) (undo-tree-id281 . -3) (undo-tree-id282 . -3) (undo-tree-id283 . -3) (undo-tree-id284 . -3) (undo-tree-id285 . -3) (undo-tree-id286 . -3) (undo-tree-id287 . -3) (undo-tree-id288 . -3) (undo-tree-id289 . -3) (undo-tree-id290 . -3) (undo-tree-id291 . -3) (undo-tree-id292 . -3) (undo-tree-id293 . -3) (undo-tree-id294 . -3) (undo-tree-id295 . -3) (undo-tree-id296 . -3) (undo-tree-id297 . -3) (undo-tree-id298 . -3) (undo-tree-id299 . -3) (undo-tree-id300 . -3) (undo-tree-id301 . -3) (undo-tree-id302 . -3) (undo-tree-id303 . -3) (undo-tree-id304 . -3) (undo-tree-id305 . -3) (undo-tree-id306 . -3) (undo-tree-id307 . -3) (undo-tree-id308 . -3) (undo-tree-id309 . -3) (undo-tree-id310 . -3) (undo-tree-id311 . -3) (undo-tree-id312 . -3) (undo-tree-id313 . -3) (undo-tree-id314 . -3) (undo-tree-id315 . -3) (undo-tree-id316 . -3) (undo-tree-id317 . -3) (undo-tree-id318 . -3) (undo-tree-id319 . -3) (undo-tree-id320 . -3) (undo-tree-id321 . -3) (undo-tree-id322 . -3) (undo-tree-id323 . -3) (undo-tree-id324 . -3) (undo-tree-id325 . -3) (undo-tree-id326 . -3) (undo-tree-id327 . -3) (undo-tree-id328 . -3) (undo-tree-id329 . -3) (undo-tree-id330 . -3) (undo-tree-id331 . -3) (undo-tree-id332 . -3) (undo-tree-id333 . -3) (undo-tree-id334 . -3) (undo-tree-id335 . -3) (undo-tree-id336 . -3) (undo-tree-id337 . -3) (undo-tree-id338 . -3) (undo-tree-id339 . -3) (undo-tree-id340 . -3) (undo-tree-id341 . -3) (undo-tree-id342 . -3) (undo-tree-id343 . -3) (undo-tree-id344 . -3) (undo-tree-id345 . -3) (undo-tree-id346 . -3) (undo-tree-id347 . -3) (undo-tree-id348 . -3) (undo-tree-id349 . -3) (undo-tree-id350 . -3) (undo-tree-id351 . -3) (undo-tree-id352 . -3) (undo-tree-id353 . -3) (undo-tree-id354 . -3) (undo-tree-id355 . -3) (undo-tree-id356 . -3) (undo-tree-id357 . -3) (undo-tree-id358 . -3) (undo-tree-id359 . -3) (undo-tree-id360 . -3) (undo-tree-id361 . -3) (undo-tree-id362 . -3) 6995) ((6992 . 6995)) (25302 49205 94578 0) 0 nil])
nil
nil
